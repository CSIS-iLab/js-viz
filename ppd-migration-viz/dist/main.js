!function(t){var n=window.webpackHotUpdate;window.webpackHotUpdate=function(t,e){!function(t,n){if(!w[t]||!_[t])return;for(var e in _[t]=!1,n)Object.prototype.hasOwnProperty.call(n,e)&&(p[e]=n[e]);0==--y&&0===m&&A()}(t,e),n&&n(t,e)};var e,r=!0,i="a58bc7e7e4c5297ab655",o={},a=[],u=[];function c(t){var n=k[t];if(!n)return O;var r=function(r){return n.hot.active?(k[r]?-1===k[r].parents.indexOf(t)&&k[r].parents.push(t):(a=[t],e=r),-1===n.children.indexOf(r)&&n.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+t),a=[]),O(r)},i=function(t){return{configurable:!0,enumerable:!0,get:function(){return O[t]},set:function(n){O[t]=n}}};for(var o in O)Object.prototype.hasOwnProperty.call(O,o)&&"e"!==o&&"t"!==o&&Object.defineProperty(r,o,i(o));return r.e=function(t){return"ready"===l&&h("prepare"),m++,O.e(t).then(n,(function(t){throw n(),t}));function n(){m--,"prepare"===l&&(b[t]||S(t),0===m&&0===y&&A())}},r.t=function(t,n){return 1&n&&(t=r(t)),O.t(t,-2&n)},r}function f(n){var r={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:e!==n,active:!0,accept:function(t,n){if(void 0===t)r._selfAccepted=!0;else if("function"==typeof t)r._selfAccepted=t;else if("object"==typeof t)for(var e=0;e<t.length;e++)r._acceptedDependencies[t[e]]=n||function(){};else r._acceptedDependencies[t]=n||function(){}},decline:function(t){if(void 0===t)r._selfDeclined=!0;else if("object"==typeof t)for(var n=0;n<t.length;n++)r._declinedDependencies[t[n]]=!0;else r._declinedDependencies[t]=!0},dispose:function(t){r._disposeHandlers.push(t)},addDisposeHandler:function(t){r._disposeHandlers.push(t)},removeDisposeHandler:function(t){var n=r._disposeHandlers.indexOf(t);n>=0&&r._disposeHandlers.splice(n,1)},invalidate:function(){switch(this._selfInvalidated=!0,l){case"idle":(p={})[n]=t[n],h("ready");break;case"ready":C(n);break;case"prepare":case"check":case"dispose":case"apply":(g=g||[]).push(n)}},check:M,apply:E,status:function(t){if(!t)return l;s.push(t)},addStatusHandler:function(t){s.push(t)},removeStatusHandler:function(t){var n=s.indexOf(t);n>=0&&s.splice(n,1)},data:o[n]};return e=void 0,r}var s=[],l="idle";function h(t){l=t;for(var n=0;n<s.length;n++)s[n].call(null,t)}var d,p,v,g,y=0,m=0,b={},_={},w={};function x(t){return+t+""===t?+t:t}function M(t){if("idle"!==l)throw new Error("check() is only allowed in idle status");return r=t,h("check"),(n=1e4,n=n||1e4,new Promise((function(t,e){if("undefined"==typeof XMLHttpRequest)return e(new Error("No browser support"));try{var r=new XMLHttpRequest,o=O.p+""+i+".hot-update.json";r.open("GET",o,!0),r.timeout=n,r.send(null)}catch(t){return e(t)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)e(new Error("Manifest request to "+o+" timed out."));else if(404===r.status)t();else if(200!==r.status&&304!==r.status)e(new Error("Manifest request to "+o+" failed."));else{try{var n=JSON.parse(r.responseText)}catch(t){return void e(t)}t(n)}}}))).then((function(t){if(!t)return h(T()?"ready":"idle"),null;_={},b={},w=t.c,v=t.h,h("prepare");var n=new Promise((function(t,n){d={resolve:t,reject:n}}));p={};return S(0),"prepare"===l&&0===m&&0===y&&A(),n}));var n}function S(t){w[t]?(_[t]=!0,y++,function(t){var n=document.createElement("script");n.charset="utf-8",n.src=O.p+""+t+"."+i+".hot-update.js",document.head.appendChild(n)}(t)):b[t]=!0}function A(){h("ready");var t=d;if(d=null,t)if(r)Promise.resolve().then((function(){return E(r)})).then((function(n){t.resolve(n)}),(function(n){t.reject(n)}));else{var n=[];for(var e in p)Object.prototype.hasOwnProperty.call(p,e)&&n.push(x(e));t.resolve(n)}}function E(n){if("ready"!==l)throw new Error("apply() is only allowed in ready status");return function n(r){var u,c,f,s,l;function d(t){for(var n=[t],e={},r=n.map((function(t){return{chain:[t],id:t}}));r.length>0;){var i=r.pop(),o=i.id,a=i.chain;if((s=k[o])&&(!s.hot._selfAccepted||s.hot._selfInvalidated)){if(s.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:o};if(s.hot._main)return{type:"unaccepted",chain:a,moduleId:o};for(var u=0;u<s.parents.length;u++){var c=s.parents[u],f=k[c];if(f){if(f.hot._declinedDependencies[o])return{type:"declined",chain:a.concat([c]),moduleId:o,parentId:c};-1===n.indexOf(c)&&(f.hot._acceptedDependencies[o]?(e[c]||(e[c]=[]),y(e[c],[o])):(delete e[c],n.push(c),r.push({chain:a.concat([c]),id:c})))}}}}return{type:"accepted",moduleId:t,outdatedModules:n,outdatedDependencies:e}}function y(t,n){for(var e=0;e<n.length;e++){var r=n[e];-1===t.indexOf(r)&&t.push(r)}}T();var m={},b=[],_={},M=function(){console.warn("[HMR] unexpected require("+A.moduleId+") to disposed module")};for(var S in p)if(Object.prototype.hasOwnProperty.call(p,S)){var A;l=x(S),A=p[S]?d(l):{type:"disposed",moduleId:S};var E=!1,C=!1,N=!1,j="";switch(A.chain&&(j="\nUpdate propagation: "+A.chain.join(" -> ")),A.type){case"self-declined":r.onDeclined&&r.onDeclined(A),r.ignoreDeclined||(E=new Error("Aborted because of self decline: "+A.moduleId+j));break;case"declined":r.onDeclined&&r.onDeclined(A),r.ignoreDeclined||(E=new Error("Aborted because of declined dependency: "+A.moduleId+" in "+A.parentId+j));break;case"unaccepted":r.onUnaccepted&&r.onUnaccepted(A),r.ignoreUnaccepted||(E=new Error("Aborted because "+l+" is not accepted"+j));break;case"accepted":r.onAccepted&&r.onAccepted(A),C=!0;break;case"disposed":r.onDisposed&&r.onDisposed(A),N=!0;break;default:throw new Error("Unexception type "+A.type)}if(E)return h("abort"),Promise.reject(E);if(C)for(l in _[l]=p[l],y(b,A.outdatedModules),A.outdatedDependencies)Object.prototype.hasOwnProperty.call(A.outdatedDependencies,l)&&(m[l]||(m[l]=[]),y(m[l],A.outdatedDependencies[l]));N&&(y(b,[A.moduleId]),_[l]=M)}var P,D=[];for(c=0;c<b.length;c++)l=b[c],k[l]&&k[l].hot._selfAccepted&&_[l]!==M&&!k[l].hot._selfInvalidated&&D.push({module:l,parents:k[l].parents.slice(),errorHandler:k[l].hot._selfAccepted});h("dispose"),Object.keys(w).forEach((function(t){!1===w[t]&&function(t){delete installedChunks[t]}(t)}));var L,F,U=b.slice();for(;U.length>0;)if(l=U.pop(),s=k[l]){var I={},R=s.hot._disposeHandlers;for(f=0;f<R.length;f++)(u=R[f])(I);for(o[l]=I,s.hot.active=!1,delete k[l],delete m[l],f=0;f<s.children.length;f++){var H=k[s.children[f]];H&&((P=H.parents.indexOf(l))>=0&&H.parents.splice(P,1))}}for(l in m)if(Object.prototype.hasOwnProperty.call(m,l)&&(s=k[l]))for(F=m[l],f=0;f<F.length;f++)L=F[f],(P=s.children.indexOf(L))>=0&&s.children.splice(P,1);h("apply"),void 0!==v&&(i=v,v=void 0);for(l in p=void 0,_)Object.prototype.hasOwnProperty.call(_,l)&&(t[l]=_[l]);var Y=null;for(l in m)if(Object.prototype.hasOwnProperty.call(m,l)&&(s=k[l])){F=m[l];var z=[];for(c=0;c<F.length;c++)if(L=F[c],u=s.hot._acceptedDependencies[L]){if(-1!==z.indexOf(u))continue;z.push(u)}for(c=0;c<z.length;c++){u=z[c];try{u(F)}catch(t){r.onErrored&&r.onErrored({type:"accept-errored",moduleId:l,dependencyId:F[c],error:t}),r.ignoreErrored||Y||(Y=t)}}}for(c=0;c<D.length;c++){var q=D[c];l=q.module,a=q.parents,e=l;try{O(l)}catch(t){if("function"==typeof q.errorHandler)try{q.errorHandler(t)}catch(n){r.onErrored&&r.onErrored({type:"self-accept-error-handler-errored",moduleId:l,error:n,originalError:t}),r.ignoreErrored||Y||(Y=n),Y||(Y=t)}else r.onErrored&&r.onErrored({type:"self-accept-errored",moduleId:l,error:t}),r.ignoreErrored||Y||(Y=t)}}if(Y)return h("fail"),Promise.reject(Y);if(g)return n(r).then((function(t){return b.forEach((function(n){t.indexOf(n)<0&&t.push(n)})),t}));return h("idle"),new Promise((function(t){t(b)}))}(n=n||{})}function T(){if(g)return p||(p={}),g.forEach(C),g=void 0,!0}function C(n){Object.prototype.hasOwnProperty.call(p,n)||(p[n]=t[n])}var k={};function O(n){if(k[n])return k[n].exports;var e=k[n]={i:n,l:!1,exports:{},hot:f(n),parents:(u=a,a=[],u),children:[]};return t[n].call(e.exports,e,e.exports,c(n)),e.l=!0,e.exports}O.m=t,O.c=k,O.d=function(t,n,e){O.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},O.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},O.t=function(t,n){if(1&n&&(t=O(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(O.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var r in t)O.d(e,r,function(n){return t[n]}.bind(null,r));return e},O.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return O.d(n,"a",n),n},O.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},O.p="",O.h=function(){return i},c(133)(O.s=133)}([function(t,n,e){var r=e(34)("wks"),i=e(26),o=e(2).Symbol,a="function"==typeof o;(t.exports=function(t){return r[t]||(r[t]=a&&o[t]||(a?o:i)("Symbol."+t))}).store=r},function(t,n,e){var r=e(2),i=e(14),o=e(12),a=e(9),u=e(11),c=function(t,n,e){var f,s,l,h,d=t&c.F,p=t&c.G,v=t&c.S,g=t&c.P,y=t&c.B,m=p?r:v?r[n]||(r[n]={}):(r[n]||{}).prototype,b=p?i:i[n]||(i[n]={}),_=b.prototype||(b.prototype={});for(f in p&&(e=n),e)l=((s=!d&&m&&void 0!==m[f])?m:e)[f],h=y&&s?u(l,r):g&&"function"==typeof l?u(Function.call,l):l,m&&a(m,f,l,t&c.U),b[f]!=l&&o(b,f,h),g&&_[f]!=l&&(_[f]=l)};r.core=i,c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},function(t,n){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},function(t,n,e){t.exports=!e(7)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(t,n,e){var r=e(5),i=e(64),o=e(44),a=Object.defineProperty;n.f=e(3)?Object.defineProperty:function(t,n,e){if(r(t),n=o(n,!0),r(e),i)try{return a(t,n,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported!");return"value"in e&&(t[n]=e.value),t}},function(t,n,e){var r=e(6);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},,function(t,n,e){var r=e(2),i=e(12),o=e(15),a=e(26)("src"),u=e(97),c=(""+u).split("toString");e(14).inspectSource=function(t){return u.call(t)},(t.exports=function(t,n,e,u){var f="function"==typeof e;f&&(o(e,"name")||i(e,"name",n)),t[n]!==e&&(f&&(o(e,a)||i(e,a,t[n]?""+t[n]:c.join(String(n)))),t===r?t[n]=e:u?t[n]?t[n]=e:i(t,n,e):(delete t[n],i(t,n,e)))})(Function.prototype,"toString",(function(){return"function"==typeof this&&this[a]||u.call(this)}))},,function(t,n,e){var r=e(18);t.exports=function(t,n,e){if(r(t),void 0===n)return t;switch(e){case 1:return function(e){return t.call(n,e)};case 2:return function(e,r){return t.call(n,e,r)};case 3:return function(e,r,i){return t.call(n,e,r,i)}}return function(){return t.apply(n,arguments)}}},function(t,n,e){var r=e(4),i=e(27);t.exports=e(3)?function(t,n,e){return r.f(t,n,i(1,e))}:function(t,n,e){return t[n]=e,t}},function(t,n,e){var r=e(30);t.exports=function(t){return Object(r(t))}},function(t,n){var e=t.exports={version:"2.6.11"};"number"==typeof __e&&(__e=e)},function(t,n){var e={}.hasOwnProperty;t.exports=function(t,n){return e.call(t,n)}},function(t,n,e){var r=e(35),i=Math.min;t.exports=function(t){return t>0?i(r(t),9007199254740991):0}},function(t,n,e){var r=e(53),i=e(30);t.exports=function(t){return r(i(t))}},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,n){var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},function(t,n,e){"use strict";var r=e(7);t.exports=function(t,n){return!!t&&r((function(){n?t.call(null,(function(){}),1):t.call(null)}))}},function(t,n,e){"use strict";var r=e(73),i=e(74),o=e(28),a=e(17);t.exports=e(56)(Array,"Array",(function(t,n){this._t=a(t),this._i=0,this._k=n}),(function(){var t=this._t,n=this._k,e=this._i++;return!t||e>=t.length?(this._t=void 0,i(1)):i(0,"keys"==n?e:"values"==n?t[e]:[e,t[e]])}),"values"),o.Arguments=o.Array,r("keys"),r("values"),r("entries")},function(t,n,e){var r=e(75),i=e(60);t.exports=Object.keys||function(t){return r(t,i)}},function(t,n,e){"use strict";var r=e(33),i={};i[e(0)("toStringTag")]="z",i+""!="[object z]"&&e(9)(Object.prototype,"toString",(function(){return"[object "+r(this)+"]"}),!0)},,function(t,n){t.exports=!1},function(t,n){var e=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+r).toString(36))}},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n){t.exports={}},function(t,n,e){var r=e(4).f,i=e(15),o=e(0)("toStringTag");t.exports=function(t,n,e){t&&!i(t=e?t:t.prototype,o)&&r(t,o,{configurable:!0,value:n})}},function(t,n){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,n,e){for(var r=e(21),i=e(22),o=e(9),a=e(2),u=e(12),c=e(28),f=e(0),s=f("iterator"),l=f("toStringTag"),h=c.Array,d={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},p=i(d),v=0;v<p.length;v++){var g,y=p[v],m=d[y],b=a[y],_=b&&b.prototype;if(_&&(_[s]||u(_,s,h),_[l]||u(_,l,y),c[y]=h,m))for(g in r)_[g]||o(_,g,r[g],!0)}},,function(t,n,e){var r=e(19),i=e(0)("toStringTag"),o="Arguments"==r(function(){return arguments}());t.exports=function(t){var n,e,a;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=function(t,n){try{return t[n]}catch(t){}}(n=Object(t),i))?e:o?r(n):"Object"==(a=r(n))&&"function"==typeof n.callee?"Arguments":a}},function(t,n,e){var r=e(14),i=e(2),o=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(t.exports=function(t,n){return o[t]||(o[t]=void 0!==n?n:{})})("versions",[]).push({version:r.version,mode:e(25)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,n){var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},function(t,n,e){"use strict";var r=e(1),i=e(52)(1);r(r.P+r.F*!e(20)([].map,!0),"Array",{map:function(t){return i(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(5);t.exports=function(){var t=r(this),n="";return t.global&&(n+="g"),t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),t.unicode&&(n+="u"),t.sticky&&(n+="y"),n}},function(t,n){n.f={}.propertyIsEnumerable},,,function(t,n,e){var r=function(t){"use strict";var n=Object.prototype,e=n.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},i=r.iterator||"@@iterator",o=r.asyncIterator||"@@asyncIterator",a=r.toStringTag||"@@toStringTag";function u(t,n,e,r){var i=n&&n.prototype instanceof s?n:s,o=Object.create(i.prototype),a=new x(r||[]);return o._invoke=function(t,n,e){var r="suspendedStart";return function(i,o){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===i)throw o;return S()}for(e.method=i,e.arg=o;;){var a=e.delegate;if(a){var u=b(a,e);if(u){if(u===f)continue;return u}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if("suspendedStart"===r)throw r="completed",e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);r="executing";var s=c(t,n,e);if("normal"===s.type){if(r=e.done?"completed":"suspendedYield",s.arg===f)continue;return{value:s.arg,done:e.done}}"throw"===s.type&&(r="completed",e.method="throw",e.arg=s.arg)}}}(t,e,a),o}function c(t,n,e){try{return{type:"normal",arg:t.call(n,e)}}catch(t){return{type:"throw",arg:t}}}t.wrap=u;var f={};function s(){}function l(){}function h(){}var d={};d[i]=function(){return this};var p=Object.getPrototypeOf,v=p&&p(p(M([])));v&&v!==n&&e.call(v,i)&&(d=v);var g=h.prototype=s.prototype=Object.create(d);function y(t){["next","throw","return"].forEach((function(n){t[n]=function(t){return this._invoke(n,t)}}))}function m(t,n){var r;this._invoke=function(i,o){function a(){return new n((function(r,a){!function r(i,o,a,u){var f=c(t[i],t,o);if("throw"!==f.type){var s=f.arg,l=s.value;return l&&"object"==typeof l&&e.call(l,"__await")?n.resolve(l.__await).then((function(t){r("next",t,a,u)}),(function(t){r("throw",t,a,u)})):n.resolve(l).then((function(t){s.value=t,a(s)}),(function(t){return r("throw",t,a,u)}))}u(f.arg)}(i,o,r,a)}))}return r=r?r.then(a,a):a()}}function b(t,n){var e=t.iterator[n.method];if(void 0===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=void 0,b(t,n),"throw"===n.method))return f;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return f}var r=c(e,t.iterator,n.arg);if("throw"===r.type)return n.method="throw",n.arg=r.arg,n.delegate=null,f;var i=r.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=void 0),n.delegate=null,f):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,f)}function _(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function w(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function x(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(_,this),this.reset(!0)}function M(t){if(t){var n=t[i];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,o=function n(){for(;++r<t.length;)if(e.call(t,r))return n.value=t[r],n.done=!1,n;return n.value=void 0,n.done=!0,n};return o.next=o}}return{next:S}}function S(){return{value:void 0,done:!0}}return l.prototype=g.constructor=h,h.constructor=l,h[a]=l.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===l||"GeneratorFunction"===(n.displayName||n.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,h):(t.__proto__=h,a in t||(t[a]="GeneratorFunction")),t.prototype=Object.create(g),t},t.awrap=function(t){return{__await:t}},y(m.prototype),m.prototype[o]=function(){return this},t.AsyncIterator=m,t.async=function(n,e,r,i,o){void 0===o&&(o=Promise);var a=new m(u(n,e,r,i),o);return t.isGeneratorFunction(e)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},y(g),g[a]="Generator",g[i]=function(){return this},g.toString=function(){return"[object Generator]"},t.keys=function(t){var n=[];for(var e in t)n.push(e);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},t.values=M,x.prototype={constructor:x,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(w),!t)for(var n in this)"t"===n.charAt(0)&&e.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function r(e,r){return a.type="throw",a.arg=t,n.next=e,r&&(n.method="next",n.arg=void 0),!!r}for(var i=this.tryEntries.length-1;i>=0;--i){var o=this.tryEntries[i],a=o.completion;if("root"===o.tryLoc)return r("end");if(o.tryLoc<=this.prev){var u=e.call(o,"catchLoc"),c=e.call(o,"finallyLoc");if(u&&c){if(this.prev<o.catchLoc)return r(o.catchLoc,!0);if(this.prev<o.finallyLoc)return r(o.finallyLoc)}else if(u){if(this.prev<o.catchLoc)return r(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return r(o.finallyLoc)}}}},abrupt:function(t,n){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&e.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=n&&n<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=t,a.arg=n,o?(this.method="next",this.next=o.finallyLoc,f):this.complete(a)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),f},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),w(e),f}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.tryLoc===t){var r=e.completion;if("throw"===r.type){var i=r.arg;w(e)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,e){return this.delegate={iterator:M(t),resultName:n,nextLoc:e},"next"===this.method&&(this.arg=void 0),f}},t}(t.exports);try{regeneratorRuntime=r}catch(t){Function("r","regeneratorRuntime = r")(r)}},function(t,n,e){"use strict";var r,i,o,a,u=e(25),c=e(2),f=e(11),s=e(33),l=e(1),h=e(6),d=e(18),p=e(45),v=e(46),g=e(68),y=e(69).set,m=e(99)(),b=e(71),_=e(100),w=e(101),x=e(102),M=c.TypeError,S=c.process,A=S&&S.versions,E=A&&A.v8||"",T=c.Promise,C="process"==s(S),k=function(){},O=i=b.f,N=!!function(){try{var t=T.resolve(1),n=(t.constructor={})[e(0)("species")]=function(t){t(k,k)};return(C||"function"==typeof PromiseRejectionEvent)&&t.then(k)instanceof n&&0!==E.indexOf("6.6")&&-1===w.indexOf("Chrome/66")}catch(t){}}(),j=function(t){var n;return!(!h(t)||"function"!=typeof(n=t.then))&&n},P=function(t,n){if(!t._n){t._n=!0;var e=t._c;m((function(){for(var r=t._v,i=1==t._s,o=0,a=function(n){var e,o,a,u=i?n.ok:n.fail,c=n.resolve,f=n.reject,s=n.domain;try{u?(i||(2==t._h&&F(t),t._h=1),!0===u?e=r:(s&&s.enter(),e=u(r),s&&(s.exit(),a=!0)),e===n.promise?f(M("Promise-chain cycle")):(o=j(e))?o.call(e,c,f):c(e)):f(r)}catch(t){s&&!a&&s.exit(),f(t)}};e.length>o;)a(e[o++]);t._c=[],t._n=!1,n&&!t._h&&D(t)}))}},D=function(t){y.call(c,(function(){var n,e,r,i=t._v,o=L(t);if(o&&(n=_((function(){C?S.emit("unhandledRejection",i,t):(e=c.onunhandledrejection)?e({promise:t,reason:i}):(r=c.console)&&r.error&&r.error("Unhandled promise rejection",i)})),t._h=C||L(t)?2:1),t._a=void 0,o&&n.e)throw n.v}))},L=function(t){return 1!==t._h&&0===(t._a||t._c).length},F=function(t){y.call(c,(function(){var n;C?S.emit("rejectionHandled",t):(n=c.onrejectionhandled)&&n({promise:t,reason:t._v})}))},U=function(t){var n=this;n._d||(n._d=!0,(n=n._w||n)._v=t,n._s=2,n._a||(n._a=n._c.slice()),P(n,!0))},I=function(t){var n,e=this;if(!e._d){e._d=!0,e=e._w||e;try{if(e===t)throw M("Promise can't be resolved itself");(n=j(t))?m((function(){var r={_w:e,_d:!1};try{n.call(t,f(I,r,1),f(U,r,1))}catch(t){U.call(r,t)}})):(e._v=t,e._s=1,P(e,!1))}catch(t){U.call({_w:e,_d:!1},t)}}};N||(T=function(t){p(this,T,"Promise","_h"),d(t),r.call(this);try{t(f(I,this,1),f(U,this,1))}catch(t){U.call(this,t)}},(r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=e(47)(T.prototype,{then:function(t,n){var e=O(g(this,T));return e.ok="function"!=typeof t||t,e.fail="function"==typeof n&&n,e.domain=C?S.domain:void 0,this._c.push(e),this._a&&this._a.push(e),this._s&&P(this,!1),e.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r;this.promise=t,this.resolve=f(I,t,1),this.reject=f(U,t,1)},b.f=O=function(t){return t===T||t===a?new o(t):i(t)}),l(l.G+l.W+l.F*!N,{Promise:T}),e(29)(T,"Promise"),e(48)("Promise"),a=e(14).Promise,l(l.S+l.F*!N,"Promise",{reject:function(t){var n=O(this);return(0,n.reject)(t),n.promise}}),l(l.S+l.F*(u||!N),"Promise",{resolve:function(t){return x(u&&this===a?T:this,t)}}),l(l.S+l.F*!(N&&e(49)((function(t){T.all(t).catch(k)}))),"Promise",{all:function(t){var n=this,e=O(n),r=e.resolve,i=e.reject,o=_((function(){var e=[],o=0,a=1;v(t,!1,(function(t){var u=o++,c=!1;e.push(void 0),a++,n.resolve(t).then((function(t){c||(c=!0,e[u]=t,--a||r(e))}),i)})),--a||r(e)}));return o.e&&i(o.v),e.promise},race:function(t){var n=this,e=O(n),r=e.reject,i=_((function(){v(t,!1,(function(t){n.resolve(t).then(e.resolve,r)}))}));return i.e&&r(i.v),e.promise}})},function(t,n,e){var r=e(6),i=e(2).document,o=r(i)&&r(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},function(t,n,e){var r=e(6);t.exports=function(t,n){if(!r(t))return t;var e,i;if(n&&"function"==typeof(e=t.toString)&&!r(i=e.call(t)))return i;if("function"==typeof(e=t.valueOf)&&!r(i=e.call(t)))return i;if(!n&&"function"==typeof(e=t.toString)&&!r(i=e.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,n){t.exports=function(t,n,e,r){if(!(t instanceof n)||void 0!==r&&r in t)throw TypeError(e+": incorrect invocation!");return t}},function(t,n,e){var r=e(11),i=e(65),o=e(66),a=e(5),u=e(16),c=e(67),f={},s={};(n=t.exports=function(t,n,e,l,h){var d,p,v,g,y=h?function(){return t}:c(t),m=r(e,l,n?2:1),b=0;if("function"!=typeof y)throw TypeError(t+" is not iterable!");if(o(y)){for(d=u(t.length);d>b;b++)if((g=n?m(a(p=t[b])[0],p[1]):m(t[b]))===f||g===s)return g}else for(v=y.call(t);!(p=v.next()).done;)if((g=i(v,m,p.value,n))===f||g===s)return g}).BREAK=f,n.RETURN=s},function(t,n,e){var r=e(9);t.exports=function(t,n,e){for(var i in n)r(t,i,n[i],e);return t}},function(t,n,e){"use strict";var r=e(2),i=e(4),o=e(3),a=e(0)("species");t.exports=function(t){var n=r[t];o&&n&&!n[a]&&i.f(n,a,{configurable:!0,get:function(){return this}})}},function(t,n,e){var r=e(0)("iterator"),i=!1;try{var o=[7][r]();o.return=function(){i=!0},Array.from(o,(function(){throw 2}))}catch(t){}t.exports=function(t,n){if(!n&&!i)return!1;var e=!1;try{var o=[7],a=o[r]();a.next=function(){return{done:e=!0}},o[r]=function(){return a},t(o)}catch(t){}return e}},function(t,n,e){"use strict";var r=e(1),i=e(18),o=e(13),a=e(7),u=[].sort,c=[1,2,3];r(r.P+r.F*(a((function(){c.sort(void 0)}))||!a((function(){c.sort(null)}))||!e(20)(u)),"Array",{sort:function(t){return void 0===t?u.call(o(this)):u.call(o(this),i(t))}})},function(t,n,e){"use strict";var r=e(1),i=e(52)(2);r(r.P+r.F*!e(20)([].filter,!0),"Array",{filter:function(t){return i(this,t,arguments[1])}})},function(t,n,e){var r=e(11),i=e(53),o=e(13),a=e(16),u=e(103);t.exports=function(t,n){var e=1==t,c=2==t,f=3==t,s=4==t,l=6==t,h=5==t||l,d=n||u;return function(n,u,p){for(var v,g,y=o(n),m=i(y),b=r(u,p,3),_=a(m.length),w=0,x=e?d(n,_):c?d(n,0):void 0;_>w;w++)if((h||w in m)&&(g=b(v=m[w],w,y),t))if(e)x[w]=g;else if(g)switch(t){case 3:return!0;case 5:return v;case 6:return w;case 2:x.push(v)}else if(s)return!1;return l?-1:f||s?s:x}}},function(t,n,e){var r=e(19);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,n,e){var r=e(19);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,n,e){"use strict";var r=e(1),i=e(105);r(r.P+r.F*!e(20)([].reduce,!0),"Array",{reduce:function(t){return i(this,t,arguments.length,arguments[1],!1)}})},function(t,n,e){"use strict";var r=e(25),i=e(1),o=e(9),a=e(12),u=e(28),c=e(106),f=e(29),s=e(109),l=e(0)("iterator"),h=!([].keys&&"next"in[].keys()),d=function(){return this};t.exports=function(t,n,e,p,v,g,y){c(e,n,p);var m,b,_,w=function(t){if(!h&&t in A)return A[t];switch(t){case"keys":case"values":return function(){return new e(this,t)}}return function(){return new e(this,t)}},x=n+" Iterator",M="values"==v,S=!1,A=t.prototype,E=A[l]||A["@@iterator"]||v&&A[v],T=E||w(v),C=v?M?w("entries"):T:void 0,k="Array"==n&&A.entries||E;if(k&&(_=s(k.call(new t)))!==Object.prototype&&_.next&&(f(_,x,!0),r||"function"==typeof _[l]||a(_,l,d)),M&&E&&"values"!==E.name&&(S=!0,T=function(){return E.call(this)}),r&&!y||!h&&!S&&A[l]||a(A,l,T),u[n]=T,u[x]=d,v)if(m={values:M?T:w("values"),keys:g?T:w("keys"),entries:C},y)for(b in m)b in A||o(A,b,m[b]);else i(i.P+i.F*(h||S),n,m);return m}},function(t,n,e){var r=e(5),i=e(107),o=e(60),a=e(59)("IE_PROTO"),u=function(){},c=function(){var t,n=e(43)("iframe"),r=o.length;for(n.style.display="none",e(70).appendChild(n),n.src="javascript:",(t=n.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),c=t.F;r--;)delete c.prototype[o[r]];return c()};t.exports=Object.create||function(t,n){var e;return null!==t?(u.prototype=r(t),e=new u,u.prototype=null,e[a]=t):e=c(),void 0===n?e:i(e,n)}},function(t,n,e){var r=e(17),i=e(16),o=e(108);t.exports=function(t){return function(n,e,a){var u,c=r(n),f=i(c.length),s=o(a,f);if(t&&e!=e){for(;f>s;)if((u=c[s++])!=u)return!0}else for(;f>s;s++)if((t||s in c)&&c[s]===e)return t||s||0;return!t&&-1}}},function(t,n,e){var r=e(34)("keys"),i=e(26);t.exports=function(t){return r[t]||(r[t]=i(t))}},function(t,n){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,n,e){"use strict";var r,i,o=e(37),a=RegExp.prototype.exec,u=String.prototype.replace,c=a,f=(r=/a/,i=/b*/g,a.call(r,"a"),a.call(i,"a"),0!==r.lastIndex||0!==i.lastIndex),s=void 0!==/()??/.exec("")[1];(f||s)&&(c=function(t){var n,e,r,i,c=this;return s&&(e=new RegExp("^"+c.source+"$(?!\\s)",o.call(c))),f&&(n=c.lastIndex),r=a.call(c,t),f&&r&&(c.lastIndex=c.global?r.index+r[0].length:n),s&&r&&r.length>1&&u.call(r[0],e,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(r[i]=void 0)})),r}),t.exports=c},function(t,n,e){var r=e(26)("meta"),i=e(6),o=e(15),a=e(4).f,u=0,c=Object.isExtensible||function(){return!0},f=!e(7)((function(){return c(Object.preventExtensions({}))})),s=function(t){a(t,r,{value:{i:"O"+ ++u,w:{}}})},l=t.exports={KEY:r,NEED:!1,fastKey:function(t,n){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,r)){if(!c(t))return"F";if(!n)return"E";s(t)}return t[r].i},getWeak:function(t,n){if(!o(t,r)){if(!c(t))return!0;if(!n)return!1;s(t)}return t[r].w},onFreeze:function(t){return f&&l.NEED&&c(t)&&!o(t,r)&&s(t),t}}},function(t,n,e){var r=e(75),i=e(60).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},function(t,n,e){t.exports=!e(3)&&!e(7)((function(){return 7!=Object.defineProperty(e(43)("div"),"a",{get:function(){return 7}}).a}))},function(t,n,e){var r=e(5);t.exports=function(t,n,e,i){try{return i?n(r(e)[0],e[1]):n(e)}catch(n){var o=t.return;throw void 0!==o&&r(o.call(t)),n}}},function(t,n,e){var r=e(28),i=e(0)("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||o[i]===t)}},function(t,n,e){var r=e(33),i=e(0)("iterator"),o=e(28);t.exports=e(14).getIteratorMethod=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[r(t)]}},function(t,n,e){var r=e(5),i=e(18),o=e(0)("species");t.exports=function(t,n){var e,a=r(t).constructor;return void 0===a||null==(e=r(a)[o])?n:i(e)}},function(t,n,e){var r,i,o,a=e(11),u=e(98),c=e(70),f=e(43),s=e(2),l=s.process,h=s.setImmediate,d=s.clearImmediate,p=s.MessageChannel,v=s.Dispatch,g=0,y={},m=function(){var t=+this;if(y.hasOwnProperty(t)){var n=y[t];delete y[t],n()}},b=function(t){m.call(t.data)};h&&d||(h=function(t){for(var n=[],e=1;arguments.length>e;)n.push(arguments[e++]);return y[++g]=function(){u("function"==typeof t?t:Function(t),n)},r(g),g},d=function(t){delete y[t]},"process"==e(19)(l)?r=function(t){l.nextTick(a(m,t,1))}:v&&v.now?r=function(t){v.now(a(m,t,1))}:p?(o=(i=new p).port2,i.port1.onmessage=b,r=a(o.postMessage,o,1)):s.addEventListener&&"function"==typeof postMessage&&!s.importScripts?(r=function(t){s.postMessage(t+"","*")},s.addEventListener("message",b,!1)):r="onreadystatechange"in f("script")?function(t){c.appendChild(f("script")).onreadystatechange=function(){c.removeChild(this),m.call(t)}}:function(t){setTimeout(a(m,t,1),0)}),t.exports={set:h,clear:d}},function(t,n,e){var r=e(2).document;t.exports=r&&r.documentElement},function(t,n,e){"use strict";var r=e(18);function i(t){var n,e;this.promise=new t((function(t,r){if(void 0!==n||void 0!==e)throw TypeError("Bad Promise constructor");n=t,e=r})),this.resolve=r(n),this.reject=r(e)}t.exports.f=function(t){return new i(t)}},function(t,n,e){"use strict";var r=e(1),i=e(52)(0),o=e(20)([].forEach,!0);r(r.P+r.F*!o,"Array",{forEach:function(t){return i(this,t,arguments[1])}})},function(t,n,e){var r=e(0)("unscopables"),i=Array.prototype;null==i[r]&&e(12)(i,r,{}),t.exports=function(t){i[r][t]=!0}},function(t,n){t.exports=function(t,n){return{value:n,done:!!t}}},function(t,n,e){var r=e(15),i=e(17),o=e(58)(!1),a=e(59)("IE_PROTO");t.exports=function(t,n){var e,u=i(t),c=0,f=[];for(e in u)e!=a&&r(u,e)&&f.push(e);for(;n.length>c;)r(u,e=n[c++])&&(~o(f,e)||f.push(e));return f}},function(t,n,e){"use strict";var r=e(5),i=e(13),o=e(16),a=e(35),u=e(77),c=e(79),f=Math.max,s=Math.min,l=Math.floor,h=/\$([$&`']|\d\d?|<[^>]*>)/g,d=/\$([$&`']|\d\d?)/g;e(80)("replace",2,(function(t,n,e,p){return[function(r,i){var o=t(this),a=null==r?void 0:r[n];return void 0!==a?a.call(r,o,i):e.call(String(o),r,i)},function(t,n){var i=p(e,t,this,n);if(i.done)return i.value;var l=r(t),h=String(this),d="function"==typeof n;d||(n=String(n));var g=l.global;if(g){var y=l.unicode;l.lastIndex=0}for(var m=[];;){var b=c(l,h);if(null===b)break;if(m.push(b),!g)break;""===String(b[0])&&(l.lastIndex=u(h,o(l.lastIndex),y))}for(var _,w="",x=0,M=0;M<m.length;M++){b=m[M];for(var S=String(b[0]),A=f(s(a(b.index),h.length),0),E=[],T=1;T<b.length;T++)E.push(void 0===(_=b[T])?_:String(_));var C=b.groups;if(d){var k=[S].concat(E,A,h);void 0!==C&&k.push(C);var O=String(n.apply(void 0,k))}else O=v(S,h,A,E,C,n);A>=x&&(w+=h.slice(x,A)+O,x=A+S.length)}return w+h.slice(x)}];function v(t,n,r,o,a,u){var c=r+t.length,f=o.length,s=d;return void 0!==a&&(a=i(a),s=h),e.call(u,s,(function(e,i){var u;switch(i.charAt(0)){case"$":return"$";case"&":return t;case"`":return n.slice(0,r);case"'":return n.slice(c);case"<":u=a[i.slice(1,-1)];break;default:var s=+i;if(0===s)return e;if(s>f){var h=l(s/10);return 0===h?e:h<=f?void 0===o[h-1]?i.charAt(1):o[h-1]+i.charAt(1):e}u=o[s-1]}return void 0===u?"":u}))}}))},function(t,n,e){"use strict";var r=e(78)(!0);t.exports=function(t,n,e){return n+(e?r(t,n).length:1)}},function(t,n,e){var r=e(35),i=e(30);t.exports=function(t){return function(n,e){var o,a,u=String(i(n)),c=r(e),f=u.length;return c<0||c>=f?t?"":void 0:(o=u.charCodeAt(c))<55296||o>56319||c+1===f||(a=u.charCodeAt(c+1))<56320||a>57343?t?u.charAt(c):o:t?u.slice(c,c+2):a-56320+(o-55296<<10)+65536}}},function(t,n,e){"use strict";var r=e(33),i=RegExp.prototype.exec;t.exports=function(t,n){var e=t.exec;if("function"==typeof e){var o=e.call(t,n);if("object"!=typeof o)throw new TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==r(t))throw new TypeError("RegExp#exec called on incompatible receiver");return i.call(t,n)}},function(t,n,e){"use strict";e(110);var r=e(9),i=e(12),o=e(7),a=e(30),u=e(0),c=e(61),f=u("species"),s=!o((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),l=function(){var t=/(?:)/,n=t.exec;t.exec=function(){return n.apply(this,arguments)};var e="ab".split(t);return 2===e.length&&"a"===e[0]&&"b"===e[1]}();t.exports=function(t,n,e){var h=u(t),d=!o((function(){var n={};return n[h]=function(){return 7},7!=""[t](n)})),p=d?!o((function(){var n=!1,e=/a/;return e.exec=function(){return n=!0,null},"split"===t&&(e.constructor={},e.constructor[f]=function(){return e}),e[h](""),!n})):void 0;if(!d||!p||"replace"===t&&!s||"split"===t&&!l){var v=/./[h],g=e(a,h,""[t],(function(t,n,e,r,i){return n.exec===c?d&&!i?{done:!0,value:v.call(n,e,r)}:{done:!0,value:t.call(e,n,r)}:{done:!1}})),y=g[0],m=g[1];r(String.prototype,t,y),i(RegExp.prototype,h,2==n?function(t,n){return m.call(t,this,n)}:function(t){return m.call(t,this)})}}},function(t,n,e){var r=e(13),i=e(22);e(114)("keys",(function(){return function(t){return i(r(t))}}))},function(t,n,e){"use strict";var r=e(78)(!0);e(56)(String,"String",(function(t){this._t=String(t),this._i=0}),(function(){var t,n=this._t,e=this._i;return e>=n.length?{value:void 0,done:!0}:(t=r(n,e),this._i+=t.length,{value:t,done:!1})}))},function(t,n,e){"use strict";var r=e(11),i=e(1),o=e(13),a=e(65),u=e(66),c=e(16),f=e(117),s=e(67);i(i.S+i.F*!e(49)((function(t){Array.from(t)})),"Array",{from:function(t){var n,e,i,l,h=o(t),d="function"==typeof this?this:Array,p=arguments.length,v=p>1?arguments[1]:void 0,g=void 0!==v,y=0,m=s(h);if(g&&(v=r(v,p>2?arguments[2]:void 0,2)),null==m||d==Array&&u(m))for(e=new d(n=c(h.length));n>y;y++)f(e,y,g?v(h[y],y):h[y]);else for(l=m.call(h),e=new d;!(i=l.next()).done;y++)f(e,y,g?a(l,v,[i.value,y],!0):i.value);return e.length=y,e}})},function(t,n,e){var r=e(2),i=e(14),o=e(25),a=e(85),u=e(4).f;t.exports=function(t){var n=i.Symbol||(i.Symbol=o?{}:r.Symbol||{});"_"==t.charAt(0)||t in n||u(n,t,{value:a.f(t)})}},function(t,n,e){n.f=e(0)},function(t,n,e){"use strict";var r=e(2),i=e(15),o=e(3),a=e(1),u=e(9),c=e(62).KEY,f=e(7),s=e(34),l=e(29),h=e(26),d=e(0),p=e(85),v=e(84),g=e(119),y=e(54),m=e(5),b=e(6),_=e(13),w=e(17),x=e(44),M=e(27),S=e(57),A=e(120),E=e(88),T=e(87),C=e(4),k=e(22),O=E.f,N=C.f,j=A.f,P=r.Symbol,D=r.JSON,L=D&&D.stringify,F=d("_hidden"),U=d("toPrimitive"),I={}.propertyIsEnumerable,R=s("symbol-registry"),H=s("symbols"),Y=s("op-symbols"),z=Object.prototype,q="function"==typeof P&&!!T.f,$=r.QObject,V=!$||!$.prototype||!$.prototype.findChild,B=o&&f((function(){return 7!=S(N({},"a",{get:function(){return N(this,"a",{value:7}).a}})).a}))?function(t,n,e){var r=O(z,n);r&&delete z[n],N(t,n,e),r&&t!==z&&N(z,n,r)}:N,X=function(t){var n=H[t]=S(P.prototype);return n._k=t,n},W=q&&"symbol"==typeof P.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof P},G=function(t,n,e){return t===z&&G(Y,n,e),m(t),n=x(n,!0),m(e),i(H,n)?(e.enumerable?(i(t,F)&&t[F][n]&&(t[F][n]=!1),e=S(e,{enumerable:M(0,!1)})):(i(t,F)||N(t,F,M(1,{})),t[F][n]=!0),B(t,n,e)):N(t,n,e)},Z=function(t,n){m(t);for(var e,r=g(n=w(n)),i=0,o=r.length;o>i;)G(t,e=r[i++],n[e]);return t},J=function(t){var n=I.call(this,t=x(t,!0));return!(this===z&&i(H,t)&&!i(Y,t))&&(!(n||!i(this,t)||!i(H,t)||i(this,F)&&this[F][t])||n)},Q=function(t,n){if(t=w(t),n=x(n,!0),t!==z||!i(H,n)||i(Y,n)){var e=O(t,n);return!e||!i(H,n)||i(t,F)&&t[F][n]||(e.enumerable=!0),e}},K=function(t){for(var n,e=j(w(t)),r=[],o=0;e.length>o;)i(H,n=e[o++])||n==F||n==c||r.push(n);return r},tt=function(t){for(var n,e=t===z,r=j(e?Y:w(t)),o=[],a=0;r.length>a;)!i(H,n=r[a++])||e&&!i(z,n)||o.push(H[n]);return o};q||(u((P=function(){if(this instanceof P)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),n=function(e){this===z&&n.call(Y,e),i(this,F)&&i(this[F],t)&&(this[F][t]=!1),B(this,t,M(1,e))};return o&&V&&B(z,t,{configurable:!0,set:n}),X(t)}).prototype,"toString",(function(){return this._k})),E.f=Q,C.f=G,e(63).f=A.f=K,e(38).f=J,T.f=tt,o&&!e(25)&&u(z,"propertyIsEnumerable",J,!0),p.f=function(t){return X(d(t))}),a(a.G+a.W+a.F*!q,{Symbol:P});for(var nt="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),et=0;nt.length>et;)d(nt[et++]);for(var rt=k(d.store),it=0;rt.length>it;)v(rt[it++]);a(a.S+a.F*!q,"Symbol",{for:function(t){return i(R,t+="")?R[t]:R[t]=P(t)},keyFor:function(t){if(!W(t))throw TypeError(t+" is not a symbol!");for(var n in R)if(R[n]===t)return n},useSetter:function(){V=!0},useSimple:function(){V=!1}}),a(a.S+a.F*!q,"Object",{create:function(t,n){return void 0===n?S(t):Z(S(t),n)},defineProperty:G,defineProperties:Z,getOwnPropertyDescriptor:Q,getOwnPropertyNames:K,getOwnPropertySymbols:tt});var ot=f((function(){T.f(1)}));a(a.S+a.F*ot,"Object",{getOwnPropertySymbols:function(t){return T.f(_(t))}}),D&&a(a.S+a.F*(!q||f((function(){var t=P();return"[null]"!=L([t])||"{}"!=L({a:t})||"{}"!=L(Object(t))}))),"JSON",{stringify:function(t){for(var n,e,r=[t],i=1;arguments.length>i;)r.push(arguments[i++]);if(e=n=r[1],(b(n)||void 0!==t)&&!W(t))return y(n)||(n=function(t,n){if("function"==typeof e&&(n=e.call(this,t,n)),!W(n))return n}),r[1]=n,L.apply(D,r)}}),P.prototype[U]||e(12)(P.prototype,U,P.prototype.valueOf),l(P,"Symbol"),l(Math,"Math",!0),l(r.JSON,"JSON",!0)},function(t,n){n.f=Object.getOwnPropertySymbols},function(t,n,e){var r=e(38),i=e(27),o=e(17),a=e(44),u=e(15),c=e(64),f=Object.getOwnPropertyDescriptor;n.f=e(3)?f:function(t,n){if(t=o(t),n=a(n,!0),c)try{return f(t,n)}catch(t){}if(u(t,n))return i(!r.f.call(t,n),t[n])}},function(t,n,e){"use strict";e(122);var r=e(5),i=e(37),o=e(3),a=/./.toString,u=function(t){e(9)(RegExp.prototype,"toString",t,!0)};e(7)((function(){return"/a/b"!=a.call({source:"a",flags:"b"})}))?u((function(){var t=r(this);return"/".concat(t.source,"/","flags"in t?t.flags:!o&&t instanceof RegExp?i.call(t):void 0)})):"toString"!=a.name&&u((function(){return a.call(this)}))},function(t,n,e){var r=Date.prototype,i=r.toString,o=r.getTime;new Date(NaN)+""!="Invalid Date"&&e(9)(r,"toString",(function(){var t=o.call(this);return t==t?i.call(this):"Invalid Date"}))},function(t,n,e){"use strict";var r=e(1),i=e(58)(!1),o=[].indexOf,a=!!o&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(a||!e(20)(o)),"Array",{indexOf:function(t){return a?o.apply(this,arguments)||0:i(this,t,arguments[1])}})},function(t,n,e){var r=e(6);t.exports=function(t,n){if(!r(t)||t._t!==n)throw TypeError("Incompatible receiver, "+n+" required!");return t}},function(t,n,e){var r=e(6),i=e(126).set;t.exports=function(t,n,e){var o,a=n.constructor;return a!==e&&"function"==typeof a&&(o=a.prototype)!==e.prototype&&r(o)&&i&&i(t,o),t}},function(t,n,e){var r=e(6),i=e(19),o=e(0)("match");t.exports=function(t){var n;return r(t)&&(void 0!==(n=t[o])?!!n:"RegExp"==i(t))}},,,function(t,n,e){t.exports=e(34)("native-function-to-string",Function.toString)},function(t,n){t.exports=function(t,n,e){var r=void 0===e;switch(n.length){case 0:return r?t():t.call(e);case 1:return r?t(n[0]):t.call(e,n[0]);case 2:return r?t(n[0],n[1]):t.call(e,n[0],n[1]);case 3:return r?t(n[0],n[1],n[2]):t.call(e,n[0],n[1],n[2]);case 4:return r?t(n[0],n[1],n[2],n[3]):t.call(e,n[0],n[1],n[2],n[3])}return t.apply(e,n)}},function(t,n,e){var r=e(2),i=e(69).set,o=r.MutationObserver||r.WebKitMutationObserver,a=r.process,u=r.Promise,c="process"==e(19)(a);t.exports=function(){var t,n,e,f=function(){var r,i;for(c&&(r=a.domain)&&r.exit();t;){i=t.fn,t=t.next;try{i()}catch(r){throw t?e():n=void 0,r}}n=void 0,r&&r.enter()};if(c)e=function(){a.nextTick(f)};else if(!o||r.navigator&&r.navigator.standalone)if(u&&u.resolve){var s=u.resolve(void 0);e=function(){s.then(f)}}else e=function(){i.call(r,f)};else{var l=!0,h=document.createTextNode("");new o(f).observe(h,{characterData:!0}),e=function(){h.data=l=!l}}return function(r){var i={fn:r,next:void 0};n&&(n.next=i),t||(t=i,e()),n=i}}},function(t,n){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,n,e){var r=e(2).navigator;t.exports=r&&r.userAgent||""},function(t,n,e){var r=e(5),i=e(6),o=e(71);t.exports=function(t,n){if(r(t),i(n)&&n.constructor===t)return n;var e=o.f(t);return(0,e.resolve)(n),e.promise}},function(t,n,e){var r=e(104);t.exports=function(t,n){return new(r(t))(n)}},function(t,n,e){var r=e(6),i=e(54),o=e(0)("species");t.exports=function(t){var n;return i(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!i(n.prototype)||(n=void 0),r(n)&&null===(n=n[o])&&(n=void 0)),void 0===n?Array:n}},function(t,n,e){var r=e(18),i=e(13),o=e(53),a=e(16);t.exports=function(t,n,e,u,c){r(n);var f=i(t),s=o(f),l=a(f.length),h=c?l-1:0,d=c?-1:1;if(e<2)for(;;){if(h in s){u=s[h],h+=d;break}if(h+=d,c?h<0:l<=h)throw TypeError("Reduce of empty array with no initial value")}for(;c?h>=0:l>h;h+=d)h in s&&(u=n(u,s[h],h,f));return u}},function(t,n,e){"use strict";var r=e(57),i=e(27),o=e(29),a={};e(12)(a,e(0)("iterator"),(function(){return this})),t.exports=function(t,n,e){t.prototype=r(a,{next:i(1,e)}),o(t,n+" Iterator")}},function(t,n,e){var r=e(4),i=e(5),o=e(22);t.exports=e(3)?Object.defineProperties:function(t,n){i(t);for(var e,a=o(n),u=a.length,c=0;u>c;)r.f(t,e=a[c++],n[e]);return t}},function(t,n,e){var r=e(35),i=Math.max,o=Math.min;t.exports=function(t,n){return(t=r(t))<0?i(t+n,0):o(t,n)}},function(t,n,e){var r=e(15),i=e(13),o=e(59)("IE_PROTO"),a=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),r(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},function(t,n,e){"use strict";var r=e(61);e(1)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(t,n,e){"use strict";e(112)("trim",(function(t){return function(){return t(this,3)}}))},function(t,n,e){var r=e(1),i=e(30),o=e(7),a=e(113),u="["+a+"]",c=RegExp("^"+u+u+"*"),f=RegExp(u+u+"*$"),s=function(t,n,e){var i={},u=o((function(){return!!a[t]()||"​"!="​"[t]()})),c=i[t]=u?n(l):a[t];e&&(i[e]=c),r(r.P+r.F*u,"String",i)},l=s.trim=function(t,n){return t=String(i(t)),1&n&&(t=t.replace(c,"")),2&n&&(t=t.replace(f,"")),t};t.exports=s},function(t,n){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,n,e){var r=e(1),i=e(14),o=e(7);t.exports=function(t,n){var e=(i.Object||{})[t]||Object[t],a={};a[t]=n(e),r(r.S+r.F*o((function(){e(1)})),"Object",a)}},function(t,n,e){var r=e(1);r(r.S+r.F*!e(3),"Object",{defineProperty:e(4).f})},function(t,n,e){var r=e(4).f,i=Function.prototype,o=/^\s*function ([^ (]*)/;"name"in i||e(3)&&r(i,"name",{configurable:!0,get:function(){try{return(""+this).match(o)[1]}catch(t){return""}}})},function(t,n,e){"use strict";var r=e(4),i=e(27);t.exports=function(t,n,e){n in t?r.f(t,n,i(0,e)):t[n]=e}},function(t,n,e){e(84)("asyncIterator")},function(t,n,e){var r=e(22),i=e(87),o=e(38);t.exports=function(t){var n=r(t),e=i.f;if(e)for(var a,u=e(t),c=o.f,f=0;u.length>f;)c.call(t,a=u[f++])&&n.push(a);return n}},function(t,n,e){var r=e(17),i=e(63).f,o={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return a.slice()}}(t):i(r(t))}},function(t,n,e){var r=e(1);r(r.S,"Array",{isArray:e(54)})},function(t,n,e){e(3)&&"g"!=/./g.flags&&e(4).f(RegExp.prototype,"flags",{configurable:!0,get:e(37)})},function(t,n,e){"use strict";var r=e(124),i=e(92);t.exports=e(125)("Set",(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(t){return r.def(i(this,"Set"),t=0===t?0:t,t)}},r)},function(t,n,e){"use strict";var r=e(4).f,i=e(57),o=e(47),a=e(11),u=e(45),c=e(46),f=e(56),s=e(74),l=e(48),h=e(3),d=e(62).fastKey,p=e(92),v=h?"_s":"size",g=function(t,n){var e,r=d(n);if("F"!==r)return t._i[r];for(e=t._f;e;e=e.n)if(e.k==n)return e};t.exports={getConstructor:function(t,n,e,f){var s=t((function(t,r){u(t,s,n,"_i"),t._t=n,t._i=i(null),t._f=void 0,t._l=void 0,t[v]=0,null!=r&&c(r,e,t[f],t)}));return o(s.prototype,{clear:function(){for(var t=p(this,n),e=t._i,r=t._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete e[r.i];t._f=t._l=void 0,t[v]=0},delete:function(t){var e=p(this,n),r=g(e,t);if(r){var i=r.n,o=r.p;delete e._i[r.i],r.r=!0,o&&(o.n=i),i&&(i.p=o),e._f==r&&(e._f=i),e._l==r&&(e._l=o),e[v]--}return!!r},forEach:function(t){p(this,n);for(var e,r=a(t,arguments.length>1?arguments[1]:void 0,3);e=e?e.n:this._f;)for(r(e.v,e.k,this);e&&e.r;)e=e.p},has:function(t){return!!g(p(this,n),t)}}),h&&r(s.prototype,"size",{get:function(){return p(this,n)[v]}}),s},def:function(t,n,e){var r,i,o=g(t,n);return o?o.v=e:(t._l=o={i:i=d(n,!0),k:n,v:e,p:r=t._l,n:void 0,r:!1},t._f||(t._f=o),r&&(r.n=o),t[v]++,"F"!==i&&(t._i[i]=o)),t},getEntry:g,setStrong:function(t,n,e){f(t,n,(function(t,e){this._t=p(t,n),this._k=e,this._l=void 0}),(function(){for(var t=this._k,n=this._l;n&&n.r;)n=n.p;return this._t&&(this._l=n=n?n.n:this._t._f)?s(0,"keys"==t?n.k:"values"==t?n.v:[n.k,n.v]):(this._t=void 0,s(1))}),e?"entries":"values",!e,!0),l(n)}}},function(t,n,e){"use strict";var r=e(2),i=e(1),o=e(9),a=e(47),u=e(62),c=e(46),f=e(45),s=e(6),l=e(7),h=e(49),d=e(29),p=e(93);t.exports=function(t,n,e,v,g,y){var m=r[t],b=m,_=g?"set":"add",w=b&&b.prototype,x={},M=function(t){var n=w[t];o(w,t,"delete"==t||"has"==t?function(t){return!(y&&!s(t))&&n.call(this,0===t?0:t)}:"get"==t?function(t){return y&&!s(t)?void 0:n.call(this,0===t?0:t)}:"add"==t?function(t){return n.call(this,0===t?0:t),this}:function(t,e){return n.call(this,0===t?0:t,e),this})};if("function"==typeof b&&(y||w.forEach&&!l((function(){(new b).entries().next()})))){var S=new b,A=S[_](y?{}:-0,1)!=S,E=l((function(){S.has(1)})),T=h((function(t){new b(t)})),C=!y&&l((function(){for(var t=new b,n=5;n--;)t[_](n,n);return!t.has(-0)}));T||((b=n((function(n,e){f(n,b,t);var r=p(new m,n,b);return null!=e&&c(e,g,r[_],r),r}))).prototype=w,w.constructor=b),(E||C)&&(M("delete"),M("has"),g&&M("get")),(C||A)&&M(_),y&&w.clear&&delete w.clear}else b=v.getConstructor(n,t,g,_),a(b.prototype,e),u.NEED=!0;return d(b,t),x[t]=b,i(i.G+i.W+i.F*(b!=m),x),y||v.setStrong(b,t,g),b}},function(t,n,e){var r=e(6),i=e(5),o=function(t,n){if(i(t),!r(n)&&null!==n)throw TypeError(n+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,n,r){try{(r=e(11)(Function.call,e(88).f(Object.prototype,"__proto__").set,2))(t,[]),n=!(t instanceof Array)}catch(t){n=!0}return function(t,e){return o(t,e),n?t.__proto__=e:r(t,e),t}}({},!1):void 0),check:o}},function(t,n,e){"use strict";var r=e(1),i=e(58)(!0);r(r.P,"Array",{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),e(73)("includes")},function(t,n,e){var r=e(1),i=e(129)(!1);r(r.S,"Object",{values:function(t){return i(t)}})},function(t,n,e){var r=e(3),i=e(22),o=e(17),a=e(38).f;t.exports=function(t){return function(n){for(var e,u=o(n),c=i(u),f=c.length,s=0,l=[];f>s;)e=c[s++],r&&!a.call(u,e)||l.push(t?[e,u[e]]:u[e]);return l}}},function(t,n,e){var r=e(2),i=e(93),o=e(4).f,a=e(63).f,u=e(94),c=e(37),f=r.RegExp,s=f,l=f.prototype,h=/a/g,d=/a/g,p=new f(h)!==h;if(e(3)&&(!p||e(7)((function(){return d[e(0)("match")]=!1,f(h)!=h||f(d)==d||"/a/i"!=f(h,"i")})))){f=function(t,n){var e=this instanceof f,r=u(t),o=void 0===n;return!e&&r&&t.constructor===f&&o?t:i(p?new s(r&&!o?t.source:t,n):s((r=t instanceof f)?t.source:t,r&&o?c.call(t):n),e?this:l,f)};for(var v=function(t){t in f||o(f,t,{configurable:!0,get:function(){return s[t]},set:function(n){s[t]=n}})},g=a(s),y=0;g.length>y;)v(g[y++]);l.constructor=f,f.prototype=l,e(9)(r,"RegExp",f)}e(48)("RegExp")},function(t,n,e){"use strict";var r=e(94),i=e(5),o=e(68),a=e(77),u=e(16),c=e(79),f=e(61),s=e(7),l=Math.min,h=[].push,d="length",p=!s((function(){RegExp(4294967295,"y")}));e(80)("split",2,(function(t,n,e,s){var v;return v="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1)[d]||2!="ab".split(/(?:ab)*/)[d]||4!=".".split(/(.?)(.?)/)[d]||".".split(/()()/)[d]>1||"".split(/.?/)[d]?function(t,n){var i=String(this);if(void 0===t&&0===n)return[];if(!r(t))return e.call(i,t,n);for(var o,a,u,c=[],s=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),l=0,p=void 0===n?4294967295:n>>>0,v=new RegExp(t.source,s+"g");(o=f.call(v,i))&&!((a=v.lastIndex)>l&&(c.push(i.slice(l,o.index)),o[d]>1&&o.index<i[d]&&h.apply(c,o.slice(1)),u=o[0][d],l=a,c[d]>=p));)v.lastIndex===o.index&&v.lastIndex++;return l===i[d]?!u&&v.test("")||c.push(""):c.push(i.slice(l)),c[d]>p?c.slice(0,p):c}:"0".split(void 0,0)[d]?function(t,n){return void 0===t&&0===n?[]:e.call(this,t,n)}:e,[function(e,r){var i=t(this),o=null==e?void 0:e[n];return void 0!==o?o.call(e,i,r):v.call(String(i),e,r)},function(t,n){var r=s(v,t,this,n,v!==e);if(r.done)return r.value;var f=i(t),h=String(this),d=o(f,RegExp),g=f.unicode,y=(f.ignoreCase?"i":"")+(f.multiline?"m":"")+(f.unicode?"u":"")+(p?"y":"g"),m=new d(p?f:"^(?:"+f.source+")",y),b=void 0===n?4294967295:n>>>0;if(0===b)return[];if(0===h.length)return null===c(m,h)?[h]:[];for(var _=0,w=0,x=[];w<h.length;){m.lastIndex=p?w:0;var M,S=c(m,p?h:h.slice(w));if(null===S||(M=l(u(m.lastIndex+(p?0:w)),h.length))===_)w=a(h,w,g);else{if(x.push(h.slice(_,w)),x.length===b)return x;for(var A=1;A<=S.length-1;A++)if(x.push(S[A]),x.length===b)return x;w=_=M}}return x.push(h.slice(_)),x}]}))},function(t,n,e){},function(t,n,e){"use strict";e.r(n);e(41),e(42),e(50),e(51),e(36),e(55),e(72),e(31),e(21),e(23),e(76),e(111);var r={calculate:function(){return getComputedStyle(document.body).getPropertyValue("--breakpoint").replace(/\"/g,"").trim()},isMobile:function(){var t=this.calculate();return"xsmall"==t||"small"==t}},i=(e(81),{idp_total:{title:"Total IDPs per Governate",groupSize:15e4}}),o=Object.keys(i),a=(o.map((function(t){return{label:i[t].title,value:t}})),e(115),e(116),e(82),e(83),e(118),e(86),e(121),e(89),e(90),e(91),Array.prototype.slice),u=function(t){return t};function c(t){return"translate("+(t+.5)+",0)"}function f(t){return"translate(0,"+(t+.5)+")"}function s(t){return function(n){return+t(n)}}function l(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}function h(){return!this.__axis}function d(t,n){var e=[],r=null,i=null,o=6,d=6,p=3,v=1===t||4===t?-1:1,g=4===t||2===t?"x":"y",y=1===t||3===t?c:f;function m(a){var c=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,f=null==i?n.tickFormat?n.tickFormat.apply(n,e):u:i,m=Math.max(o,0)+p,b=n.range(),_=+b[0]+.5,w=+b[b.length-1]+.5,x=(n.bandwidth?l:s)(n.copy()),M=a.selection?a.selection():a,S=M.selectAll(".domain").data([null]),A=M.selectAll(".tick").data(c,n).order(),E=A.exit(),T=A.enter().append("g").attr("class","tick"),C=A.select("line"),k=A.select("text");S=S.merge(S.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),A=A.merge(T),C=C.merge(T.append("line").attr("stroke","currentColor").attr(g+"2",v*o)),k=k.merge(T.append("text").attr("fill","currentColor").attr(g,v*m).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),a!==M&&(S=S.transition(a),A=A.transition(a),C=C.transition(a),k=k.transition(a),E=E.transition(a).attr("opacity",1e-6).attr("transform",(function(t){return isFinite(t=x(t))?y(t):this.getAttribute("transform")})),T.attr("opacity",1e-6).attr("transform",(function(t){var n=this.parentNode.__axis;return y(n&&isFinite(n=n(t))?n:x(t))}))),E.remove(),S.attr("d",4===t||2==t?d?"M"+v*d+","+_+"H0.5V"+w+"H"+v*d:"M0.5,"+_+"V"+w:d?"M"+_+","+v*d+"V0.5H"+w+"V"+v*d:"M"+_+",0.5H"+w),A.attr("opacity",1).attr("transform",(function(t){return y(x(t))})),C.attr(g+"2",v*o),k.attr(g,v*m).text(f),M.filter(h).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),M.each((function(){this.__axis=x}))}return m.scale=function(t){return arguments.length?(n=t,m):n},m.ticks=function(){return e=a.call(arguments),m},m.tickArguments=function(t){return arguments.length?(e=null==t?[]:a.call(t),m):e.slice()},m.tickValues=function(t){return arguments.length?(r=null==t?null:a.call(t),m):r&&r.slice()},m.tickFormat=function(t){return arguments.length?(i=t,m):i},m.tickSize=function(t){return arguments.length?(o=d=+t,m):o},m.tickSizeInner=function(t){return arguments.length?(o=+t,m):o},m.tickSizeOuter=function(t){return arguments.length?(d=+t,m):d},m.tickPadding=function(t){return arguments.length?(p=+t,m):p},m}var p=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]},v=function(t){return(t=p(Math.abs(t)))?t[1]:NaN},g=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function y(t){if(!(n=g.exec(t)))throw new Error("invalid format: "+t);var n;return new m({fill:n[1],align:n[2],sign:n[3],symbol:n[4],zero:n[5],width:n[6],comma:n[7],precision:n[8]&&n[8].slice(1),trim:n[9],type:n[10]})}function m(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}y.prototype=m.prototype,m.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var b,_,w,x,M=function(t,n){var e=p(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},S={"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return M(100*t,n)},r:M,s:function(t,n){var e=p(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(b=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+p(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},A=function(t){return t},E=Array.prototype.map,T=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];_=function(t){var n,e,r=void 0===t.grouping||void 0===t.thousands?A:(n=E.call(t.grouping,Number),e=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,u=n[0],c=0;i>0&&u>0&&(c+u+1>r&&(u=Math.max(1,r-c)),o.push(t.substring(i-=u,i+u)),!((c+=u+1)>r));)u=n[a=(a+1)%n.length];return o.reverse().join(e)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",u=void 0===t.numerals?A:function(t){return function(n){return n.replace(/[0-9]/g,(function(n){return t[+n]}))}}(E.call(t.numerals,String)),c=void 0===t.percent?"%":t.percent+"",f=void 0===t.minus?"-":t.minus+"",s=void 0===t.nan?"NaN":t.nan+"";function l(t){var n=(t=y(t)).fill,e=t.align,l=t.sign,h=t.symbol,d=t.zero,p=t.width,v=t.comma,g=t.precision,m=t.trim,_=t.type;"n"===_?(v=!0,_="g"):S[_]||(void 0===g&&(g=12),m=!0,_="g"),(d||"0"===n&&"="===e)&&(d=!0,n="0",e="=");var w="$"===h?i:"#"===h&&/[boxX]/.test(_)?"0"+_.toLowerCase():"",x="$"===h?o:/[%p]/.test(_)?c:"",M=S[_],A=/[defgprs%]/.test(_);function E(t){var i,o,c,h=w,y=x;if("c"===_)y=M(t)+y,t="";else{var S=(t=+t)<0||1/t<0;if(t=isNaN(t)?s:M(Math.abs(t),g),m&&(t=function(t){t:for(var n,e=t.length,r=1,i=-1;r<e;++r)switch(t[r]){case".":i=n=r;break;case"0":0===i&&(i=r),n=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(n+1):t}(t)),S&&0==+t&&"+"!==l&&(S=!1),h=(S?"("===l?l:f:"-"===l||"("===l?"":l)+h,y=("s"===_?T[8+b/3]:"")+y+(S&&"("===l?")":""),A)for(i=-1,o=t.length;++i<o;)if(48>(c=t.charCodeAt(i))||c>57){y=(46===c?a+t.slice(i+1):t.slice(i))+y,t=t.slice(0,i);break}}v&&!d&&(t=r(t,1/0));var E=h.length+t.length+y.length,C=E<p?new Array(p-E+1).join(n):"";switch(v&&d&&(t=r(C+t,C.length?p-y.length:1/0),C=""),e){case"<":t=h+t+y+C;break;case"=":t=h+C+t+y;break;case"^":t=C.slice(0,E=C.length>>1)+h+t+y+C.slice(E);break;default:t=C+h+t+y}return u(t)}return g=void 0===g?6:/[gprs]/.test(_)?Math.max(1,Math.min(21,g)):Math.max(0,Math.min(20,g)),E.toString=function(){return t+""},E}return{format:l,formatPrefix:function(t,n){var e=l(((t=y(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(v(n)/3))),i=Math.pow(10,-r),o=T[8+r/3];return function(t){return e(i*t)+o}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),w=_.format,x=_.formatPrefix;var C=Math.PI,k=2*C,O=k-1e-6;function N(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function j(){return new N}N.prototype=j.prototype={constructor:N,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,a=this._y1,u=e-t,c=r-n,f=o-t,s=a-n,l=f*f+s*s;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(l>1e-6)if(Math.abs(s*u-c*f)>1e-6&&i){var h=e-o,d=r-a,p=u*u+c*c,v=h*h+d*d,g=Math.sqrt(p),y=Math.sqrt(l),m=i*Math.tan((C-Math.acos((p+l-v)/(2*g*y)))/2),b=m/y,_=m/g;Math.abs(b-1)>1e-6&&(this._+="L"+(t+b*f)+","+(n+b*s)),this._+="A"+i+","+i+",0,0,"+ +(s*h>f*d)+","+(this._x1=t+_*u)+","+(this._y1=n+_*c)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,o){t=+t,n=+n,o=!!o;var a=(e=+e)*Math.cos(r),u=e*Math.sin(r),c=t+a,f=n+u,s=1^o,l=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+c+","+f:(Math.abs(this._x1-c)>1e-6||Math.abs(this._y1-f)>1e-6)&&(this._+="L"+c+","+f),e&&(l<0&&(l=l%k+k),l>O?this._+="A"+e+","+e+",0,1,"+s+","+(t-a)+","+(n-u)+"A"+e+","+e+",0,1,"+s+","+(this._x1=c)+","+(this._y1=f):l>1e-6&&(this._+="A"+e+","+e+",0,"+ +(l>=C)+","+s+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};var P=j,D=function(t){return function(){return t}};function L(t){this._context=t}L.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var F=function(t){return new L(t)};function U(t){return t[0]}function I(t){return t[1]}var R=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},H=function(t){var n;return 1===t.length&&(n=t,t=function(t,e){return R(n(t),e)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)<0?r=o+1:i=o}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)>0?i=o:r=o+1}return r}}};var Y=H(R),z=Y.right,q=(Y.left,z);var $=Array.prototype,V=($.slice,$.map,Math.sqrt(50)),B=Math.sqrt(10),X=Math.sqrt(2),W=function(t,n,e){var r,i,o,a,u=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(a=G(t,n,e))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),n=Math.floor(n/a),o=new Array(i=Math.ceil(n-t+1));++u<i;)o[u]=(t+u)*a;else for(t=Math.floor(t*a),n=Math.ceil(n*a),o=new Array(i=Math.ceil(t-n+1));++u<i;)o[u]=(t-u)/a;return r&&o.reverse(),o};function G(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=V?10:o>=B?5:o>=X?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=V?10:o>=B?5:o>=X?2:1)}function Z(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=V?i*=10:o>=B?i*=5:o>=X&&(i*=2),n<t?-i:i}function J(t,n){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(n).domain(t)}return this}function Q(){}function K(t,n){var e=new Q;if(t instanceof Q)t.each((function(t,n){e.set(n,t)}));else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var a in t)e.set(a,t[a]);return e}Q.prototype=K.prototype={constructor:Q,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var tt=K;function nt(){}var et=tt.prototype;function rt(t,n){var e=new nt;if(t instanceof nt)t.each((function(t){e.add(t)}));else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}nt.prototype=rt.prototype={constructor:nt,has:et.has,add:function(t){return this["$"+(t+="")]=t,this},remove:et.remove,clear:et.clear,values:et.keys,size:et.size,empty:et.empty,each:et.each};var it=Array.prototype,ot=it.map,at=it.slice;var ut=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function ct(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function ft(){}var st="\\s*([+-]?\\d+)\\s*",lt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",ht="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",dt=/^#([0-9a-f]{3,8})$/,pt=new RegExp("^rgb\\("+[st,st,st]+"\\)$"),vt=new RegExp("^rgb\\("+[ht,ht,ht]+"\\)$"),gt=new RegExp("^rgba\\("+[st,st,st,lt]+"\\)$"),yt=new RegExp("^rgba\\("+[ht,ht,ht,lt]+"\\)$"),mt=new RegExp("^hsl\\("+[lt,ht,ht]+"\\)$"),bt=new RegExp("^hsla\\("+[lt,ht,ht,lt]+"\\)$"),_t={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function wt(){return this.rgb().formatHex()}function xt(){return this.rgb().formatRgb()}function Mt(t){var n,e;return t=(t+"").trim().toLowerCase(),(n=dt.exec(t))?(e=n[1].length,n=parseInt(n[1],16),6===e?St(n):3===e?new Ct(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):8===e?At(n>>24&255,n>>16&255,n>>8&255,(255&n)/255):4===e?At(n>>12&15|n>>8&240,n>>8&15|n>>4&240,n>>4&15|240&n,((15&n)<<4|15&n)/255):null):(n=pt.exec(t))?new Ct(n[1],n[2],n[3],1):(n=vt.exec(t))?new Ct(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=gt.exec(t))?At(n[1],n[2],n[3],n[4]):(n=yt.exec(t))?At(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=mt.exec(t))?jt(n[1],n[2]/100,n[3]/100,1):(n=bt.exec(t))?jt(n[1],n[2]/100,n[3]/100,n[4]):_t.hasOwnProperty(t)?St(_t[t]):"transparent"===t?new Ct(NaN,NaN,NaN,0):null}function St(t){return new Ct(t>>16&255,t>>8&255,255&t,1)}function At(t,n,e,r){return r<=0&&(t=n=e=NaN),new Ct(t,n,e,r)}function Et(t){return t instanceof ft||(t=Mt(t)),t?new Ct((t=t.rgb()).r,t.g,t.b,t.opacity):new Ct}function Tt(t,n,e,r){return 1===arguments.length?Et(t):new Ct(t,n,e,null==r?1:r)}function Ct(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function kt(){return"#"+Nt(this.r)+Nt(this.g)+Nt(this.b)}function Ot(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Nt(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function jt(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new Dt(t,n,e,r)}function Pt(t){if(t instanceof Dt)return new Dt(t.h,t.s,t.l,t.opacity);if(t instanceof ft||(t=Mt(t)),!t)return new Dt;if(t instanceof Dt)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),a=NaN,u=o-i,c=(o+i)/2;return u?(a=n===o?(e-r)/u+6*(e<r):e===o?(r-n)/u+2:(n-e)/u+4,u/=c<.5?o+i:2-o-i,a*=60):u=c>0&&c<1?0:a,new Dt(a,u,c,t.opacity)}function Dt(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Lt(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function Ft(t,n,e,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*n+(4-6*o+3*a)*e+(1+3*t+3*o-3*a)*r+a*i)/6}ut(ft,Mt,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:wt,formatHex:wt,formatHsl:function(){return Pt(this).formatHsl()},formatRgb:xt,toString:xt}),ut(Ct,Tt,ct(ft,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Ct(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Ct(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:kt,formatHex:kt,formatRgb:Ot,toString:Ot})),ut(Dt,(function(t,n,e,r){return 1===arguments.length?Pt(t):new Dt(t,n,e,null==r?1:r)}),ct(ft,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Dt(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Dt(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new Ct(Lt(t>=240?t-240:t+120,i,r),Lt(t,i,r),Lt(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var Ut=function(t){return function(){return t}};function It(t,n){return function(e){return t+e*n}}function Rt(t){return 1==(t=+t)?Ht:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):Ut(isNaN(n)?e:n)}}function Ht(t,n){var e=n-t;return e?It(t,e):Ut(isNaN(t)?n:t)}var Yt=function t(n){var e=Rt(n);function r(t,n){var r=e((t=Tt(t)).r,(n=Tt(n)).r),i=e(t.g,n.g),o=e(t.b,n.b),a=Ht(t.opacity,n.opacity);return function(n){return t.r=r(n),t.g=i(n),t.b=o(n),t.opacity=a(n),t+""}}return r.gamma=t,r}(1);function zt(t){return function(n){var e,r,i=n.length,o=new Array(i),a=new Array(i),u=new Array(i);for(e=0;e<i;++e)r=Tt(n[e]),o[e]=r.r||0,a[e]=r.g||0,u[e]=r.b||0;return o=t(o),a=t(a),u=t(u),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=u(t),r+""}}}zt((function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,u=r<n-1?t[r+2]:2*o-i;return Ft((e-r/n)*n,a,i,o,u)}})),zt((function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),i=t[(r+n-1)%n],o=t[r%n],a=t[(r+1)%n],u=t[(r+2)%n];return Ft((e-r/n)*n,i,o,a,u)}}));var qt=function(t,n){n||(n=[]);var e,r=t?Math.min(n.length,t.length):0,i=n.slice();return function(o){for(e=0;e<r;++e)i[e]=t[e]*(1-o)+n[e]*o;return i}};function $t(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}function Vt(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(e=0;e<i;++e)o[e]=Qt(t[e],n[e]);for(;e<r;++e)a[e]=n[e];return function(t){for(e=0;e<i;++e)a[e]=o[e](t);return a}}var Bt=function(t,n){var e=new Date;return t=+t,n=+n,function(r){return e.setTime(t*(1-r)+n*r),e}},Xt=function(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}},Wt=function(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=Qt(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}},Gt=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Zt=new RegExp(Gt.source,"g");var Jt=function(t,n){var e,r,i,o=Gt.lastIndex=Zt.lastIndex=0,a=-1,u=[],c=[];for(t+="",n+="";(e=Gt.exec(t))&&(r=Zt.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(e=e[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,c.push({i:a,x:Xt(e,r)})),o=Zt.lastIndex;return o<n.length&&(i=n.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?c[0]?function(t){return function(n){return t(n)+""}}(c[0].x):function(t){return function(){return t}}(n):(n=c.length,function(t){for(var e,r=0;r<n;++r)u[(e=c[r]).i]=e.x(t);return u.join("")})},Qt=function(t,n){var e,r=typeof n;return null==n||"boolean"===r?Ut(n):("number"===r?Xt:"string"===r?(e=Mt(n))?(n=e,Yt):Jt:n instanceof Mt?Yt:n instanceof Date?Bt:$t(n)?qt:Array.isArray(n)?Vt:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?Wt:Xt)(t,n)},Kt=function(t,n){return t=+t,n=+n,function(e){return Math.round(t*(1-e)+n*e)}},tn=function(t){return+t},nn=[0,1];function en(t){return t}function rn(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:(e=isNaN(n)?NaN:.5,function(){return e});var e}function on(t){var n,e=t[0],r=t[t.length-1];return e>r&&(n=e,e=r,r=n),function(t){return Math.max(e,Math.min(r,t))}}function an(t,n,e){var r=t[0],i=t[1],o=n[0],a=n[1];return i<r?(r=rn(i,r),o=e(a,o)):(r=rn(r,i),o=e(o,a)),function(t){return o(r(t))}}function un(t,n,e){var r=Math.min(t.length,n.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++a<r;)i[a]=rn(t[a],t[a+1]),o[a]=e(n[a],n[a+1]);return function(n){var e=q(t,n,1,r)-1;return o[e](i[e](n))}}function cn(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function fn(){var t,n,e,r,i,o,a=nn,u=nn,c=Qt,f=en;function s(){return r=Math.min(a.length,u.length)>2?un:an,i=o=null,l}function l(n){return isNaN(n=+n)?e:(i||(i=r(a.map(t),u,c)))(t(f(n)))}return l.invert=function(e){return f(n((o||(o=r(u,a.map(t),Xt)))(e)))},l.domain=function(t){return arguments.length?(a=ot.call(t,tn),f===en||(f=on(a)),s()):a.slice()},l.range=function(t){return arguments.length?(u=at.call(t),s()):u.slice()},l.rangeRound=function(t){return u=at.call(t),c=Kt,s()},l.clamp=function(t){return arguments.length?(f=t?on(a):en,l):f!==en},l.interpolate=function(t){return arguments.length?(c=t,s()):c},l.unknown=function(t){return arguments.length?(e=t,l):e},function(e,r){return t=e,n=r,s()}}function sn(t,n){return fn()(t,n)}var ln=function(t,n,e,r){var i,o=Z(t,n,e);switch((r=y(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(n));return null!=r.precision||isNaN(i=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(v(n)/3)))-v(Math.abs(t)))}(o,a))||(r.precision=i),x(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,v(n)-v(t))+1}(o,Math.max(Math.abs(t),Math.abs(n))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-v(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return w(r)};function hn(t){var n=t.domain;return t.ticks=function(t){var e=n();return W(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){var r=n();return ln(r[0],r[r.length-1],null==t?10:t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),o=0,a=i.length-1,u=i[o],c=i[a];return c<u&&(r=u,u=c,c=r,r=o,o=a,a=r),(r=G(u,c,e))>0?r=G(u=Math.floor(u/r)*r,c=Math.ceil(c/r)*r,e):r<0&&(r=G(u=Math.ceil(u*r)/r,c=Math.floor(c*r)/r,e)),r>0?(i[o]=Math.floor(u/r)*r,i[a]=Math.ceil(c/r)*r,n(i)):r<0&&(i[o]=Math.ceil(u*r)/r,i[a]=Math.floor(c*r)/r,n(i)),t},t}function dn(){var t=sn(en,en);return t.copy=function(){return cn(t,dn())},J.apply(t,arguments),hn(t)}var pn=new Date,vn=new Date;function gn(t,n,e,r){function i(n){return t(n=0===arguments.length?new Date:new Date(+n)),n}return i.floor=function(n){return t(n=new Date(+n)),n},i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var a,u=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return u;do{u.push(a=new Date(+e)),n(e,o),t(e)}while(a<e&&e<r);return u},i.filter=function(e){return gn((function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););}))},e&&(i.count=function(n,r){return pn.setTime(+n),vn.setTime(+r),t(pn),t(vn),Math.floor(e(pn,vn))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var yn=gn((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,n){t.setFullYear(t.getFullYear()+n)}),(function(t,n){return n.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));yn.every=function(t){return isFinite(t=Math.floor(t))&&t>0?gn((function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)}),(function(n,e){n.setFullYear(n.getFullYear()+e*t)})):null};var mn=yn,bn=(yn.range,gn((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,n){t.setMonth(t.getMonth()+n)}),(function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()})));bn.range;function _n(t){return gn((function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+7*n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5}))}var wn=_n(0),xn=_n(1),Mn=_n(2),Sn=_n(3),An=_n(4),En=_n(5),Tn=_n(6),Cn=(wn.range,xn.range,Mn.range,Sn.range,An.range,En.range,Tn.range,gn((function(t){t.setHours(0,0,0,0)}),(function(t,n){t.setDate(t.getDate()+n)}),(function(t,n){return(n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/864e5}),(function(t){return t.getDate()-1}))),kn=Cn,On=(Cn.range,gn((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-6e4*t.getMinutes())}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getHours()}))),Nn=(On.range,gn((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getMinutes()}))),jn=(Nn.range,gn((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,n){t.setTime(+t+1e3*n)}),(function(t,n){return(n-t)/1e3}),(function(t){return t.getUTCSeconds()}))),Pn=(jn.range,gn((function(){}),(function(t,n){t.setTime(+t+n)}),(function(t,n){return n-t})));Pn.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?gn((function(n){n.setTime(Math.floor(n/t)*t)}),(function(n,e){n.setTime(+n+e*t)}),(function(n,e){return(e-n)/t})):Pn:null};Pn.range;function Dn(t){return gn((function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+7*n)}),(function(t,n){return(n-t)/6048e5}))}var Ln=Dn(0),Fn=Dn(1),Un=Dn(2),In=Dn(3),Rn=Dn(4),Hn=Dn(5),Yn=Dn(6),zn=(Ln.range,Fn.range,Un.range,In.range,Rn.range,Hn.range,Yn.range,gn((function(t){t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCDate(t.getUTCDate()+n)}),(function(t,n){return(n-t)/864e5}),(function(t){return t.getUTCDate()-1}))),qn=zn,$n=(zn.range,gn((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)}),(function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));$n.every=function(t){return isFinite(t=Math.floor(t))&&t>0?gn((function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)}),(function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)})):null};var Vn=$n;$n.range;function Bn(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Xn(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Wn(t,n,e){return{y:t,m:n,d:e,H:0,M:0,S:0,L:0}}var Gn,Zn={"-":"",_:" ",0:"0"},Jn=/^\s*\d+/,Qn=/^%/,Kn=/[\\^$*+?|[\]().{}]/g;function te(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function ne(t){return t.replace(Kn,"\\$&")}function ee(t){return new RegExp("^(?:"+t.map(ne).join("|")+")","i")}function re(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function ie(t,n,e){var r=Jn.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function oe(t,n,e){var r=Jn.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function ae(t,n,e){var r=Jn.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function ue(t,n,e){var r=Jn.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function ce(t,n,e){var r=Jn.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function fe(t,n,e){var r=Jn.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function se(t,n,e){var r=Jn.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function le(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function he(t,n,e){var r=Jn.exec(n.slice(e,e+1));return r?(t.q=3*r[0]-3,e+r[0].length):-1}function de(t,n,e){var r=Jn.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function pe(t,n,e){var r=Jn.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function ve(t,n,e){var r=Jn.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function ge(t,n,e){var r=Jn.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function ye(t,n,e){var r=Jn.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function me(t,n,e){var r=Jn.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function be(t,n,e){var r=Jn.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function _e(t,n,e){var r=Jn.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function we(t,n,e){var r=Qn.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function xe(t,n,e){var r=Jn.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function Me(t,n,e){var r=Jn.exec(n.slice(e));return r?(t.s=+r[0],e+r[0].length):-1}function Se(t,n){return te(t.getDate(),n,2)}function Ae(t,n){return te(t.getHours(),n,2)}function Ee(t,n){return te(t.getHours()%12||12,n,2)}function Te(t,n){return te(1+kn.count(mn(t),t),n,3)}function Ce(t,n){return te(t.getMilliseconds(),n,3)}function ke(t,n){return Ce(t,n)+"000"}function Oe(t,n){return te(t.getMonth()+1,n,2)}function Ne(t,n){return te(t.getMinutes(),n,2)}function je(t,n){return te(t.getSeconds(),n,2)}function Pe(t){var n=t.getDay();return 0===n?7:n}function De(t,n){return te(wn.count(mn(t)-1,t),n,2)}function Le(t,n){var e=t.getDay();return t=e>=4||0===e?An(t):An.ceil(t),te(An.count(mn(t),t)+(4===mn(t).getDay()),n,2)}function Fe(t){return t.getDay()}function Ue(t,n){return te(xn.count(mn(t)-1,t),n,2)}function Ie(t,n){return te(t.getFullYear()%100,n,2)}function Re(t,n){return te(t.getFullYear()%1e4,n,4)}function He(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+te(n/60|0,"0",2)+te(n%60,"0",2)}function Ye(t,n){return te(t.getUTCDate(),n,2)}function ze(t,n){return te(t.getUTCHours(),n,2)}function qe(t,n){return te(t.getUTCHours()%12||12,n,2)}function $e(t,n){return te(1+qn.count(Vn(t),t),n,3)}function Ve(t,n){return te(t.getUTCMilliseconds(),n,3)}function Be(t,n){return Ve(t,n)+"000"}function Xe(t,n){return te(t.getUTCMonth()+1,n,2)}function We(t,n){return te(t.getUTCMinutes(),n,2)}function Ge(t,n){return te(t.getUTCSeconds(),n,2)}function Ze(t){var n=t.getUTCDay();return 0===n?7:n}function Je(t,n){return te(Ln.count(Vn(t)-1,t),n,2)}function Qe(t,n){var e=t.getUTCDay();return t=e>=4||0===e?Rn(t):Rn.ceil(t),te(Rn.count(Vn(t),t)+(4===Vn(t).getUTCDay()),n,2)}function Ke(t){return t.getUTCDay()}function tr(t,n){return te(Fn.count(Vn(t)-1,t),n,2)}function nr(t,n){return te(t.getUTCFullYear()%100,n,2)}function er(t,n){return te(t.getUTCFullYear()%1e4,n,4)}function rr(){return"+0000"}function ir(){return"%"}function or(t){return+t}function ar(t){return Math.floor(+t/1e3)}!function(t){Gn=function(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,a=t.shortDays,u=t.months,c=t.shortMonths,f=ee(i),s=re(i),l=ee(o),h=re(o),d=ee(a),p=re(a),v=ee(u),g=re(u),y=ee(c),m=re(c),b={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return u[t.getMonth()]},c:null,d:Se,e:Se,f:ke,H:Ae,I:Ee,j:Te,L:Ce,m:Oe,M:Ne,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:or,s:ar,S:je,u:Pe,U:De,V:Le,w:Fe,W:Ue,x:null,X:null,y:Ie,Y:Re,Z:He,"%":ir},_={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return u[t.getUTCMonth()]},c:null,d:Ye,e:Ye,f:Be,H:ze,I:qe,j:$e,L:Ve,m:Xe,M:We,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:or,s:ar,S:Ge,u:Ze,U:Je,V:Qe,w:Ke,W:tr,x:null,X:null,y:nr,Y:er,Z:rr,"%":ir},w={a:function(t,n,e){var r=d.exec(n.slice(e));return r?(t.w=p[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=l.exec(n.slice(e));return r?(t.w=h[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=y.exec(n.slice(e));return r?(t.m=m[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=v.exec(n.slice(e));return r?(t.m=g[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return S(t,n,e,r)},d:pe,e:pe,f:_e,H:ge,I:ge,j:ve,L:be,m:de,M:ye,p:function(t,n,e){var r=f.exec(n.slice(e));return r?(t.p=s[r[0].toLowerCase()],e+r[0].length):-1},q:he,Q:xe,s:Me,S:me,u:oe,U:ae,V:ue,w:ie,W:ce,x:function(t,n,r){return S(t,e,n,r)},X:function(t,n,e){return S(t,r,n,e)},y:se,Y:fe,Z:le,"%":we};function x(t,n){return function(e){var r,i,o,a=[],u=-1,c=0,f=t.length;for(e instanceof Date||(e=new Date(+e));++u<f;)37===t.charCodeAt(u)&&(a.push(t.slice(c,u)),null!=(i=Zn[r=t.charAt(++u)])?r=t.charAt(++u):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),a.push(r),c=u+1);return a.push(t.slice(c,u)),a.join("")}}function M(t,n){return function(e){var r,i,o=Wn(1900,void 0,1);if(S(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(n&&!("Z"in o)&&(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=Xn(Wn(o.y,0,1))).getUTCDay(),r=i>4||0===i?Fn.ceil(r):Fn(r),r=qn.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=Bn(Wn(o.y,0,1))).getDay(),r=i>4||0===i?xn.ceil(r):xn(r),r=kn.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?Xn(Wn(o.y,0,1)).getUTCDay():Bn(Wn(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,Xn(o)):Bn(o)}}function S(t,n,e,r){for(var i,o,a=0,u=n.length,c=e.length;a<u;){if(r>=c)return-1;if(37===(i=n.charCodeAt(a++))){if(i=n.charAt(a++),!(o=w[i in Zn?n.charAt(a++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return b.x=x(e,b),b.X=x(r,b),b.c=x(n,b),_.x=x(e,_),_.X=x(r,_),_.c=x(n,_),{format:function(t){var n=x(t+="",b);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",!1);return n.toString=function(){return t},n},utcFormat:function(t){var n=x(t+="",_);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t+="",!0);return n.toString=function(){return t},n}}}(t),Gn.format,Gn.parse,Gn.utcFormat,Gn.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var ur=gn((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,n){t.setUTCMonth(t.getUTCMonth()+n)}),(function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),cr=(ur.range,gn((function(t){t.setUTCMinutes(0,0,0)}),(function(t,n){t.setTime(+t+36e5*n)}),(function(t,n){return(n-t)/36e5}),(function(t){return t.getUTCHours()}))),fr=(cr.range,gn((function(t){t.setUTCSeconds(0,0)}),(function(t,n){t.setTime(+t+6e4*n)}),(function(t,n){return(n-t)/6e4}),(function(t){return t.getUTCMinutes()})));fr.range;function sr(){}var lr=function(t){return null==t?sr:function(){return this.querySelector(t)}};function hr(){return[]}var dr=function(t){return null==t?hr:function(){return this.querySelectorAll(t)}},pr=function(t){return function(){return this.matches(t)}},vr=function(t){return new Array(t.length)};function gr(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}gr.prototype={constructor:gr,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};function yr(t,n,e,r,i,o){for(var a,u=0,c=n.length,f=o.length;u<f;++u)(a=n[u])?(a.__data__=o[u],r[u]=a):e[u]=new gr(t,o[u]);for(;u<c;++u)(a=n[u])&&(i[u]=a)}function mr(t,n,e,r,i,o,a){var u,c,f,s={},l=n.length,h=o.length,d=new Array(l);for(u=0;u<l;++u)(c=n[u])&&(d[u]=f="$"+a.call(c,c.__data__,u,n),f in s?i[u]=c:s[f]=c);for(u=0;u<h;++u)(c=s[f="$"+a.call(t,o[u],u,o)])?(r[u]=c,c.__data__=o[u],s[f]=null):e[u]=new gr(t,o[u]);for(u=0;u<l;++u)(c=n[u])&&s[d[u]]===c&&(i[u]=c)}function br(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}var _r="http://www.w3.org/1999/xhtml",wr={svg:"http://www.w3.org/2000/svg",xhtml:_r,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},xr=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),wr.hasOwnProperty(n)?{space:wr[n],local:t}:t};function Mr(t){return function(){this.removeAttribute(t)}}function Sr(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Ar(t,n){return function(){this.setAttribute(t,n)}}function Er(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function Tr(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function Cr(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}var kr=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function Or(t){return function(){this.style.removeProperty(t)}}function Nr(t,n,e){return function(){this.style.setProperty(t,n,e)}}function jr(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function Pr(t,n){return t.style.getPropertyValue(n)||kr(t).getComputedStyle(t,null).getPropertyValue(n)}function Dr(t){return function(){delete this[t]}}function Lr(t,n){return function(){this[t]=n}}function Fr(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function Ur(t){return t.trim().split(/^|\s+/)}function Ir(t){return t.classList||new Rr(t)}function Rr(t){this._node=t,this._names=Ur(t.getAttribute("class")||"")}function Hr(t,n){for(var e=Ir(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function Yr(t,n){for(var e=Ir(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function zr(t){return function(){Hr(this,t)}}function qr(t){return function(){Yr(this,t)}}function $r(t,n){return function(){(n.apply(this,arguments)?Hr:Yr)(this,t)}}Rr.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function Vr(){this.textContent=""}function Br(t){return function(){this.textContent=t}}function Xr(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function Wr(){this.innerHTML=""}function Gr(t){return function(){this.innerHTML=t}}function Zr(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function Jr(){this.nextSibling&&this.parentNode.appendChild(this)}function Qr(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Kr(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===_r&&n.documentElement.namespaceURI===_r?n.createElement(t):n.createElementNS(e,t)}}function ti(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var ni=function(t){var n=xr(t);return(n.local?ti:Kr)(n)};function ei(){return null}function ri(){var t=this.parentNode;t&&t.removeChild(this)}function ii(){var t=this.cloneNode(!1),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}function oi(){var t=this.cloneNode(!0),n=this.parentNode;return n?n.insertBefore(t,this.nextSibling):t}var ai={},ui=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(ai={mouseenter:"mouseover",mouseleave:"mouseout"}));function ci(t,n,e){return t=fi(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function fi(t,n,e){return function(r){var i=ui;ui=r;try{t.call(this,this.__data__,n,e)}finally{ui=i}}}function si(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function li(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function hi(t,n,e){var r=ai.hasOwnProperty(t.type)?ci:fi;return function(i,o,a){var u,c=this.__on,f=r(n,o,a);if(c)for(var s=0,l=c.length;s<l;++s)if((u=c[s]).type===t.type&&u.name===t.name)return this.removeEventListener(u.type,u.listener,u.capture),this.addEventListener(u.type,u.listener=f,u.capture=e),void(u.value=n);this.addEventListener(t.type,f,e),u={type:t.type,name:t.name,value:n,listener:f,capture:e},c?c.push(u):this.__on=[u]}}function di(t,n,e){var r=kr(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function pi(t,n){return function(){return di(this,t,n)}}function vi(t,n){return function(){return di(this,t,n.apply(this,arguments))}}var gi=[null];function yi(t,n){this._groups=t,this._parents=n}function mi(){return new yi([[document.documentElement]],gi)}yi.prototype=mi.prototype={constructor:yi,select:function(t){"function"!=typeof t&&(t=lr(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a,u=n[i],c=u.length,f=r[i]=new Array(c),s=0;s<c;++s)(o=u[s])&&(a=t.call(o,o.__data__,s,u))&&("__data__"in o&&(a.__data__=o.__data__),f[s]=a);return new yi(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=dr(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var a,u=n[o],c=u.length,f=0;f<c;++f)(a=u[f])&&(r.push(t.call(a,a.__data__,f,u)),i.push(a));return new yi(r,i)},filter:function(t){"function"!=typeof t&&(t=pr(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,c=r[i]=[],f=0;f<u;++f)(o=a[f])&&t.call(o,o.__data__,f,a)&&c.push(o);return new yi(r,this._parents)},data:function(t,n){if(!t)return p=new Array(this.size()),s=-1,this.each((function(t){p[++s]=t})),p;var e,r=n?mr:yr,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var a=o.length,u=new Array(a),c=new Array(a),f=new Array(a),s=0;s<a;++s){var l=i[s],h=o[s],d=h.length,p=t.call(l,l&&l.__data__,s,i),v=p.length,g=c[s]=new Array(v),y=u[s]=new Array(v);r(l,h,g,y,f[s]=new Array(d),p,n);for(var m,b,_=0,w=0;_<v;++_)if(m=g[_]){for(_>=w&&(w=_+1);!(b=y[w])&&++w<v;);m._next=b||null}}return(u=new yi(u,i))._enter=c,u._exit=f,u},enter:function(){return new yi(this._enter||this._groups.map(vr),this._parents)},exit:function(){return new yi(this._exit||this._groups.map(vr),this._parents)},join:function(t,n,e){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=n&&(i=n(i)),null==e?o.remove():e(o),r&&i?r.merge(i).order():i},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var c,f=n[u],s=e[u],l=f.length,h=a[u]=new Array(l),d=0;d<l;++d)(c=f[d]||s[d])&&(h[d]=c);for(;u<r;++u)a[u]=n[u];return new yi(a,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=br);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var a,u=e[o],c=u.length,f=i[o]=new Array(c),s=0;s<c;++s)(a=u[s])&&(f[s]=a);f.sort(n)}return new yi(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each((function(){t[++n]=this})),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],a=0,u=o.length;a<u;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,n){var e=xr(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?Sr:Mr:"function"==typeof n?e.local?Cr:Tr:e.local?Er:Ar)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?Or:"function"==typeof n?jr:Nr)(t,n,null==e?"":e)):Pr(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?Dr:"function"==typeof n?Fr:Lr)(t,n)):this.node()[t]},classed:function(t,n){var e=Ur(t+"");if(arguments.length<2){for(var r=Ir(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?$r:n?zr:qr)(e,n))},text:function(t){return arguments.length?this.each(null==t?Vr:("function"==typeof t?Xr:Br)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Wr:("function"==typeof t?Zr:Gr)(t)):this.node().innerHTML},raise:function(){return this.each(Jr)},lower:function(){return this.each(Qr)},append:function(t){var n="function"==typeof t?t:ni(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:ni(t),r=null==n?ei:"function"==typeof n?n:lr(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(ri)},clone:function(t){return this.select(t?oi:ii)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=si(t+""),a=o.length;if(!(arguments.length<2)){for(u=n?hi:li,null==e&&(e=!1),r=0;r<a;++r)this.each(u(o[r],n,e));return this}var u=this.node().__on;if(u)for(var c,f=0,s=u.length;f<s;++f)for(r=0,c=u[f];r<a;++r)if((i=o[r]).type===c.type&&i.name===c.name)return c.value},dispatch:function(t,n){return this.each(("function"==typeof n?vi:pi)(t,n))}};var bi=mi,_i=function(t){return"string"==typeof t?new yi([[document.querySelector(t)]],[document.documentElement]):new yi([[t]],gi)},wi=function(t){return"string"==typeof t?new yi([document.querySelectorAll(t)],[document.documentElement]):new yi([null==t?[]:t],gi)},xi=function(t){var n=function(){for(var t,n=ui;t=n.sourceEvent;)n=t;return n}();return n.changedTouches&&(n=n.changedTouches[0]),function(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=n.clientX,r.y=n.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]}(t,n)},Mi={value:function(){}};function Si(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new Ai(r)}function Ai(t){this._=t}function Ei(t,n){return t.trim().split(/^|\s+/).map((function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))}function Ti(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function Ci(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=Mi,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}Ai.prototype=Si.prototype={constructor:Ai,on:function(t,n){var e,r=this._,i=Ei(t+"",r),o=-1,a=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<a;)if(e=(t=i[o]).type)r[e]=Ci(r[e],t.name,n);else if(null==n)for(e in r)r[e]=Ci(r[e],t.name,null);return this}for(;++o<a;)if((e=(t=i[o]).type)&&(e=Ti(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new Ai(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var ki,Oi,Ni=Si,ji=0,Pi=0,Di=0,Li=0,Fi=0,Ui=0,Ii="object"==typeof performance&&performance.now?performance:Date,Ri="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Hi(){return Fi||(Ri(Yi),Fi=Ii.now()+Ui)}function Yi(){Fi=0}function zi(){this._call=this._time=this._next=null}function qi(t,n,e){var r=new zi;return r.restart(t,n,e),r}function $i(){Fi=(Li=Ii.now())+Ui,ji=Pi=0;try{!function(){Hi(),++ji;for(var t,n=ki;n;)(t=Fi-n._time)>=0&&n._call.call(null,t),n=n._next;--ji}()}finally{ji=0,function(){var t,n,e=ki,r=1/0;for(;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:ki=n);Oi=t,Bi(r)}(),Fi=0}}function Vi(){var t=Ii.now(),n=t-Li;n>1e3&&(Ui-=n,Li=t)}function Bi(t){ji||(Pi&&(Pi=clearTimeout(Pi)),t-Fi>24?(t<1/0&&(Pi=setTimeout($i,t-Ii.now()-Ui)),Di&&(Di=clearInterval(Di))):(Di||(Li=Ii.now(),Di=setInterval(Vi,1e3)),ji=1,Ri($i)))}zi.prototype=qi.prototype={constructor:zi,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Hi():+e)+(null==n?0:+n),this._next||Oi===this||(Oi?Oi._next=this:ki=this,Oi=this),this._call=t,this._time=e,Bi()},stop:function(){this._call&&(this._call=null,this._time=1/0,Bi())}};var Xi=function(t,n,e){var r=new zi;return n=null==n?0:+n,r.restart((function(e){r.stop(),t(e+n)}),n,e),r},Wi=Ni("start","end","cancel","interrupt"),Gi=[],Zi=function(t,n,e,r,i,o){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function o(c){var f,s,l,h;if(1!==e.state)return u();for(f in i)if((h=i[f]).name===e.name){if(3===h.state)return Xi(o);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[f]):+f<n&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[f])}if(Xi((function(){3===e.state&&(e.state=4,e.timer.restart(a,e.delay,e.time),a(c))})),e.state=2,e.on.call("start",t,t.__data__,e.index,e.group),2===e.state){for(e.state=3,r=new Array(l=e.tween.length),f=0,s=-1;f<l;++f)(h=e.tween[f].value.call(t,t.__data__,e.index,e.group))&&(r[++s]=h);r.length=s+1}}function a(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(u),e.state=5,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);5===e.state&&(e.on.call("end",t,t.__data__,e.index,e.group),u())}function u(){for(var r in e.state=6,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=qi((function(t){e.state=1,e.timer.restart(o,e.delay,e.time),e.delay<=t&&o(t-e.delay)}),0,e.time)}(t,e,{name:n,index:r,group:i,on:Wi,tween:Gi,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})};function Ji(t,n){var e=Ki(t,n);if(e.state>0)throw new Error("too late; already scheduled");return e}function Qi(t,n){var e=Ki(t,n);if(e.state>3)throw new Error("too late; already running");return e}function Ki(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}var to,no,eo,ro,io=180/Math.PI,oo={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},ao=function(t,n,e,r,i,o){var a,u,c;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(c=t*e+n*r)&&(e-=t*c,r-=n*c),(u=Math.sqrt(e*e+r*r))&&(e/=u,r/=u,c/=u),t*r<n*e&&(t=-t,n=-n,c=-c,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*io,skewX:Math.atan(c)*io,scaleX:a,scaleY:u}};function uo(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var u=[],c=[];return o=t(o),a=t(a),function(t,r,i,o,a,u){if(t!==i||r!==o){var c=a.push("translate(",null,n,null,e);u.push({i:c-4,x:Xt(t,i)},{i:c-2,x:Xt(r,o)})}else(i||o)&&a.push("translate("+i+n+o+e)}(o.translateX,o.translateY,a.translateX,a.translateY,u,c),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:Xt(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,a.rotate,u,c),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:Xt(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,a.skewX,u,c),function(t,n,e,r,o,a){if(t!==e||n!==r){var u=o.push(i(o)+"scale(",null,",",null,")");a.push({i:u-4,x:Xt(t,e)},{i:u-2,x:Xt(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,u,c),o=a=null,function(t){for(var n,e=-1,r=c.length;++e<r;)u[(n=c[e]).i]=n.x(t);return u.join("")}}}var co=uo((function(t){return"none"===t?oo:(to||(to=document.createElement("DIV"),no=document.documentElement,eo=document.defaultView),to.style.transform=t,t=eo.getComputedStyle(no.appendChild(to),null).getPropertyValue("transform"),no.removeChild(to),t=t.slice(7,-1).split(","),ao(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),fo=uo((function(t){return null==t?oo:(ro||(ro=document.createElementNS("http://www.w3.org/2000/svg","g")),ro.setAttribute("transform",t),(t=ro.transform.baseVal.consolidate())?(t=t.matrix,ao(t.a,t.b,t.c,t.d,t.e,t.f)):oo)}),", ",")",")");function so(t,n){var e,r;return function(){var i=Qi(this,t),o=i.tween;if(o!==e)for(var a=0,u=(r=e=o).length;a<u;++a)if(r[a].name===n){(r=r.slice()).splice(a,1);break}i.tween=r}}function lo(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=Qi(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var u={name:n,value:e},c=0,f=i.length;c<f;++c)if(i[c].name===n){i[c]=u;break}c===f&&i.push(u)}o.tween=i}}function ho(t,n,e){var r=t._id;return t.each((function(){var t=Qi(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)})),function(t){return Ki(t,r).value[n]}}var po=function(t,n){var e;return("number"==typeof n?Xt:n instanceof Mt?Yt:(e=Mt(n))?(n=e,Yt):Jt)(t,n)};function vo(t){return function(){this.removeAttribute(t)}}function go(t){return function(){this.removeAttributeNS(t.space,t.local)}}function yo(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=n(r=a,e)}}function mo(t,n,e){var r,i,o=e+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=n(r=a,e)}}function bo(t,n,e){var r,i,o;return function(){var a,u,c=e(this);if(null!=c)return(a=this.getAttribute(t))===(u=c+"")?null:a===r&&u===i?o:(i=u,o=n(r=a,c));this.removeAttribute(t)}}function _o(t,n,e){var r,i,o;return function(){var a,u,c=e(this);if(null!=c)return(a=this.getAttributeNS(t.space,t.local))===(u=c+"")?null:a===r&&u===i?o:(i=u,o=n(r=a,c));this.removeAttributeNS(t.space,t.local)}}function wo(t,n){return function(e){this.setAttribute(t,n.call(this,e))}}function xo(t,n){return function(e){this.setAttributeNS(t.space,t.local,n.call(this,e))}}function Mo(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&xo(t,i)),e}return i._value=n,i}function So(t,n){var e,r;function i(){var i=n.apply(this,arguments);return i!==r&&(e=(r=i)&&wo(t,i)),e}return i._value=n,i}function Ao(t,n){return function(){Ji(this,t).delay=+n.apply(this,arguments)}}function Eo(t,n){return n=+n,function(){Ji(this,t).delay=n}}function To(t,n){return function(){Qi(this,t).duration=+n.apply(this,arguments)}}function Co(t,n){return n=+n,function(){Qi(this,t).duration=n}}function ko(t,n){if("function"!=typeof n)throw new Error;return function(){Qi(this,t).ease=n}}function Oo(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t}))}(n)?Ji:Qi;return function(){var a=o(this,t),u=a.on;u!==r&&(i=(r=u).copy()).on(n,e),a.on=i}}var No=bi.prototype.constructor;function jo(t){return function(){this.style.removeProperty(t)}}function Po(t,n,e){return function(r){this.style.setProperty(t,n.call(this,r),e)}}function Do(t,n,e){var r,i;function o(){var o=n.apply(this,arguments);return o!==i&&(r=(i=o)&&Po(t,o,e)),r}return o._value=n,o}function Lo(t){return function(n){this.textContent=t.call(this,n)}}function Fo(t){var n,e;function r(){var r=t.apply(this,arguments);return r!==e&&(n=(e=r)&&Lo(r)),n}return r._value=t,r}var Uo=0;function Io(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function Ro(t){return bi().transition(t)}function Ho(){return++Uo}var Yo=bi.prototype;Io.prototype=Ro.prototype={constructor:Io,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=lr(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var u,c,f=r[a],s=f.length,l=o[a]=new Array(s),h=0;h<s;++h)(u=f[h])&&(c=t.call(u,u.__data__,h,f))&&("__data__"in u&&(c.__data__=u.__data__),l[h]=c,Zi(l[h],n,e,h,l,Ki(u,e)));return new Io(o,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=dr(t));for(var r=this._groups,i=r.length,o=[],a=[],u=0;u<i;++u)for(var c,f=r[u],s=f.length,l=0;l<s;++l)if(c=f[l]){for(var h,d=t.call(c,c.__data__,l,f),p=Ki(c,e),v=0,g=d.length;v<g;++v)(h=d[v])&&Zi(h,n,e,v,d,p);o.push(d),a.push(c)}return new Io(o,a,n,e)},filter:function(t){"function"!=typeof t&&(t=pr(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,c=r[i]=[],f=0;f<u;++f)(o=a[f])&&t.call(o,o.__data__,f,a)&&c.push(o);return new Io(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var c,f=n[u],s=e[u],l=f.length,h=a[u]=new Array(l),d=0;d<l;++d)(c=f[d]||s[d])&&(h[d]=c);for(;u<r;++u)a[u]=n[u];return new Io(a,this._parents,this._name,this._id)},selection:function(){return new No(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=Ho(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],c=u.length,f=0;f<c;++f)if(a=u[f]){var s=Ki(a,n);Zi(a,t,e,f,u,{time:s.time+s.delay+s.duration,delay:0,duration:s.duration,ease:s.ease})}return new Io(r,this._parents,t,e)},call:Yo.call,nodes:Yo.nodes,node:Yo.node,size:Yo.size,empty:Yo.empty,each:Yo.each,on:function(t,n){var e=this._id;return arguments.length<2?Ki(this.node(),e).on.on(t):this.each(Oo(e,t,n))},attr:function(t,n){var e=xr(t),r="transform"===e?fo:po;return this.attrTween(t,"function"==typeof n?(e.local?_o:bo)(e,r,ho(this,"attr."+t,n)):null==n?(e.local?go:vo)(e):(e.local?mo:yo)(e,r,n))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=xr(t);return this.tween(e,(r.local?Mo:So)(r,n))},style:function(t,n,e){var r="transform"==(t+="")?co:po;return null==n?this.styleTween(t,function(t,n){var e,r,i;return function(){var o=Pr(this,t),a=(this.style.removeProperty(t),Pr(this,t));return o===a?null:o===e&&a===r?i:i=n(e=o,r=a)}}(t,r)).on("end.style."+t,jo(t)):"function"==typeof n?this.styleTween(t,function(t,n,e){var r,i,o;return function(){var a=Pr(this,t),u=e(this),c=u+"";return null==u&&(this.style.removeProperty(t),c=u=Pr(this,t)),a===c?null:a===r&&c===i?o:(i=c,o=n(r=a,u))}}(t,r,ho(this,"style."+t,n))).each(function(t,n){var e,r,i,o,a="style."+n,u="end."+a;return function(){var c=Qi(this,t),f=c.on,s=null==c.value[a]?o||(o=jo(n)):void 0;f===e&&i===s||(r=(e=f).copy()).on(u,i=s),c.on=r}}(this._id,t)):this.styleTween(t,function(t,n,e){var r,i,o=e+"";return function(){var a=Pr(this,t);return a===o?null:a===r?i:i=n(r=a,e)}}(t,r,n),e).on("end.style."+t,null)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,Do(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(ho(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var n="text";if(arguments.length<1)return(n=this.tween(n))&&n._value;if(null==t)return this.tween(n,null);if("function"!=typeof t)throw new Error;return this.tween(n,Fo(t))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=Ki(this.node(),e).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?so:lo)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?Ao:Eo)(n,t)):Ki(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?To:Co)(n,t)):Ki(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(ko(n,t)):Ki(this.node(),n).ease},end:function(){var t,n,e=this,r=e._id,i=e.size();return new Promise((function(o,a){var u={value:a},c={value:function(){0==--i&&o()}};e.each((function(){var e=Qi(this,r),i=e.on;i!==t&&((n=(t=i).copy())._.cancel.push(u),n._.interrupt.push(u),n._.end.push(c)),e.on=n}))}))}};var zo={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function qo(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return zo.time=Hi(),zo;return e}bi.prototype.interrupt=function(t){return this.each((function(){!function(t,n){var e,r,i,o=t.__transition,a=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>2&&e.state<5,e.state=6,e.timer.stop(),e.on.call(r?"interrupt":"cancel",t,t.__data__,e.index,e.group),delete o[i]):a=!1;a&&delete t.__transition}}(this,t)}))},bi.prototype.transition=function(t){var n,e;t instanceof Io?(n=t._id,t=t._name):(n=Ho(),(e=zo).time=Hi(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],c=u.length,f=0;f<c;++f)(a=u[f])&&Zi(a,t,n,f,u,e||qo(a,n));return new Io(r,this._parents,t,n)};var $o={HL:{x:1,y:4},HA:{x:2,y:4},RA:{x:3,y:4},SU:{x:4,y:4},DI:{x:5,y:4},DR:{x:1,y:5},DY:{x:2,y:5},HM:{x:3,y:5},HI:{x:4,y:5},LA:{x:1,y:6},QU:{x:2,y:6},RD:{x:3,y:6},TA:{x:4,y:6},IB:{x:6,y:3}};function Vo(t){return function(t){if(Array.isArray(t))return Bo(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,n){if(!t)return;if("string"==typeof t)return Bo(t,n);var e=Object.prototype.toString.call(t).slice(8,-1);"Object"===e&&t.constructor&&(e=t.constructor.name);if("Map"===e||"Set"===e)return Array.from(t);if("Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e))return Bo(t,n)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Bo(t,n){(null==n||n>t.length)&&(n=t.length);for(var e=0,r=new Array(n);e<n;e++)r[e]=t[e];return r}var Xo,Wo=function(){var t,n,e,o,a,u,c={top:20,right:10,bottom:30,left:10},f=200,s=200,l=dn(),h=dn(),p=dn();function v(r){var i=r.data;l.domain([n,e]).range([0,f]);var u=i.map((function(t){return t.values.reduce((function(t,n){return t.concat(n)}),[]).map((function(t){return t[o]}))})).reduce((function(t,n){return t.concat(n)}),[]),c=Math.max.apply(Math,Vo(u));p.domain([2e4,16e5]).range([s,0]),h.domain([0,c]).range([s,0]).nice(),a=t.map((function(t){return r=0,(e=o)in(n={year:t})?Object.defineProperty(n,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):n[e]=r,n;var n,e,r}))}function g(t,r){var i=f-c.left-c.right;l.range([0,i]);var v=function(){var t=U,n=I,e=D(!0),r=null,i=F,o=null;function a(a){var u,c,f,s=a.length,l=!1;for(null==r&&(o=i(f=P())),u=0;u<=s;++u)!(u<s&&e(c=a[u],u,a))===l&&((l=!l)?o.lineStart():o.lineEnd()),l&&o.point(+t(c,u,a),+n(c,u,a));if(f)return o=null,f+""||null}return a.x=function(n){return arguments.length?(t="function"==typeof n?n:D(+n),a):t},a.y=function(t){return arguments.length?(n="function"==typeof t?t:D(+t),a):n},a.defined=function(t){return arguments.length?(e="function"==typeof t?t:D(!!t),a):e},a.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),a):i},a.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),a):r},a}().x((function(t){return l(t.year)})).y((function(t){return h(t[o])})),g=_i(this).selectAll("svg").data([t]);g.exit().remove();var y=g.enter().append("svg"),m=y.attr("class","chart").attr("data-id",t.id).append("g").attr("transform","translate(".concat(c.left,", ").concat(c.top,")"));y.merge(g).attr("viewBox","0 0 ".concat(i+c.left+c.right," ").concat(s+c.top+c.bottom)),window.navigator.userAgent.indexOf("Edge")>-1&&y.attr("width",i+c.left+c.right).attr("height",s+c.top+c.bottom),m.append("g").attr("class","axis axis--x"),m.append("g").attr("class","axis axis--y"),m.append("g").attr("class","g-plot").append("text").attr("class","chart-title").text(t.province),m.append("g").attr("class","g-points"),m.append("g").attr("class","g-clip").append("rect").attr("class","plot-area").attr("width",i+c.left+c.right).attr("height",s+c.top+c.bottom).attr("transform","translate(-".concat(c.left," -").concat(c.top,")")).on("mouseover",b.mouseover).on("mousemove",b.mousemove).on("mouseleave",b.mouseleave),function(t){var r=t.g,i=(t.svgWidth,(o=l,d(3,o)).tickValues([n,e]).tickFormat((function(t){return"'".concat(t.toString().slice(-2))})));var o;r.select(".axis--x").attr("transform","translate(0,"+s+")").call(i);var a=w(".2s"),u=function(t){return d(4,t)}(p).tickFormat((function(t){return a(t)}));r.select(".axis--y").call(u)}({g:m=y.merge(g).select("g"),svgWidth:i}),m.select(".chart-title").attr("transform","translate(".concat(i/2," ").concat(s+c.bottom-3,")"));var _=m.select(".g-plot"),x=_.selectAll(".path").data([t]);x.exit().remove(),x.enter().append("path").attr("class","path").attr("data-id",(function(t){return t.id})).attr("d",v(a)).merge(x).transition(Zo).attr("d",(function(t){return v(t.values)})).style("stroke",(function(t){return n=t.values,u(n[n.length-1][o]);var n}));var M=_.selectAll(".area").data([t]);M.exit().remove(),M.enter().append("path").attr("class","line").attr("data-id",(function(t){return t.id})).attr("d",v(a)).merge(M).transition(Zo).attr("d",(function(t){return v(t.values)})).style("fill","none"),function(t,n){var r=t.select(".g-points"),i=r.selectAll(".point-circle").data(n.values,(function(t){return t.year}));i.exit().remove(),i.enter().append("circle").attr("class","point-circle point").attr("r",2).attr("cx",(function(t){return l(t.year)})).attr("cy",(function(t){return h(t[o])})).merge(i).classed("is-visible",(function(t){return t.year===e})).attr("data-year",(function(t){return t.year})).transition(Zo).attr("cx",(function(t){return l(t.year)})).attr("cy",(function(t){return h(t[o])}));var a=r.selectAll(".point-label").data(n.values,(function(t){return t.year}));a.exit().remove(),a.enter().append("text").attr("class","point-label point").attr("x",(function(t){return l(t.year)})).attr("y",(function(t){return h(t[o])-5})).merge(a).classed("is-visible",(function(t){return t.year===e})).attr("data-year",(function(t){return t.year})).transition(Zo).attr("x",(function(t){return l(t.year)})).attr("y",(function(t){return h(t[o])-5})).text((function(t){return Go(t[o])}));var u=r.selectAll(".point-year").data(n.values,(function(t){return t.year}));u.exit().remove(),u.enter().append("text").attr("class","point-year point").attr("x",(function(t){return l(t.year)})).attr("y",s+16).merge(u).classed("is-visible",!1).attr("data-year",(function(t){return t.year})).transition(Zo).attr("x",(function(t){return l(t.year)})).attr("y",s+16).text((function(t){return t.year}))}(m,t)}function y(t){if(!r.isMobile())return t}function m(t){var n=t.datum();v({container:t,data:n}),function(t){var n=t.container,e=t.data,r=n.selectAll(".province").data(e,(function(t){return t.id}));r.exit().remove(),r.enter().append("figure").attr("class","province").attr("data-id",(function(t){return t.id})).merge(r).style("grid-column",(function(t){return y($o[t.id].x)})).style("grid-row",(function(t){return y($o[t.id].y)})).attr("aria-label",(function(t){return"".concat(t.province," had ").concat(Go(t.values[0][o])," total ").concat(i[o].title," in ").concat(t.values[0].year," and ").concat(Go(t.values[t.values.length-1][o])," in ").concat(t.values[t.values.length-1].year,".")})).each(g)}({container:t,data:n})}m.width=function(){if(!arguments.length)return f;var t=window.getComputedStyle(document.documentElement).getPropertyValue("--grid-columns");return s=((f=(arguments.length<=0?void 0:arguments[0])/t)-c.left-c.right)/1.33333333333,m},m.currentCategory=function(){return arguments.length?(o=arguments.length<=0?void 0:arguments[0],m):o},m.years=function(){return arguments.length?(n=(t=arguments.length<=0?void 0:arguments[0])[0],e=t[t.length-1],m):t},m.scaleColor=function(){return arguments.length?(u=arguments.length<=0?void 0:arguments[0],m):u};var b={currentID:null,currentYear:null,mouseover:function(t){b.currentID=t.id,b.currentYear=b.getYear(this),b.highlightChart()},mouseleave:function(){b.resetChart(),b.hidePoints()},mousemove:function(){var t=b.getYear(this);t!=b.currentYear&&(b.currentYear=t,b.showPoints())},highlightChart:function(){wi('.chart[data-id="'+this.currentID+'"], .map-province[data-id="'+this.currentID+'"]').classed("is-highlighted",!0),wi('.chart:not([data-id="'+this.currentID+'"]), .map-province:not([data-id="'+this.currentID+'"])').classed("is-faded",!0)},resetChart:function(){wi(".chart, .map-province").classed("is-faded",!1).classed("is-highlighted",!1)},showPoints:function(){var t=this,n=wi(".chart .point");n.filter((function(n){return n.year===t.currentYear})).classed("is-visible",!0),n.filter((function(n){return n.year!==t.currentYear})).classed("is-visible",!1),wi(".chart .axis").classed("is-hidden",!0)},hidePoints:function(){wi(".chart .point").classed("is-visible",!1),wi('.chart .point-circle[data-year="'+e+'"], .chart .point-label[data-year="'+e+'"]').classed("is-visible",!0),wi(".chart .axis").classed("is-hidden",!1)},getYear:function(t){return Math.round(l.invert(xi(t)[0]))}};return m}(),Go=w(".2~s"),Zo=Ro().duration(750);var Jo={init:function(t){var n;(Xo=_i(t.container)).datum(t.data),Wo.years(t.years),Wo.currentCategory(t.currentCategory),Wo.scaleColor(t.scaleColor),n=Xo.node().offsetWidth,Wo.width(n),Xo.call(Wo)}},Qo=(e(123),e(127),{}),Ko={};function ta(t){return new Function("d","return {"+t.map((function(t,n){return JSON.stringify(t)+": d["+n+'] || ""'})).join(",")+"}")}function na(t){var n=Object.create(null),e=[];return t.forEach((function(t){for(var r in t)r in n||e.push(n[r]=r)})),e}function ea(t,n){var e=t+"",r=e.length;return r<n?new Array(n-r+1).join(0)+e:e}function ra(t){var n,e=t.getUTCHours(),r=t.getUTCMinutes(),i=t.getUTCSeconds(),o=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((n=t.getUTCFullYear())<0?"-"+ea(-n,6):n>9999?"+"+ea(n,6):ea(n,4))+"-"+ea(t.getUTCMonth()+1,2)+"-"+ea(t.getUTCDate(),2)+(o?"T"+ea(e,2)+":"+ea(r,2)+":"+ea(i,2)+"."+ea(o,3)+"Z":i?"T"+ea(e,2)+":"+ea(r,2)+":"+ea(i,2)+"Z":r||e?"T"+ea(e,2)+":"+ea(r,2)+"Z":"")}var ia=function(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],o=t.length,a=0,u=0,c=o<=0,f=!1;function s(){if(c)return Ko;if(f)return f=!1,Qo;var n,r,i=a;if(34===t.charCodeAt(i)){for(;a++<o&&34!==t.charCodeAt(a)||34===t.charCodeAt(++a););return(n=a)>=o?c=!0:10===(r=t.charCodeAt(a++))?f=!0:13===r&&(f=!0,10===t.charCodeAt(a)&&++a),t.slice(i+1,n-1).replace(/""/g,'"')}for(;a<o;){if(10===(r=t.charCodeAt(n=a++)))f=!0;else if(13===r)f=!0,10===t.charCodeAt(a)&&++a;else if(r!==e)continue;return t.slice(i,n)}return c=!0,t.slice(i,o)}for(10===t.charCodeAt(o-1)&&--o,13===t.charCodeAt(o-1)&&--o;(r=s())!==Ko;){for(var l=[];r!==Qo&&r!==Ko;)l.push(r),r=s();n&&null==(l=n(l,u++))||i.push(l)}return i}function i(n,e){return n.map((function(n){return e.map((function(t){return a(n[t])})).join(t)}))}function o(n){return n.map(a).join(t)}function a(t){return null==t?"":t instanceof Date?ra(t):n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,o=r(t,(function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=ta(t);return function(r,i){return n(e(r),i,t)}}(t,n):ta(t)}));return o.columns=i||[],o},parseRows:r,format:function(n,e){return null==e&&(e=na(n)),[e.map(a).join(t)].concat(i(n,e)).join("\n")},formatBody:function(t,n){return null==n&&(n=na(t)),i(t,n).join("\n")},formatRows:function(t){return t.map(o).join("\n")},formatRow:o,formatValue:a}},oa=ia(","),aa=oa.parse,ua=(oa.parseRows,oa.format,oa.formatBody,oa.formatRows,oa.formatRow,oa.formatValue,ia("\t")),ca=ua.parse;ua.parseRows,ua.format,ua.formatBody,ua.formatRows,ua.formatRow,ua.formatValue;function fa(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var sa=function(t,n){return fetch(t,n).then(fa)};function la(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=void 0),sa(n,e).then((function(n){return t(n,r)}))}}var ha=la(aa);la(ca),e(128),e(130);function da(t,n){if(null==t)return{};var e,r,i=function(t,n){if(null==t)return{};var e,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)e=o[r],n.indexOf(e)>=0||(i[e]=t[e]);return i}(t,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)e=o[r],n.indexOf(e)>=0||Object.prototype.propertyIsEnumerable.call(t,e)&&(i[e]=t[e])}return i}function pa(t){var n=t.objectArray,e=t.key,r=t.sortBy,i=n.reduce((function(t,n){var i=n.id,o=n.province,a=da(n,["id","province"]);return t[n[e]]=t[n[e]]||{values:[],id:i,province:o},t[n[e]].values.push(a),t[n[e]].values.sort((function(t,n){return t[r]-n[r]})),t}),{});return Object.values(i)}function va(t,n,e,r,i,o,a){try{var u=t[o](a),c=u.value}catch(t){return void e(t)}u.done?n(c):Promise.resolve(c).then(r,i)}function ga(t){return function(){var n=this,e=arguments;return new Promise((function(r,i){var o=t.apply(n,e);function a(t){va(o,r,i,a,u,"next",t)}function u(t){va(o,r,i,a,u,"throw",t)}a(void 0)}))}}var ya=["id","province"];function ma(){return(ma=ga(regeneratorRuntime.mark((function t(n){var e;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,ha(n,(function(t){for(var n in t)ya.includes(n)||(t[n]=+t[n]);return t})).then((function(t){var n={years:{}};return o.forEach((function(e){n.years[e]=Array.from(new Set(t.filter((function(t){return 0!==t[e]})).map((function(t){return t.year})))).sort()})),n.values=pa({objectArray:t,key:"province",sortBy:"year"}).sort((function(t,n){return t.province.localeCompare(n.province)})),n}));case 2:return e=t.sent,t.abrupt("return",e);case 4:case"end":return t.stop()}}),t)})))).apply(this,arguments)}var ba=function(t){return ma.apply(this,arguments)},_a=(e(131),{svg:"http://www.w3.org/2000/svg",xhtml:"http://www.w3.org/1999/xhtml",xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"}),wa=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),_a.hasOwnProperty(n)?{space:_a[n],local:t}:t};function xa(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return"http://www.w3.org/1999/xhtml"===e&&"http://www.w3.org/1999/xhtml"===n.documentElement.namespaceURI?n.createElement(t):n.createElementNS(e,t)}}function Ma(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var Sa=function(t){var n=wa(t);return(n.local?Ma:xa)(n)},Aa=0;function Ea(){this._="@"+(++Aa).toString(36)}Ea.prototype=function(){return new Ea}.prototype={constructor:Ea,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var Ta=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var Ca=document.documentElement;if(!Ca.matches){var ka=Ca.webkitMatchesSelector||Ca.msMatchesSelector||Ca.mozMatchesSelector||Ca.oMatchesSelector;Ta=function(t){return function(){return ka.call(this,t)}}}}var Oa=Ta,Na={},ja=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Na={mouseenter:"mouseover",mouseleave:"mouseout"}));function Pa(t,n,e){return t=Da(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function Da(t,n,e){return function(r){var i=ja;ja=r;try{t.call(this,this.__data__,n,e)}finally{ja=i}}}function La(t){return t.trim().split(/^|\s+/).map((function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}}))}function Fa(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function Ua(t,n,e){var r=Na.hasOwnProperty(t.type)?Pa:Da;return function(i,o,a){var u,c=this.__on,f=r(n,o,a);if(c)for(var s=0,l=c.length;s<l;++s)if((u=c[s]).type===t.type&&u.name===t.name)return this.removeEventListener(u.type,u.listener,u.capture),this.addEventListener(u.type,u.listener=f,u.capture=e),void(u.value=n);this.addEventListener(t.type,f,e),u={type:t.type,name:t.name,value:n,listener:f,capture:e},c?c.push(u):this.__on=[u]}}function Ia(){}var Ra=function(t){return null==t?Ia:function(){return this.querySelector(t)}};function Ha(){return[]}var Ya=function(t){return new Array(t.length)};function za(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}za.prototype={constructor:za,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};function qa(t,n,e,r,i,o){for(var a,u=0,c=n.length,f=o.length;u<f;++u)(a=n[u])?(a.__data__=o[u],r[u]=a):e[u]=new za(t,o[u]);for(;u<c;++u)(a=n[u])&&(i[u]=a)}function $a(t,n,e,r,i,o,a){var u,c,f,s={},l=n.length,h=o.length,d=new Array(l);for(u=0;u<l;++u)(c=n[u])&&(d[u]=f="$"+a.call(c,c.__data__,u,n),f in s?i[u]=c:s[f]=c);for(u=0;u<h;++u)(c=s[f="$"+a.call(t,o[u],u,o)])?(r[u]=c,c.__data__=o[u],s[f]=null):e[u]=new za(t,o[u]);for(u=0;u<l;++u)(c=n[u])&&s[d[u]]===c&&(i[u]=c)}function Va(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function Ba(t){return function(){this.removeAttribute(t)}}function Xa(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Wa(t,n){return function(){this.setAttribute(t,n)}}function Ga(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function Za(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function Ja(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}var Qa=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function Ka(t){return function(){this.style.removeProperty(t)}}function tu(t,n,e){return function(){this.style.setProperty(t,n,e)}}function nu(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function eu(t){return function(){delete this[t]}}function ru(t,n){return function(){this[t]=n}}function iu(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function ou(t){return t.trim().split(/^|\s+/)}function au(t){return t.classList||new uu(t)}function uu(t){this._node=t,this._names=ou(t.getAttribute("class")||"")}function cu(t,n){for(var e=au(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function fu(t,n){for(var e=au(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function su(t){return function(){cu(this,t)}}function lu(t){return function(){fu(this,t)}}function hu(t,n){return function(){(n.apply(this,arguments)?cu:fu)(this,t)}}uu.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function du(){this.textContent=""}function pu(t){return function(){this.textContent=t}}function vu(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function gu(){this.innerHTML=""}function yu(t){return function(){this.innerHTML=t}}function mu(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function bu(){this.nextSibling&&this.parentNode.appendChild(this)}function _u(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function wu(){return null}function xu(){var t=this.parentNode;t&&t.removeChild(this)}function Mu(t,n,e){var r=Qa(t),i=r.CustomEvent;i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function Su(t,n){return function(){return Mu(this,t,n)}}function Au(t,n){return function(){return Mu(this,t,n.apply(this,arguments))}}var Eu=[null];function Tu(t,n){this._groups=t,this._parents=n}function Cu(){return new Tu([[document.documentElement]],Eu)}Tu.prototype=Cu.prototype={constructor:Tu,select:function(t){"function"!=typeof t&&(t=Ra(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a,u=n[i],c=u.length,f=r[i]=new Array(c),s=0;s<c;++s)(o=u[s])&&(a=t.call(o,o.__data__,s,u))&&("__data__"in o&&(a.__data__=o.__data__),f[s]=a);return new Tu(r,this._parents)},selectAll:function(t){var n;"function"!=typeof t&&(t=null==(n=t)?Ha:function(){return this.querySelectorAll(n)});for(var e=this._groups,r=e.length,i=[],o=[],a=0;a<r;++a)for(var u,c=e[a],f=c.length,s=0;s<f;++s)(u=c[s])&&(i.push(t.call(u,u.__data__,s,c)),o.push(u));return new Tu(i,o)},filter:function(t){"function"!=typeof t&&(t=Oa(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,c=r[i]=[],f=0;f<u;++f)(o=a[f])&&t.call(o,o.__data__,f,a)&&c.push(o);return new Tu(r,this._parents)},data:function(t,n){if(!t)return p=new Array(this.size()),s=-1,this.each((function(t){p[++s]=t})),p;var e,r=n?$a:qa,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var a=o.length,u=new Array(a),c=new Array(a),f=new Array(a),s=0;s<a;++s){var l=i[s],h=o[s],d=h.length,p=t.call(l,l&&l.__data__,s,i),v=p.length,g=c[s]=new Array(v),y=u[s]=new Array(v);r(l,h,g,y,f[s]=new Array(d),p,n);for(var m,b,_=0,w=0;_<v;++_)if(m=g[_]){for(_>=w&&(w=_+1);!(b=y[w])&&++w<v;);m._next=b||null}}return(u=new Tu(u,i))._enter=c,u._exit=f,u},enter:function(){return new Tu(this._enter||this._groups.map(Ya),this._parents)},exit:function(){return new Tu(this._exit||this._groups.map(Ya),this._parents)},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var c,f=n[u],s=e[u],l=f.length,h=a[u]=new Array(l),d=0;d<l;++d)(c=f[d]||s[d])&&(h[d]=c);for(;u<r;++u)a[u]=n[u];return new Tu(a,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&a!==r.nextSibling&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=Va);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var a,u=e[o],c=u.length,f=i[o]=new Array(c),s=0;s<c;++s)(a=u[s])&&(f[s]=a);f.sort(n)}return new Tu(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each((function(){t[++n]=this})),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],a=0,u=o.length;a<u;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,n){var e=wa(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?Xa:Ba:"function"==typeof n?e.local?Ja:Za:e.local?Ga:Wa)(e,n))},style:function(t,n,e){var r;return arguments.length>1?this.each((null==n?Ka:"function"==typeof n?nu:tu)(t,n,null==e?"":e)):Qa(r=this.node()).getComputedStyle(r,null).getPropertyValue(t)},property:function(t,n){return arguments.length>1?this.each((null==n?eu:"function"==typeof n?iu:ru)(t,n)):this.node()[t]},classed:function(t,n){var e=ou(t+"");if(arguments.length<2){for(var r=au(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?hu:n?su:lu)(e,n))},text:function(t){return arguments.length?this.each(null==t?du:("function"==typeof t?vu:pu)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?gu:("function"==typeof t?mu:yu)(t)):this.node().innerHTML},raise:function(){return this.each(bu)},lower:function(){return this.each(_u)},append:function(t){var n="function"==typeof t?t:Sa(t);return this.select((function(){return this.appendChild(n.apply(this,arguments))}))},insert:function(t,n){var e="function"==typeof t?t:Sa(t),r=null==n?wu:"function"==typeof n?n:Ra(n);return this.select((function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(xu)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=La(t+""),a=o.length;if(!(arguments.length<2)){for(u=n?Ua:Fa,null==e&&(e=!1),r=0;r<a;++r)this.each(u(o[r],n,e));return this}var u=this.node().__on;if(u)for(var c,f=0,s=u.length;f<s;++f)for(r=0,c=u[f];r<a;++r)if((i=o[r]).type===c.type&&i.name===c.name)return c.value},dispatch:function(t,n){return this.each(("function"==typeof n?Au:Su)(t,n))}};var ku,Ou=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]},Nu=function(t){return(t=Ou(Math.abs(t)))?t[1]:NaN},ju=function(t,n){var e=Ou(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},Pu={"":function(t,n){t:for(var e,r=(t=t.toPrecision(n)).length,i=1,o=-1;i<r;++i)switch(t[i]){case".":o=e=i;break;case"0":0===o&&(o=i),e=i;break;case"e":break t;default:o>0&&(o=0)}return o>0?t.slice(0,o)+t.slice(e+1):t},"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return ju(100*t,n)},r:ju,s:function(t,n){var e=Ou(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(ku=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Ou(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},Du=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i,Lu=function(t){return new Fu(t)};function Fu(t){if(!(n=Du.exec(t)))throw new Error("invalid format: "+t);var n,e=n[1]||" ",r=n[2]||">",i=n[3]||"-",o=n[4]||"",a=!!n[5],u=n[6]&&+n[6],c=!!n[7],f=n[8]&&+n[8].slice(1),s=n[9]||"";"n"===s?(c=!0,s="g"):Pu[s]||(s=""),(a||"0"===e&&"="===r)&&(a=!0,e="0",r="="),this.fill=e,this.align=r,this.sign=i,this.symbol=o,this.zero=a,this.width=u,this.comma=c,this.precision=f,this.type=s}Fu.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+this.type};var Uu=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function Iu(t){return t}var Ru,Hu,Yu,zu=function(t){var n,e,r=t.grouping&&t.thousands?(n=t.grouping,e=t.thousands,function(t,r){for(var i=t.length,o=[],a=0,u=n[0],c=0;i>0&&u>0&&(c+u+1>r&&(u=Math.max(1,r-c)),o.push(t.substring(i-=u,i+u)),!((c+=u+1)>r));)u=n[a=(a+1)%n.length];return o.reverse().join(e)}):Iu,i=t.currency,o=t.decimal;function a(t){var n=(t=Lu(t)).fill,e=t.align,a=t.sign,u=t.symbol,c=t.zero,f=t.width,s=t.comma,l=t.precision,h=t.type,d="$"===u?i[0]:"#"===u&&/[boxX]/.test(h)?"0"+h.toLowerCase():"",p="$"===u?i[1]:/[%p]/.test(h)?"%":"",v=Pu[h],g=!h||/[defgprs%]/.test(h);function y(t){var i,u,y,m=d,b=p;if("c"===h)b=v(t)+b,t="";else{var _=((t=+t)<0||1/t<0)&&(t*=-1,!0);if(t=v(t,l),_)for(i=-1,u=t.length,_=!1;++i<u;)if(48<(y=t.charCodeAt(i))&&y<58||"x"===h&&96<y&&y<103||"X"===h&&64<y&&y<71){_=!0;break}if(m=(_?"("===a?a:"-":"-"===a||"("===a?"":a)+m,b=b+("s"===h?Uu[8+ku/3]:"")+(_&&"("===a?")":""),g)for(i=-1,u=t.length;++i<u;)if(48>(y=t.charCodeAt(i))||y>57){b=(46===y?o+t.slice(i+1):t.slice(i))+b,t=t.slice(0,i);break}}s&&!c&&(t=r(t,1/0));var w=m.length+t.length+b.length,x=w<f?new Array(f-w+1).join(n):"";switch(s&&c&&(t=r(x+t,x.length?f-b.length:1/0),x=""),e){case"<":return m+t+b+x;case"=":return m+x+t+b;case"^":return x.slice(0,w=x.length>>1)+m+t+b+x.slice(w)}return x+m+t+b}return l=null==l?h?6:12:/[gprs]/.test(h)?Math.max(1,Math.min(21,l)):Math.max(0,Math.min(20,l)),y.toString=function(){return t+""},y}return{format:a,formatPrefix:function(t,n){var e=a(((t=Lu(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Nu(n)/3))),i=Math.pow(10,-r),o=Uu[8+r/3];return function(t){return e(i*t)+o}}}};!function(t){Ru=zu(t),Hu=Ru.format,Yu=Ru.formatPrefix}({decimal:".",thousands:",",grouping:[3],currency:["$",""]});var qu=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},$u=function(t){var n;return 1===t.length&&(n=t,t=function(t,e){return qu(n(t),e)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)<0?r=o+1:i=o}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)>0?i=o:r=o+1}return r}}};var Vu=$u(qu),Bu=Vu.right,Xu=(Vu.left,Bu),Wu=Array.prototype,Gu=(Wu.slice,Wu.map,function(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o}),Zu=Math.sqrt(50),Ju=Math.sqrt(10),Qu=Math.sqrt(2),Ku=function(t,n,e){var r=tc(t,n,e);return Gu(Math.ceil(t/r)*r,Math.floor(n/r)*r+r/2,r)};function tc(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=Zu?i*=10:o>=Ju?i*=5:o>=Qu&&(i*=2),n<t?-i:i}var nc=function(t,n){var e,r=0,i=t.length,o=-1;if(null==n)for(;++o<i;)(e=+t[o])&&(r+=e);else for(;++o<i;)(e=+n(t[o],o,t))&&(r+=e);return r};var ec=Array.prototype,rc=ec.map,ic=ec.slice;var oc=function(t){return function(){return t}},ac=function(t){return+t},uc=[0,1];function cc(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:oc(n)}function fc(t,n,e,r){var i=t[0],o=t[1],a=n[0],u=n[1];return o<i?(i=e(o,i),a=r(u,a)):(i=e(i,o),a=r(a,u)),function(t){return a(i(t))}}function sc(t,n,e,r){var i=Math.min(t.length,n.length)-1,o=new Array(i),a=new Array(i),u=-1;for(t[i]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++u<i;)o[u]=e(t[u],t[u+1]),a[u]=r(n[u],n[u+1]);return function(n){var e=Xu(t,n,1,i)-1;return a[e](o[e](n))}}function lc(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp())}function hc(t,n){var e,r,i,o=uc,a=uc,u=Qt,c=!1;function f(){return e=Math.min(o.length,a.length)>2?sc:fc,r=i=null,s}function s(n){return(r||(r=e(o,a,c?function(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=n?0:t>=e?1:r(t)}}}(t):t,u)))(+n)}return s.invert=function(t){return(i||(i=e(a,o,cc,c?function(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=0?n:t>=1?e:r(t)}}}(n):n)))(+t)},s.domain=function(t){return arguments.length?(o=rc.call(t,ac),f()):o.slice()},s.range=function(t){return arguments.length?(a=ic.call(t),f()):a.slice()},s.rangeRound=function(t){return a=ic.call(t),u=Kt,f()},s.clamp=function(t){return arguments.length?(c=!!t,f()):c},s.interpolate=function(t){return arguments.length?(u=t,f()):u},f()}var dc=function(t,n,e){var r,i=t[0],o=t[t.length-1],a=tc(i,o,null==n?10:n);switch((e=Lu(null==e?",f":e)).type){case"s":var u=Math.max(Math.abs(i),Math.abs(o));return null!=e.precision||isNaN(r=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Nu(n)/3)))-Nu(Math.abs(t)))}(a,u))||(e.precision=r),Yu(e,u);case"":case"e":case"g":case"p":case"r":null!=e.precision||isNaN(r=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,Nu(n)-Nu(t))+1}(a,Math.max(Math.abs(i),Math.abs(o))))||(e.precision=r-("e"===e.type));break;case"f":case"%":null!=e.precision||isNaN(r=function(t){return Math.max(0,-Nu(Math.abs(t)))}(a))||(e.precision=r-2*("%"===e.type))}return Hu(e)};function pc(t){var n=t.domain;return t.ticks=function(t){var e=n();return Ku(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){return dc(n(),t,e)},t.nice=function(e){var r=n(),i=r.length-1,o=null==e?10:e,a=r[0],u=r[i],c=tc(a,u,o);return c&&(c=tc(Math.floor(a/c)*c,Math.ceil(u/c)*c,o),r[0]=Math.floor(a/c)*c,r[i]=Math.ceil(u/c)*c,n(r)),t},t}function vc(){var t=hc(cc,Xt);return t.copy=function(){return lc(t,vc())},pc(t)}var gc=function(t){return t.match(/.{6}/g).map((function(t){return"#"+t}))},yc=(gc("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),gc("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6"),gc("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9"),gc("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5"),Math.PI/180),mc=180/Math.PI,bc=-.14861,_c=1.78277,wc=-.29227,xc=-.90649,Mc=1.97294,Sc=Mc*xc,Ac=Mc*_c,Ec=_c*wc-xc*bc;function Tc(t){if(t instanceof kc)return new kc(t.h,t.s,t.l,t.opacity);t instanceof Ct||(t=Et(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(Ec*r+Sc*n-Ac*e)/(Ec+Sc-Ac),o=r-i,a=(Mc*(e-i)-wc*o)/xc,u=Math.sqrt(a*a+o*o)/(Mc*i*(1-i)),c=u?Math.atan2(a,o)*mc-120:NaN;return new kc(c<0?c+360:c,u,i,t.opacity)}function Cc(t,n,e,r){return 1===arguments.length?Tc(t):new kc(t,n,e,null==r?1:r)}function kc(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Oc(t){return function n(e){function r(n,r){var i=t((n=Cc(n)).h,(r=Cc(r)).h),o=Ht(n.s,r.s),a=Ht(n.l,r.l),u=Ht(n.opacity,r.opacity);return function(t){return n.h=i(t),n.s=o(t),n.l=a(Math.pow(t,e)),n.opacity=u(t),n+""}}return e=+e,r.gamma=n,r}(1)}ut(kc,Cc,ct(ft,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new kc(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new kc(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*yc,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new Ct(255*(n+e*(bc*r+_c*i)),255*(n+e*(wc*r+xc*i)),255*(n+e*(Mc*r)),this.opacity)}}));Oc((function(t,n){var e=n-t;return e?It(t,e>180||e<-180?e-360*Math.round(e/360):e):Ut(isNaN(t)?n:t)}));var Nc=Oc(Ht);Nc(Cc(300,.5,0),Cc(-240,.5,1)),Nc(Cc(-100,.75,.35),Cc(80,1.5,.8)),Nc(Cc(260,.75,.35),Cc(80,1.5,.8)),Cc();function jc(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}jc(gc("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),jc(gc("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),jc(gc("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),jc(gc("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));var Pc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Dc=function(t){return t},Lc=function(t){for(var n=[],e=0,r=t.length;e<r;e++)n[e]=t[r-e-1];return n},Fc=function(t,n){t.each((function(){for(var t,e,r="string"==typeof(e=this)?new Tu([[document.querySelector(e)]],[document.documentElement]):new Tu([[e]],Eu),i=r.text().split(/\s+/).reverse(),o=[],a=(r.attr("y"),parseFloat(r.attr("dy"))||0),u=r.text(null).append("tspan").attr("x",0).attr("dy",a+"em");t=i.pop();)o.push(t),u.text(o.join(" ")),u.node().getComputedTextLength()>n&&o.length>1&&(o.pop(),u.text(o.join(" ")),o=[t],u=r.append("tspan").attr("x",0).attr("dy",1.2+a+"em").text(t))}))},Uc={d3_drawShapes:function(t,n,e,r,i,o){"rect"===t?n.attr("height",e).attr("width",r):"circle"===t?n.attr("r",i):"line"===t?n.attr("x1",0).attr("x2",r).attr("y1",0).attr("y2",0):"path"===t&&n.attr("d",o)},d3_addText:function(t,n,e,r,i){n.append("text").attr("class",r+"label");var o=t.selectAll("g."+r+"cell text."+r+"label").data(e).text(Dc);return i&&t.selectAll("g."+r+"cell text."+r+"label").call(Fc,i),o},d3_calcType:function(t,n,e,r,i,o){var a=t.invertExtent?function(t,n,e){var r=t.range().map((function(r){var i=t.invertExtent(r);return n(i[0])+" "+e+" "+n(i[1])}));return{data:t.range(),labels:r,feature:Dc}}(t,i,o):t.ticks?function(t,n,e){var r=[];if(n.length>1)r=n;else for(var i=t.domain(),o=(i[i.length-1]-i[0])/(n-1),a=0;a<n;a++)r.push(i[0]+a*o);var u=r.map(e);return{data:r,labels:u,feature:function(n){return t(n)}}}(t,e,i):function(t){return{data:t.domain(),labels:t.domain(),feature:function(n){return t(n)}}}(t),u=t.range&&t.range()||t.domain();return a.labels=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],n=arguments[1],e=arguments[2],r=arguments[3],i=arguments[4];if("object"===(void 0===n?"undefined":Pc(n))){if(0===n.length)return t;for(var o=n.length;o<t.length;o++)n.push(t[o]);return n}if("function"==typeof n){for(var a=[],u=t.length,c=0;c<u;c++)a.push(n({i:c,genLength:u,generatedLabels:t,domain:e,range:r,labelDelimiter:i}));return a}return t}(a.labels,r,t.domain(),u,o),n&&(a.labels=Lc(a.labels),a.data=Lc(a.data)),a},d3_filterCells:function(t,n){var e=t.data.map((function(n,e){return{data:n,label:t.labels[e]}})).filter(n),r=e.map((function(t){return t.data})),i=e.map((function(t){return t.label}));return t.data=t.data.filter((function(t){return-1!==r.indexOf(t)})),t.labels=t.labels.filter((function(t){return-1!==i.indexOf(t)})),t},d3_placement:function(t,n,e,r,i,o){n.attr("transform",e),r.attr("transform",i),"horizontal"===t&&r.style("text-anchor",o)},d3_addEvents:function(t,n){t.on("mouseover.legend",(function(t){!function(t,n,e){t.call("cellover",e,n)}(n,t,this)})).on("mouseout.legend",(function(t){!function(t,n,e){t.call("cellout",e,n)}(n,t,this)})).on("click.legend",(function(t){!function(t,n,e){t.call("cellclick",e,n)}(n,t,this)}))},d3_title:function(t,n,e,r){if(""!==n){t.selectAll("text."+e+"legendTitle").data([n]).enter().append("text").attr("class",e+"legendTitle"),t.selectAll("text."+e+"legendTitle").text(n),r&&t.selectAll("text."+e+"legendTitle").call(Fc,r);var i=t.select("."+e+"legendCells"),o=t.select("."+e+"legendTitle").nodes().map((function(t){return t.getBBox().height}))[0],a=-i.nodes().map((function(t){return t.getBBox().x}))[0];i.attr("transform","translate("+a+","+o+")")}},d3_defaultLocale:{format:Hu,formatPrefix:Yu},d3_defaultFormatSpecifier:".01f",d3_defaultDelimiter:"to"};function Ic(){var t=vc(),n="rect",e=15,r=15,i=10,o=2,a=[5],u=void 0,c=[],f="",s=!1,l="",h=Uc.d3_defaultLocale,d=Uc.d3_defaultFormatSpecifier,p=10,v="middle",g=Uc.d3_defaultDelimiter,y=void 0,m="vertical",b=!1,_=void 0,w=void 0,x=Ni("cellover","cellout","cellclick");function M(M){var S=Uc.d3_calcType(t,b,a,c,h.format(d),g);M.selectAll("g").data([t]).enter().append("g").attr("class",f+"legendCells"),u&&Uc.d3_filterCells(S,u);var A=M.select("."+f+"legendCells").selectAll("."+f+"cell").data(S.data),E=A.enter().append("g").attr("class",f+"cell");E.append(n).attr("class",f+"swatch");var T=M.selectAll("g."+f+"cell "+n+"."+f+"swatch").data(S.data);Uc.d3_addEvents(E,x),A.exit().transition().style("opacity",0).remove(),T.exit().transition().style("opacity",0).remove(),T=T.merge(T),Uc.d3_drawShapes(n,T,r,e,i,_);var C=Uc.d3_addText(M,E,S.labels,f,y);A=E.merge(A);var k=C.nodes().map((function(t){return t.getBBox()})),O=T.nodes().map((function(t){return t.getBBox()}));s?T.attr("class",(function(t){return f+"swatch "+S.feature(t)})):"line"==n?T.style("stroke",S.feature):T.style("fill",S.feature);var N,j=void 0,P=void 0,D="start"==v?0:"middle"==v?.5:1;"vertical"===m?(N=k.map((function(t,n){return Math.max(t.height,O[n].height)})),j=function(t,n){return"translate(0, "+(nc(N.slice(0,n))+n*o)+")"},P=function(t,n){return"translate( "+(O[n].width+O[n].x+p)+", "+(O[n].y+O[n].height/2+5)+")"}):"horizontal"===m&&(j=function(t,n){return"translate("+n*(O[n].width+o)+",0)"},P=function(t,n){return"translate("+(O[n].width*D+O[n].x)+",\n          "+(O[n].height+O[n].y+p+8)+")"}),Uc.d3_placement(m,A,j,C,P,v),Uc.d3_title(M,l,f,w),A.transition().style("opacity",1)}return M.scale=function(n){return arguments.length?(t=n,M):t},M.cells=function(t){return arguments.length?((t.length>1||t>=2)&&(a=t),M):a},M.cellFilter=function(t){return arguments.length?(u=t,M):u},M.shape=function(t,e){return arguments.length?(("rect"==t||"circle"==t||"line"==t||"path"==t&&"string"==typeof e)&&(n=t,_=e),M):n},M.shapeWidth=function(t){return arguments.length?(e=+t,M):e},M.shapeHeight=function(t){return arguments.length?(r=+t,M):r},M.shapeRadius=function(t){return arguments.length?(i=+t,M):i},M.shapePadding=function(t){return arguments.length?(o=+t,M):o},M.labels=function(t){return arguments.length?(c=t,M):c},M.labelAlign=function(t){return arguments.length?("start"!=t&&"end"!=t&&"middle"!=t||(v=t),M):v},M.locale=function(t){return arguments.length?(h=zu(t),M):h},M.labelFormat=function(t){return arguments.length?(d=Lu(t),M):M.locale().format(d)},M.labelOffset=function(t){return arguments.length?(p=+t,M):p},M.labelDelimiter=function(t){return arguments.length?(g=t,M):g},M.labelWrap=function(t){return arguments.length?(y=t,M):y},M.useClass=function(t){return arguments.length?(!0!==t&&!1!==t||(s=t),M):s},M.orient=function(t){return arguments.length?("horizontal"!=(t=t.toLowerCase())&&"vertical"!=t||(m=t),M):m},M.ascending=function(t){return arguments.length?(b=!!t,M):b},M.classPrefix=function(t){return arguments.length?(f=t,M):f},M.title=function(t){return arguments.length?(l=t,M):l},M.titleWidth=function(t){return arguments.length?(w=t,M):w},M.textWrap=function(t){return arguments.length?(textWrap=t,M):textWrap},M.on=function(){var t=x.on.apply(x,arguments);return t===x?M:t},M}var Rc={colorDomain:[],setup:function(){var t=_i("#interactive__legend").attr("width","225px").attr("height","30px");t.append("g").attr("class","legendQuant");var n=this.returnColorScale(),e=Ic().labelFormat(w(".2s")).labels(this.labelFormatter).scale(n).shapeWidth(30).shapeHeight(10).shapePadding(1).orient("horizontal").labelAlign("end").labelOffset(5);t.select(".legendQuant").call(e),t.selectAll("text").each((function(t,n,e){_i(this).attr("transform","translate(40, 23)")}))},labelFormatter:function(t){var n=t.i,e=t.genLength,r=t.generatedLabels,i=t.labelDelimiter,o=r[n].split(" ".concat(i," "));if(n!==e-1)return o[1]},returnColorScale:function(){return function t(){var n,e=[.5],r=[0,1],i=1;function o(t){return t<=t?r[q(e,t,0,i)]:n}return o.domain=function(t){return arguments.length?(e=at.call(t),i=Math.min(e.length,r.length-1),o):e.slice()},o.range=function(t){return arguments.length?(r=at.call(t),i=Math.min(e.length,r.length-1),o):r.slice()},o.invertExtent=function(t){var n=r.indexOf(t);return[e[n-1],e[n]]},o.unknown=function(t){return arguments.length?(n=t,o):n},o.copy=function(){return t().domain(e).range(r).unknown(n)},J.apply(o,arguments)}().domain(this.colorDomain).range(["#b3e2ff","#9ccaee","#85b1de","#6d9bce","#5584be","#396eae","#13599e"])}};function Hc(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);if(204!==t.status&&205!==t.status)return t.json()}var Yc=function(t,n){return fetch(t,n).then(Hc)},zc=Math.PI,qc=2*zc,$c=180/zc,Vc=zc/180,Bc=Math.abs,Xc=(Math.atan,Math.atan2,Math.cos),Wc=(Math.ceil,Math.exp,Math.floor,Math.log,Math.pow,Math.sin),Gc=(Math.sign,Math.sqrt);Math.tan;function Zc(){}function Jc(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}var Qc=function(t,n,e,r,i){var o,a,u=[],c=[];if(t.forEach((function(t){if(!((n=t.length-1)<=0)){var n,e,r,a,f=t[0],s=t[n];if(a=s,Bc((r=f)[0]-a[0])<1e-6&&Bc(r[1]-a[1])<1e-6){if(!f[2]&&!s[2]){for(i.lineStart(),o=0;o<n;++o)i.point((f=t[o])[0],f[1]);return void i.lineEnd()}s[0]+=2e-6}u.push(e=new Jc(f,t,null,!0)),c.push(e.o=new Jc(f,null,e,!1)),u.push(e=new Jc(s,t,null,!1)),c.push(e.o=new Jc(s,null,e,!0))}})),u.length){for(c.sort(n),Kc(u),Kc(c),o=0,a=c.length;o<a;++o)c[o].e=e=!e;for(var f,s,l=u[0];;){for(var h=l,d=!0;h.v;)if((h=h.n)===l)return;f=h.z,i.lineStart();do{if(h.v=h.o.v=!0,h.e){if(d)for(o=0,a=f.length;o<a;++o)i.point((s=f[o])[0],s[1]);else r(h.x,h.n.x,1,i);h=h.n}else{if(d)for(f=h.p.z,o=f.length-1;o>=0;--o)i.point((s=f[o])[0],s[1]);else r(h.x,h.p.x,-1,i);h=h.p}f=(h=h.o).z,d=!d}while(!h.v);i.lineEnd()}}};function Kc(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}function tf(t,n,e,r){function i(i,o){return t<=i&&i<=e&&n<=o&&o<=r}function o(i,o,u,f){var s=0,l=0;if(null==i||(s=a(i,u))!==(l=a(o,u))||c(i,o)<0^u>0)do{f.point(0===s||3===s?t:e,s>1?r:n)}while((s=(s+u+4)%4)!==l);else f.point(o[0],o[1])}function a(r,i){return Bc(r[0]-t)<1e-6?i>0?0:3:Bc(r[0]-e)<1e-6?i>0?2:1:Bc(r[1]-n)<1e-6?i>0?1:0:i>0?3:2}function u(t,n){return c(t.x,n.x)}function c(t,n){var e=a(t,1),r=a(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}return function(a){var c,f,s,l,h,d,p,v,g,y,m,b,_,w=a,x=(_=[],{point:function(t,n,e){b.push([t,n,e])},lineStart:function(){_.push(b=[])},lineEnd:Zc,rejoin:function(){_.length>1&&_.push(_.pop().concat(_.shift()))},result:function(){var t=_;return _=[],b=null,t}}),M={point:S,lineStart:function(){M.point=A,f&&f.push(s=[]);y=!0,g=!1,p=v=NaN},lineEnd:function(){c&&(A(l,h),d&&g&&x.rejoin(),c.push(x.result()));M.point=S,g&&w.lineEnd()},polygonStart:function(){w=x,c=[],f=[],m=!0},polygonEnd:function(){var n=function(){for(var n=0,e=0,i=f.length;e<i;++e)for(var o,a,u=f[e],c=1,s=u.length,l=u[0],h=l[0],d=l[1];c<s;++c)o=h,a=d,l=u[c],h=l[0],d=l[1],a<=r?d>r&&(h-o)*(r-a)>(d-a)*(t-o)&&++n:d<=r&&(h-o)*(r-a)<(d-a)*(t-o)&&--n;return n}(),e=m&&n,i=(c=function(t){for(var n,e,r,i=t.length,o=-1,a=0;++o<i;)a+=t[o].length;for(e=new Array(a);--i>=0;)for(n=(r=t[i]).length;--n>=0;)e[--a]=r[n];return e}(c)).length;(e||i)&&(a.polygonStart(),e&&(a.lineStart(),o(null,null,1,a),a.lineEnd()),i&&Qc(c,u,n,o,a),a.polygonEnd());w=a,c=f=s=null}};function S(t,n){i(t,n)&&w.point(t,n)}function A(o,a){var u=i(o,a);if(f&&s.push([o,a]),y)l=o,h=a,d=u,y=!1,u&&(w.lineStart(),w.point(o,a));else if(u&&g)w.point(o,a);else{var c=[p=Math.max(-1e9,Math.min(1e9,p)),v=Math.max(-1e9,Math.min(1e9,v))],b=[o=Math.max(-1e9,Math.min(1e9,o)),a=Math.max(-1e9,Math.min(1e9,a))];!function(t,n,e,r,i,o){var a,u=t[0],c=t[1],f=0,s=1,l=n[0]-u,h=n[1]-c;if(a=e-u,l||!(a>0)){if(a/=l,l<0){if(a<f)return;a<s&&(s=a)}else if(l>0){if(a>s)return;a>f&&(f=a)}if(a=i-u,l||!(a<0)){if(a/=l,l<0){if(a>s)return;a>f&&(f=a)}else if(l>0){if(a<f)return;a<s&&(s=a)}if(a=r-c,h||!(a>0)){if(a/=h,h<0){if(a<f)return;a<s&&(s=a)}else if(h>0){if(a>s)return;a>f&&(f=a)}if(a=o-c,h||!(a<0)){if(a/=h,h<0){if(a>s)return;a>f&&(f=a)}else if(h>0){if(a<f)return;a<s&&(s=a)}return f>0&&(t[0]=u+f*l,t[1]=c+f*h),s<1&&(n[0]=u+s*l,n[1]=c+s*h),!0}}}}}(c,b,t,n,e,r)?u&&(w.lineStart(),w.point(o,a),m=!1):(g||(w.lineStart(),w.point(c[0],c[1])),w.point(b[0],b[1]),u||w.lineEnd(),m=!1)}p=o,v=a,g=u}return M}}var nf=function(t){return t};function ef(t){return function(n){var e=new rf;for(var r in t)e[r]=t[r];return e.stream=n,e}}function rf(){}function of(t,n){t&&uf.hasOwnProperty(t.type)&&uf[t.type](t,n)}rf.prototype={constructor:rf,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var af={Feature:function(t,n){of(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)of(e[r].geometry,n)}},uf={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){cf(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)cf(e[r],n,0)},Polygon:function(t,n){ff(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)ff(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)of(e[r],n)}};function cf(t,n,e){var r,i=-1,o=t.length-e;for(n.lineStart();++i<o;)r=t[i],n.point(r[0],r[1],r[2]);n.lineEnd()}function ff(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)cf(t[e],n,1);n.polygonEnd()}var sf=function(t,n){t&&af.hasOwnProperty(t.type)?af[t.type](t,n):of(t,n)},lf=1/0,hf=lf,df=-lf,pf=df;var vf={point:function(t,n){t<lf&&(lf=t);t>df&&(df=t);n<hf&&(hf=n);n>pf&&(pf=n)},lineStart:Zc,lineEnd:Zc,polygonStart:Zc,polygonEnd:Zc,result:function(){var t=[[lf,hf],[df,pf]];return df=pf=-(hf=lf=1/0),t}};function gf(t,n,e){var r=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=r&&t.clipExtent(null),sf(e,t.stream(vf)),n(vf.result()),null!=r&&t.clipExtent(r),t}function yf(t,n,e){return gf(t,(function(e){var r=n[1][0]-n[0][0],i=n[1][1]-n[0][1],o=Math.min(r/(e[1][0]-e[0][0]),i/(e[1][1]-e[0][1])),a=+n[0][0]+(r-o*(e[1][0]+e[0][0]))/2,u=+n[0][1]+(i-o*(e[1][1]+e[0][1]))/2;t.scale(150*o).translate([a,u])}),e)}var mf=function(){var t,n,e,r,i,o,a,u=1,c=0,f=0,s=1,l=1,h=0,d=null,p=1,v=1,g=ef({point:function(t,n){var e=b([t,n]);this.stream.point(e[0],e[1])}}),y=nf;function m(){return p=u*s,v=u*l,o=a=null,b}function b(e){var r=e[0]*p,i=e[1]*v;if(h){var o=i*t-r*n;r=r*t+i*n,i=o}return[r+c,i+f]}return b.invert=function(e){var r=e[0]-c,i=e[1]-f;if(h){var o=i*t+r*n;r=r*t-i*n,i=o}return[r/p,i/v]},b.stream=function(t){return o&&a===t?o:o=g(y(a=t))},b.postclip=function(t){return arguments.length?(y=t,d=e=r=i=null,m()):y},b.clipExtent=function(t){return arguments.length?(y=null==t?(d=e=r=i=null,nf):tf(d=+t[0][0],e=+t[0][1],r=+t[1][0],i=+t[1][1]),m()):null==d?null:[[d,e],[r,i]]},b.scale=function(t){return arguments.length?(u=+t,m()):u},b.translate=function(t){return arguments.length?(c=+t[0],f=+t[1],m()):[c,f]},b.angle=function(e){return arguments.length?(n=Wc(h=e%360*Vc),t=Xc(h),m()):h*$c},b.reflectX=function(t){return arguments.length?(s=t?-1:1,m()):s<0},b.reflectY=function(t){return arguments.length?(l=t?-1:1,m()):l<0},b.fitExtent=function(t,n){return yf(b,t,n)},b.fitSize=function(t,n){return function(t,n,e){return yf(t,[[0,0],n],e)}(b,t,n)},b.fitWidth=function(t,n){return function(t,n,e){return gf(t,(function(e){var r=+n,i=r/(e[1][0]-e[0][0]),o=(r-i*(e[1][0]+e[0][0]))/2,a=-i*e[0][1];t.scale(150*i).translate([o,a])}),e)}(b,t,n)},b.fitHeight=function(t,n){return function(t,n,e){return gf(t,(function(e){var r=+n,i=r/(e[1][1]-e[0][1]),o=-i*e[0][0],a=(r-i*(e[1][1]+e[0][1]))/2;t.scale(150*i).translate([o,a])}),e)}(b,t,n)},b},bf=function(){return new _f};function _f(){this.reset()}_f.prototype={constructor:_f,reset:function(){this.s=this.t=0},add:function(t){xf(wf,t,this.t),xf(this,wf.s,this.s),this.s?this.t+=wf.t:this.s=wf.t},valueOf:function(){return this.s}};var wf=new _f;function xf(t,n,e){var r=t.s=n+e,i=r-n,o=r-i;t.t=n-o+(e-i)}var Mf,Sf,Af,Ef,Tf=bf(),Cf=bf(),kf={point:Zc,lineStart:Zc,lineEnd:Zc,polygonStart:function(){kf.lineStart=Of,kf.lineEnd=Pf},polygonEnd:function(){kf.lineStart=kf.lineEnd=kf.point=Zc,Tf.add(Bc(Cf)),Cf.reset()},result:function(){var t=Tf/2;return Tf.reset(),t}};function Of(){kf.point=Nf}function Nf(t,n){kf.point=jf,Mf=Af=t,Sf=Ef=n}function jf(t,n){Cf.add(Ef*t-Af*n),Af=t,Ef=n}function Pf(){jf(Mf,Sf)}var Df,Lf,Ff,Uf,If=kf,Rf=0,Hf=0,Yf=0,zf=0,qf=0,$f=0,Vf=0,Bf=0,Xf=0,Wf={point:Gf,lineStart:Zf,lineEnd:Kf,polygonStart:function(){Wf.lineStart=ts,Wf.lineEnd=ns},polygonEnd:function(){Wf.point=Gf,Wf.lineStart=Zf,Wf.lineEnd=Kf},result:function(){var t=Xf?[Vf/Xf,Bf/Xf]:$f?[zf/$f,qf/$f]:Yf?[Rf/Yf,Hf/Yf]:[NaN,NaN];return Rf=Hf=Yf=zf=qf=$f=Vf=Bf=Xf=0,t}};function Gf(t,n){Rf+=t,Hf+=n,++Yf}function Zf(){Wf.point=Jf}function Jf(t,n){Wf.point=Qf,Gf(Ff=t,Uf=n)}function Qf(t,n){var e=t-Ff,r=n-Uf,i=Gc(e*e+r*r);zf+=i*(Ff+t)/2,qf+=i*(Uf+n)/2,$f+=i,Gf(Ff=t,Uf=n)}function Kf(){Wf.point=Gf}function ts(){Wf.point=es}function ns(){rs(Df,Lf)}function es(t,n){Wf.point=rs,Gf(Df=Ff=t,Lf=Uf=n)}function rs(t,n){var e=t-Ff,r=n-Uf,i=Gc(e*e+r*r);zf+=i*(Ff+t)/2,qf+=i*(Uf+n)/2,$f+=i,Vf+=(i=Uf*t-Ff*n)*(Ff+t),Bf+=i*(Uf+n),Xf+=3*i,Gf(Ff=t,Uf=n)}var is=Wf;function os(t){this._context=t}os.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,qc)}},result:Zc};var as,us,cs,fs,ss,ls=bf(),hs={point:Zc,lineStart:function(){hs.point=ds},lineEnd:function(){as&&ps(us,cs),hs.point=Zc},polygonStart:function(){as=!0},polygonEnd:function(){as=null},result:function(){var t=+ls;return ls.reset(),t}};function ds(t,n){hs.point=ps,us=fs=t,cs=ss=n}function ps(t,n){fs-=t,ss-=n,ls.add(Gc(fs*fs+ss*ss)),fs=t,ss=n}var vs=hs;function gs(){this._string=[]}function ys(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}gs.prototype={_radius:4.5,_circle:ys(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=ys(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};function ms(t,n,e,r,i,o,a){try{var u=t[o](a),c=u.value}catch(t){return void e(t)}u.done?n(c):Promise.resolve(c).then(r,i)}function bs(t){return function(){var n=this,e=arguments;return new Promise((function(r,i){var o=t.apply(n,e);function a(t){ms(o,r,i,a,u,"next",t)}function u(t){ms(o,r,i,a,u,"throw",t)}a(void 0)}))}}var _s,ws=function(){var t,n={top:0,right:5,bottom:0,left:5},e=mf().reflectY(!0),r=function(t,n){var e,r,i=4.5;function o(t){return t&&("function"==typeof i&&r.pointRadius(+i.apply(this,arguments)),sf(t,e(r))),r.result()}return o.area=function(t){return sf(t,e(If)),If.result()},o.measure=function(t){return sf(t,e(vs)),vs.result()},o.bounds=function(t){return sf(t,e(vf)),vf.result()},o.centroid=function(t){return sf(t,e(is)),is.result()},o.projection=function(n){return arguments.length?(e=null==n?(t=null,nf):(t=n).stream,o):t},o.context=function(t){return arguments.length?(r=null==t?(n=null,new gs):new os(n=t),"function"!=typeof i&&r.pointRadius(i),o):n},o.pointRadius=function(t){return arguments.length?(i="function"==typeof t?t:(r.pointRadius(+t),+t),o):i},o.projection(t).context(n)}(),i=200,o=200;function a(a){var c=a.datum();!function(t){var n=t.container,e=t.data;n.selectAll("svg").data([e]).enter().append("svg").append("g").append("g").attr("class","g-plot")}({container:a,data:c}),function(a){var c=a.container,f=a.data;e.scale(.1*i).translate([i/2,o/2]),r.projection(e);var s=c.select("svg").attr("viewBox","0 0 "+(i+n.left+n.right)+" "+(o+n.top+n.bottom)).select("g").attr("transform","translate("+n.left+","+n.top+")").select(".g-plot").selectAll("path").data(f.features);s.enter().append("path").attr("class","map-province").attr("data-id",(function(t){return t.properties.code})).attr("data-name",(function(t){return t.properties.province})).attr("d",r).on("mouseover",u.mouseover).on("mouseleave",u.mouseleave).merge(s).attr("fill",(function(n){return t(n.properties.value)}))}({container:a,data:c})}var u={mouseover:function(t){var n=t.properties.code;wi('.chart:not([data-id="'+n+'"]), .map-province:not([data-id="'+n+'"])').classed("is-faded",!0),wi('.chart[data-id="'+n+'"], .map-province[data-id="'+n+'"]').classed("is-highlighted",!0)},mouseleave:function(){wi(".chart, .map-province").classed("is-faded",!1).classed("is-highlighted",!1)}};return a.width=function(){return arguments.length?(i=(arguments.length<=0?void 0:arguments[0])-n.left-n.right,a):i},a.height=function(){return arguments.length?(o=(arguments.length<=0?void 0:arguments[0])-n.top-n.bottom,a):o},a.scaleColor=function(){return arguments.length?(t=arguments.length<=0?void 0:arguments[0],a):t},a}();function xs(){return(xs=bs(regeneratorRuntime.mark((function t(n){var e;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Yc(n,(function(t){return t})).then((function(t){return t}));case 2:return e=t.sent,t.abrupt("return",e);case 4:case"end":return t.stop()}}),t)})))).apply(this,arguments)}var Ms={init:function(t){(_s=_i(t.container)).datum(t.data),ws.scaleColor(t.scaleColor),_s.call(ws)},loadMapData:function(t){return xs.apply(this,arguments)}};e(132);function Ss(t,n,e,r,i,o,a){try{var u=t[o](a),c=u.value}catch(t){return void e(t)}u.done?n(c):Promise.resolve(c).then(r,i)}function As(t){return function(){var n=this,e=arguments;return new Promise((function(r,i){var o=t.apply(n,e);function a(t){Ss(o,r,i,a,u,"next",t)}function u(t){Ss(o,r,i,a,u,"throw",t)}a(void 0)}))}}var Es,Ts,Cs=r.calculate();function ks(){return(ks=As(regeneratorRuntime.mark((function t(n,e){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,ba(n);case 2:return Es=t.sent,t.next=5,Ms.loadMapData(e);case 5:Ts=t.sent,Os();case 7:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function Os(){var t,n,e=(t=Es.years.idp_total.slice(-1)[0],(n=Es.values.slice(1).reduce((function(n,e){var r=e.values.filter((function(n){return n.year===t})).map((function(t){return t}));return n[e.id]=r,n.all.push(r),n}),{all:[]})).all.sort((function(t,n){return t-n})),n.range=function(){for(var t=[],n=Es.values,e=(n[11].values[0].idp_total,n[12].values[1].idp_total,i.idp_total.groupSize),r=15e4;r<=9e5;r+=e)t.push(r);return t}(n.all),n);Rc.colorDomain=e.range,Rc.setup(),Jo.init({data:Es.values,container:"#interactive__charts",years:Es.years.idp_total,currentCategory:"idp_total",scaleColor:Rc.returnColorScale()}),r.isMobile()||function(t){Ts.features.forEach((function(t){return t.properties.value=t.properties.idp_2019})),Ms.init({data:Ts,container:"#interactive__map",colorDomain:t.range,scaleColor:Rc.returnColorScale()})}(e)}window.addEventListener("DOMContentLoaded",(function(){!function(t,n){ks.apply(this,arguments)}("./data/2020_data.csv","./data/syria.geojson")})),window.addEventListener("resize",(function(){var t=r.calculate();Cs!=t&&(Cs=t,Os())}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,