!function(t){var e=window.webpackHotUpdate;window.webpackHotUpdate=function(t,n){!function(t,e){if(!x[t]||!w[t])return;for(var n in w[t]=!1,e)Object.prototype.hasOwnProperty.call(e,n)&&(d[n]=e[n]);0==--y&&0===m&&A()}(t,n),e&&e(t,n)};var n,r=!0,i="67311c295cde76f623ba",o={},a=[],u=[];function c(t){var e=j[t];if(!e)return k;var r=function(r){return e.hot.active?(j[r]?-1===j[r].parents.indexOf(t)&&j[r].parents.push(t):(a=[t],n=r),-1===e.children.indexOf(r)&&e.children.push(r)):(console.warn("[HMR] unexpected require("+r+") from disposed module "+t),a=[]),k(r)},i=function(t){return{configurable:!0,enumerable:!0,get:function(){return k[t]},set:function(e){k[t]=e}}};for(var o in k)Object.prototype.hasOwnProperty.call(k,o)&&"e"!==o&&"t"!==o&&Object.defineProperty(r,o,i(o));return r.e=function(t){return"ready"===l&&h("prepare"),m++,k.e(t).then(e,(function(t){throw e(),t}));function e(){m--,"prepare"===l&&(b[t]||E(t),0===m&&0===y&&A())}},r.t=function(t,e){return 1&e&&(t=r(t)),k.t(t,-2&e)},r}function s(e){var r={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_selfInvalidated:!1,_disposeHandlers:[],_main:n!==e,active:!0,accept:function(t,e){if(void 0===t)r._selfAccepted=!0;else if("function"==typeof t)r._selfAccepted=t;else if("object"==typeof t)for(var n=0;n<t.length;n++)r._acceptedDependencies[t[n]]=e||function(){};else r._acceptedDependencies[t]=e||function(){}},decline:function(t){if(void 0===t)r._selfDeclined=!0;else if("object"==typeof t)for(var e=0;e<t.length;e++)r._declinedDependencies[t[e]]=!0;else r._declinedDependencies[t]=!0},dispose:function(t){r._disposeHandlers.push(t)},addDisposeHandler:function(t){r._disposeHandlers.push(t)},removeDisposeHandler:function(t){var e=r._disposeHandlers.indexOf(t);e>=0&&r._disposeHandlers.splice(e,1)},invalidate:function(){switch(this._selfInvalidated=!0,l){case"idle":(d={})[e]=t[e],h("ready");break;case"ready":T(e);break;case"prepare":case"check":case"dispose":case"apply":(g=g||[]).push(e)}},check:M,apply:S,status:function(t){if(!t)return l;f.push(t)},addStatusHandler:function(t){f.push(t)},removeStatusHandler:function(t){var e=f.indexOf(t);e>=0&&f.splice(e,1)},data:o[e]};return n=void 0,r}var f=[],l="idle";function h(t){l=t;for(var e=0;e<f.length;e++)f[e].call(null,t)}var p,d,v,g,y=0,m=0,b={},w={},x={};function _(t){return+t+""===t?+t:t}function M(t){if("idle"!==l)throw new Error("check() is only allowed in idle status");return r=t,h("check"),(e=1e4,e=e||1e4,new Promise((function(t,n){if("undefined"==typeof XMLHttpRequest)return n(new Error("No browser support"));try{var r=new XMLHttpRequest,o=k.p+""+i+".hot-update.json";r.open("GET",o,!0),r.timeout=e,r.send(null)}catch(t){return n(t)}r.onreadystatechange=function(){if(4===r.readyState)if(0===r.status)n(new Error("Manifest request to "+o+" timed out."));else if(404===r.status)t();else if(200!==r.status&&304!==r.status)n(new Error("Manifest request to "+o+" failed."));else{try{var e=JSON.parse(r.responseText)}catch(t){return void n(t)}t(e)}}}))).then((function(t){if(!t)return h(O()?"ready":"idle"),null;w={},b={},x=t.c,v=t.h,h("prepare");var e=new Promise((function(t,e){p={resolve:t,reject:e}}));d={};return E(0),"prepare"===l&&0===m&&0===y&&A(),e}));var e}function E(t){x[t]?(w[t]=!0,y++,function(t){var e=document.createElement("script");e.charset="utf-8",e.src=k.p+""+t+"."+i+".hot-update.js",document.head.appendChild(e)}(t)):b[t]=!0}function A(){h("ready");var t=p;if(p=null,t)if(r)Promise.resolve().then((function(){return S(r)})).then((function(e){t.resolve(e)}),(function(e){t.reject(e)}));else{var e=[];for(var n in d)Object.prototype.hasOwnProperty.call(d,n)&&e.push(_(n));t.resolve(e)}}function S(e){if("ready"!==l)throw new Error("apply() is only allowed in ready status");return function e(r){var u,c,s,f,l;function p(t){for(var e=[t],n={},r=e.map((function(t){return{chain:[t],id:t}}));r.length>0;){var i=r.pop(),o=i.id,a=i.chain;if((f=j[o])&&(!f.hot._selfAccepted||f.hot._selfInvalidated)){if(f.hot._selfDeclined)return{type:"self-declined",chain:a,moduleId:o};if(f.hot._main)return{type:"unaccepted",chain:a,moduleId:o};for(var u=0;u<f.parents.length;u++){var c=f.parents[u],s=j[c];if(s){if(s.hot._declinedDependencies[o])return{type:"declined",chain:a.concat([c]),moduleId:o,parentId:c};-1===e.indexOf(c)&&(s.hot._acceptedDependencies[o]?(n[c]||(n[c]=[]),y(n[c],[o])):(delete n[c],e.push(c),r.push({chain:a.concat([c]),id:c})))}}}}return{type:"accepted",moduleId:t,outdatedModules:e,outdatedDependencies:n}}function y(t,e){for(var n=0;n<e.length;n++){var r=e[n];-1===t.indexOf(r)&&t.push(r)}}O();var m={},b=[],w={},M=function(){console.warn("[HMR] unexpected require("+A.moduleId+") to disposed module")};for(var E in d)if(Object.prototype.hasOwnProperty.call(d,E)){var A;l=_(E),A=d[E]?p(l):{type:"disposed",moduleId:E};var S=!1,T=!1,C=!1,D="";switch(A.chain&&(D="\nUpdate propagation: "+A.chain.join(" -> ")),A.type){case"self-declined":r.onDeclined&&r.onDeclined(A),r.ignoreDeclined||(S=new Error("Aborted because of self decline: "+A.moduleId+D));break;case"declined":r.onDeclined&&r.onDeclined(A),r.ignoreDeclined||(S=new Error("Aborted because of declined dependency: "+A.moduleId+" in "+A.parentId+D));break;case"unaccepted":r.onUnaccepted&&r.onUnaccepted(A),r.ignoreUnaccepted||(S=new Error("Aborted because "+l+" is not accepted"+D));break;case"accepted":r.onAccepted&&r.onAccepted(A),T=!0;break;case"disposed":r.onDisposed&&r.onDisposed(A),C=!0;break;default:throw new Error("Unexception type "+A.type)}if(S)return h("abort"),Promise.reject(S);if(T)for(l in w[l]=d[l],y(b,A.outdatedModules),A.outdatedDependencies)Object.prototype.hasOwnProperty.call(A.outdatedDependencies,l)&&(m[l]||(m[l]=[]),y(m[l],A.outdatedDependencies[l]));C&&(y(b,[A.moduleId]),w[l]=M)}var P,N=[];for(c=0;c<b.length;c++)l=b[c],j[l]&&j[l].hot._selfAccepted&&w[l]!==M&&!j[l].hot._selfInvalidated&&N.push({module:l,parents:j[l].parents.slice(),errorHandler:j[l].hot._selfAccepted});h("dispose"),Object.keys(x).forEach((function(t){!1===x[t]&&function(t){delete installedChunks[t]}(t)}));var L,F,I=b.slice();for(;I.length>0;)if(l=I.pop(),f=j[l]){var U={},R=f.hot._disposeHandlers;for(s=0;s<R.length;s++)(u=R[s])(U);for(o[l]=U,f.hot.active=!1,delete j[l],delete m[l],s=0;s<f.children.length;s++){var H=j[f.children[s]];H&&((P=H.parents.indexOf(l))>=0&&H.parents.splice(P,1))}}for(l in m)if(Object.prototype.hasOwnProperty.call(m,l)&&(f=j[l]))for(F=m[l],s=0;s<F.length;s++)L=F[s],(P=f.children.indexOf(L))>=0&&f.children.splice(P,1);h("apply"),void 0!==v&&(i=v,v=void 0);for(l in d=void 0,w)Object.prototype.hasOwnProperty.call(w,l)&&(t[l]=w[l]);var q=null;for(l in m)if(Object.prototype.hasOwnProperty.call(m,l)&&(f=j[l])){F=m[l];var V=[];for(c=0;c<F.length;c++)if(L=F[c],u=f.hot._acceptedDependencies[L]){if(-1!==V.indexOf(u))continue;V.push(u)}for(c=0;c<V.length;c++){u=V[c];try{u(F)}catch(t){r.onErrored&&r.onErrored({type:"accept-errored",moduleId:l,dependencyId:F[c],error:t}),r.ignoreErrored||q||(q=t)}}}for(c=0;c<N.length;c++){var Y=N[c];l=Y.module,a=Y.parents,n=l;try{k(l)}catch(t){if("function"==typeof Y.errorHandler)try{Y.errorHandler(t)}catch(e){r.onErrored&&r.onErrored({type:"self-accept-error-handler-errored",moduleId:l,error:e,originalError:t}),r.ignoreErrored||q||(q=e),q||(q=t)}else r.onErrored&&r.onErrored({type:"self-accept-errored",moduleId:l,error:t}),r.ignoreErrored||q||(q=t)}}if(q)return h("fail"),Promise.reject(q);if(g)return e(r).then((function(t){return b.forEach((function(e){t.indexOf(e)<0&&t.push(e)})),t}));return h("idle"),new Promise((function(t){t(b)}))}(e=e||{})}function O(){if(g)return d||(d={}),g.forEach(T),g=void 0,!0}function T(e){Object.prototype.hasOwnProperty.call(d,e)||(d[e]=t[e])}var j={};function k(e){if(j[e])return j[e].exports;var n=j[e]={i:e,l:!1,exports:{},hot:s(e),parents:(u=a,a=[],u),children:[]};return t[e].call(n.exports,n,n.exports,c(e)),n.l=!0,n.exports}k.m=t,k.c=j,k.d=function(t,e,n){k.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},k.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},k.t=function(t,e){if(1&e&&(t=k(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(k.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)k.d(n,r,function(e){return t[e]}.bind(null,r));return n},k.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return k.d(e,"a",e),e},k.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},k.p="",k.h=function(){return i},c(134)(k.s=134)}([function(t,e,n){var r=n(34)("wks"),i=n(26),o=n(2).Symbol,a="function"==typeof o;(t.exports=function(t){return r[t]||(r[t]=a&&o[t]||(a?o:i)("Symbol."+t))}).store=r},function(t,e,n){var r=n(2),i=n(14),o=n(12),a=n(9),u=n(11),c=function(t,e,n){var s,f,l,h,p=t&c.F,d=t&c.G,v=t&c.S,g=t&c.P,y=t&c.B,m=d?r:v?r[e]||(r[e]={}):(r[e]||{}).prototype,b=d?i:i[e]||(i[e]={}),w=b.prototype||(b.prototype={});for(s in d&&(n=e),n)l=((f=!p&&m&&void 0!==m[s])?m:n)[s],h=y&&f?u(l,r):g&&"function"==typeof l?u(Function.call,l):l,m&&a(m,s,l,t&c.U),b[s]!=l&&o(b,s,h),g&&w[s]!=l&&(w[s]=l)};r.core=i,c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},function(t,e){var n=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(t,e,n){t.exports=!n(7)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(t,e,n){var r=n(5),i=n(64),o=n(44),a=Object.defineProperty;e.f=n(3)?Object.defineProperty:function(t,e,n){if(r(t),e=o(e,!0),r(n),i)try{return a(t,e,n)}catch(t){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(t[e]=n.value),t}},function(t,e,n){var r=n(6);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,e){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,e){t.exports=function(t){try{return!!t()}catch(t){return!0}}},,function(t,e,n){var r=n(2),i=n(12),o=n(15),a=n(26)("src"),u=n(98),c=(""+u).split("toString");n(14).inspectSource=function(t){return u.call(t)},(t.exports=function(t,e,n,u){var s="function"==typeof n;s&&(o(n,"name")||i(n,"name",e)),t[e]!==n&&(s&&(o(n,a)||i(n,a,t[e]?""+t[e]:c.join(String(e)))),t===r?t[e]=n:u?t[e]?t[e]=n:i(t,e,n):(delete t[e],i(t,e,n)))})(Function.prototype,"toString",(function(){return"function"==typeof this&&this[a]||u.call(this)}))},,function(t,e,n){var r=n(18);t.exports=function(t,e,n){if(r(t),void 0===e)return t;switch(n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)}}return function(){return t.apply(e,arguments)}}},function(t,e,n){var r=n(4),i=n(27);t.exports=n(3)?function(t,e,n){return r.f(t,e,i(1,n))}:function(t,e,n){return t[e]=n,t}},function(t,e,n){var r=n(30);t.exports=function(t){return Object(r(t))}},function(t,e){var n=t.exports={version:"2.6.11"};"number"==typeof __e&&(__e=n)},function(t,e){var n={}.hasOwnProperty;t.exports=function(t,e){return n.call(t,e)}},function(t,e,n){var r=n(35),i=Math.min;t.exports=function(t){return t>0?i(r(t),9007199254740991):0}},function(t,e,n){var r=n(53),i=n(30);t.exports=function(t){return r(i(t))}},function(t,e){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,e){var n={}.toString;t.exports=function(t){return n.call(t).slice(8,-1)}},function(t,e,n){"use strict";var r=n(7);t.exports=function(t,e){return!!t&&r((function(){e?t.call(null,(function(){}),1):t.call(null)}))}},function(t,e,n){"use strict";var r=n(73),i=n(74),o=n(28),a=n(17);t.exports=n(56)(Array,"Array",(function(t,e){this._t=a(t),this._i=0,this._k=e}),(function(){var t=this._t,e=this._k,n=this._i++;return!t||n>=t.length?(this._t=void 0,i(1)):i(0,"keys"==e?n:"values"==e?t[n]:[n,t[n]])}),"values"),o.Arguments=o.Array,r("keys"),r("values"),r("entries")},function(t,e,n){var r=n(75),i=n(60);t.exports=Object.keys||function(t){return r(t,i)}},function(t,e,n){"use strict";var r=n(33),i={};i[n(0)("toStringTag")]="z",i+""!="[object z]"&&n(9)(Object.prototype,"toString",(function(){return"[object "+r(this)+"]"}),!0)},,function(t,e){t.exports=!1},function(t,e){var n=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++n+r).toString(36))}},function(t,e){t.exports=function(t,e){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:e}}},function(t,e){t.exports={}},function(t,e,n){var r=n(4).f,i=n(15),o=n(0)("toStringTag");t.exports=function(t,e,n){t&&!i(t=n?t:t.prototype,o)&&r(t,o,{configurable:!0,value:e})}},function(t,e){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,e,n){for(var r=n(21),i=n(22),o=n(9),a=n(2),u=n(12),c=n(28),s=n(0),f=s("iterator"),l=s("toStringTag"),h=c.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},d=i(p),v=0;v<d.length;v++){var g,y=d[v],m=p[y],b=a[y],w=b&&b.prototype;if(w&&(w[f]||u(w,f,h),w[l]||u(w,l,y),c[y]=h,m))for(g in r)w[g]||o(w,g,r[g],!0)}},,function(t,e,n){var r=n(19),i=n(0)("toStringTag"),o="Arguments"==r(function(){return arguments}());t.exports=function(t){var e,n,a;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(n=function(t,e){try{return t[e]}catch(t){}}(e=Object(t),i))?n:o?r(e):"Object"==(a=r(e))&&"function"==typeof e.callee?"Arguments":a}},function(t,e,n){var r=n(14),i=n(2),o=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(t.exports=function(t,e){return o[t]||(o[t]=void 0!==e?e:{})})("versions",[]).push({version:r.version,mode:n(25)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,e){var n=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:n)(t)}},function(t,e,n){"use strict";var r=n(1),i=n(52)(1);r(r.P+r.F*!n(20)([].map,!0),"Array",{map:function(t){return i(this,t,arguments[1])}})},function(t,e,n){"use strict";var r=n(5);t.exports=function(){var t=r(this),e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),t.unicode&&(e+="u"),t.sticky&&(e+="y"),e}},function(t,e){e.f={}.propertyIsEnumerable},,,function(t,e,n){var r=function(t){"use strict";var e=Object.prototype,n=e.hasOwnProperty,r="function"==typeof Symbol?Symbol:{},i=r.iterator||"@@iterator",o=r.asyncIterator||"@@asyncIterator",a=r.toStringTag||"@@toStringTag";function u(t,e,n,r){var i=e&&e.prototype instanceof f?e:f,o=Object.create(i.prototype),a=new _(r||[]);return o._invoke=function(t,e,n){var r="suspendedStart";return function(i,o){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===i)throw o;return E()}for(n.method=i,n.arg=o;;){var a=n.delegate;if(a){var u=b(a,n);if(u){if(u===s)continue;return u}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var f=c(t,e,n);if("normal"===f.type){if(r=n.done?"completed":"suspendedYield",f.arg===s)continue;return{value:f.arg,done:n.done}}"throw"===f.type&&(r="completed",n.method="throw",n.arg=f.arg)}}}(t,n,a),o}function c(t,e,n){try{return{type:"normal",arg:t.call(e,n)}}catch(t){return{type:"throw",arg:t}}}t.wrap=u;var s={};function f(){}function l(){}function h(){}var p={};p[i]=function(){return this};var d=Object.getPrototypeOf,v=d&&d(d(M([])));v&&v!==e&&n.call(v,i)&&(p=v);var g=h.prototype=f.prototype=Object.create(p);function y(t){["next","throw","return"].forEach((function(e){t[e]=function(t){return this._invoke(e,t)}}))}function m(t,e){var r;this._invoke=function(i,o){function a(){return new e((function(r,a){!function r(i,o,a,u){var s=c(t[i],t,o);if("throw"!==s.type){var f=s.arg,l=f.value;return l&&"object"==typeof l&&n.call(l,"__await")?e.resolve(l.__await).then((function(t){r("next",t,a,u)}),(function(t){r("throw",t,a,u)})):e.resolve(l).then((function(t){f.value=t,a(f)}),(function(t){return r("throw",t,a,u)}))}u(s.arg)}(i,o,r,a)}))}return r=r?r.then(a,a):a()}}function b(t,e){var n=t.iterator[e.method];if(void 0===n){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=void 0,b(t,e),"throw"===e.method))return s;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return s}var r=c(n,t.iterator,e.arg);if("throw"===r.type)return e.method="throw",e.arg=r.arg,e.delegate=null,s;var i=r.arg;return i?i.done?(e[t.resultName]=i.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,s):i:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,s)}function w(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function x(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function _(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(w,this),this.reset(!0)}function M(t){if(t){var e=t[i];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,o=function e(){for(;++r<t.length;)if(n.call(t,r))return e.value=t[r],e.done=!1,e;return e.value=void 0,e.done=!0,e};return o.next=o}}return{next:E}}function E(){return{value:void 0,done:!0}}return l.prototype=g.constructor=h,h.constructor=l,h[a]=l.displayName="GeneratorFunction",t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===l||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,h):(t.__proto__=h,a in t||(t[a]="GeneratorFunction")),t.prototype=Object.create(g),t},t.awrap=function(t){return{__await:t}},y(m.prototype),m.prototype[o]=function(){return this},t.AsyncIterator=m,t.async=function(e,n,r,i,o){void 0===o&&(o=Promise);var a=new m(u(e,n,r,i),o);return t.isGeneratorFunction(n)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},y(g),g[a]="Generator",g[i]=function(){return this},g.toString=function(){return"[object Generator]"},t.keys=function(t){var e=[];for(var n in t)e.push(n);return e.reverse(),function n(){for(;e.length;){var r=e.pop();if(r in t)return n.value=r,n.done=!1,n}return n.done=!0,n}},t.values=M,_.prototype={constructor:_,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(x),!t)for(var e in this)"t"===e.charAt(0)&&n.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function r(n,r){return a.type="throw",a.arg=t,e.next=n,r&&(e.method="next",e.arg=void 0),!!r}for(var i=this.tryEntries.length-1;i>=0;--i){var o=this.tryEntries[i],a=o.completion;if("root"===o.tryLoc)return r("end");if(o.tryLoc<=this.prev){var u=n.call(o,"catchLoc"),c=n.call(o,"finallyLoc");if(u&&c){if(this.prev<o.catchLoc)return r(o.catchLoc,!0);if(this.prev<o.finallyLoc)return r(o.finallyLoc)}else if(u){if(this.prev<o.catchLoc)return r(o.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return r(o.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var i=this.tryEntries[r];if(i.tryLoc<=this.prev&&n.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=t,a.arg=e,o?(this.method="next",this.next=o.finallyLoc,s):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),s},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.finallyLoc===t)return this.complete(n.completion,n.afterLoc),x(n),s}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var n=this.tryEntries[e];if(n.tryLoc===t){var r=n.completion;if("throw"===r.type){var i=r.arg;x(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:M(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=void 0),s}},t}(t.exports);try{regeneratorRuntime=r}catch(t){Function("r","regeneratorRuntime = r")(r)}},function(t,e,n){"use strict";var r,i,o,a,u=n(25),c=n(2),s=n(11),f=n(33),l=n(1),h=n(6),p=n(18),d=n(45),v=n(46),g=n(68),y=n(69).set,m=n(100)(),b=n(71),w=n(101),x=n(102),_=n(103),M=c.TypeError,E=c.process,A=E&&E.versions,S=A&&A.v8||"",O=c.Promise,T="process"==f(E),j=function(){},k=i=b.f,C=!!function(){try{var t=O.resolve(1),e=(t.constructor={})[n(0)("species")]=function(t){t(j,j)};return(T||"function"==typeof PromiseRejectionEvent)&&t.then(j)instanceof e&&0!==S.indexOf("6.6")&&-1===x.indexOf("Chrome/66")}catch(t){}}(),D=function(t){var e;return!(!h(t)||"function"!=typeof(e=t.then))&&e},P=function(t,e){if(!t._n){t._n=!0;var n=t._c;m((function(){for(var r=t._v,i=1==t._s,o=0,a=function(e){var n,o,a,u=i?e.ok:e.fail,c=e.resolve,s=e.reject,f=e.domain;try{u?(i||(2==t._h&&F(t),t._h=1),!0===u?n=r:(f&&f.enter(),n=u(r),f&&(f.exit(),a=!0)),n===e.promise?s(M("Promise-chain cycle")):(o=D(n))?o.call(n,c,s):c(n)):s(r)}catch(t){f&&!a&&f.exit(),s(t)}};n.length>o;)a(n[o++]);t._c=[],t._n=!1,e&&!t._h&&N(t)}))}},N=function(t){y.call(c,(function(){var e,n,r,i=t._v,o=L(t);if(o&&(e=w((function(){T?E.emit("unhandledRejection",i,t):(n=c.onunhandledrejection)?n({promise:t,reason:i}):(r=c.console)&&r.error&&r.error("Unhandled promise rejection",i)})),t._h=T||L(t)?2:1),t._a=void 0,o&&e.e)throw e.v}))},L=function(t){return 1!==t._h&&0===(t._a||t._c).length},F=function(t){y.call(c,(function(){var e;T?E.emit("rejectionHandled",t):(e=c.onrejectionhandled)&&e({promise:t,reason:t._v})}))},I=function(t){var e=this;e._d||(e._d=!0,(e=e._w||e)._v=t,e._s=2,e._a||(e._a=e._c.slice()),P(e,!0))},U=function(t){var e,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===t)throw M("Promise can't be resolved itself");(e=D(t))?m((function(){var r={_w:n,_d:!1};try{e.call(t,s(U,r,1),s(I,r,1))}catch(t){I.call(r,t)}})):(n._v=t,n._s=1,P(n,!1))}catch(t){I.call({_w:n,_d:!1},t)}}};C||(O=function(t){d(this,O,"Promise","_h"),p(t),r.call(this);try{t(s(U,this,1),s(I,this,1))}catch(t){I.call(this,t)}},(r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(47)(O.prototype,{then:function(t,e){var n=k(g(this,O));return n.ok="function"!=typeof t||t,n.fail="function"==typeof e&&e,n.domain=T?E.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&P(this,!1),n.promise},catch:function(t){return this.then(void 0,t)}}),o=function(){var t=new r;this.promise=t,this.resolve=s(U,t,1),this.reject=s(I,t,1)},b.f=k=function(t){return t===O||t===a?new o(t):i(t)}),l(l.G+l.W+l.F*!C,{Promise:O}),n(29)(O,"Promise"),n(48)("Promise"),a=n(14).Promise,l(l.S+l.F*!C,"Promise",{reject:function(t){var e=k(this);return(0,e.reject)(t),e.promise}}),l(l.S+l.F*(u||!C),"Promise",{resolve:function(t){return _(u&&this===a?O:this,t)}}),l(l.S+l.F*!(C&&n(49)((function(t){O.all(t).catch(j)}))),"Promise",{all:function(t){var e=this,n=k(e),r=n.resolve,i=n.reject,o=w((function(){var n=[],o=0,a=1;v(t,!1,(function(t){var u=o++,c=!1;n.push(void 0),a++,e.resolve(t).then((function(t){c||(c=!0,n[u]=t,--a||r(n))}),i)})),--a||r(n)}));return o.e&&i(o.v),n.promise},race:function(t){var e=this,n=k(e),r=n.reject,i=w((function(){v(t,!1,(function(t){e.resolve(t).then(n.resolve,r)}))}));return i.e&&r(i.v),n.promise}})},function(t,e,n){var r=n(6),i=n(2).document,o=r(i)&&r(i.createElement);t.exports=function(t){return o?i.createElement(t):{}}},function(t,e,n){var r=n(6);t.exports=function(t,e){if(!r(t))return t;var n,i;if(e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;if("function"==typeof(n=t.valueOf)&&!r(i=n.call(t)))return i;if(!e&&"function"==typeof(n=t.toString)&&!r(i=n.call(t)))return i;throw TypeError("Can't convert object to primitive value")}},function(t,e){t.exports=function(t,e,n,r){if(!(t instanceof e)||void 0!==r&&r in t)throw TypeError(n+": incorrect invocation!");return t}},function(t,e,n){var r=n(11),i=n(65),o=n(66),a=n(5),u=n(16),c=n(67),s={},f={};(e=t.exports=function(t,e,n,l,h){var p,d,v,g,y=h?function(){return t}:c(t),m=r(n,l,e?2:1),b=0;if("function"!=typeof y)throw TypeError(t+" is not iterable!");if(o(y)){for(p=u(t.length);p>b;b++)if((g=e?m(a(d=t[b])[0],d[1]):m(t[b]))===s||g===f)return g}else for(v=y.call(t);!(d=v.next()).done;)if((g=i(v,m,d.value,e))===s||g===f)return g}).BREAK=s,e.RETURN=f},function(t,e,n){var r=n(9);t.exports=function(t,e,n){for(var i in e)r(t,i,e[i],n);return t}},function(t,e,n){"use strict";var r=n(2),i=n(4),o=n(3),a=n(0)("species");t.exports=function(t){var e=r[t];o&&e&&!e[a]&&i.f(e,a,{configurable:!0,get:function(){return this}})}},function(t,e,n){var r=n(0)("iterator"),i=!1;try{var o=[7][r]();o.return=function(){i=!0},Array.from(o,(function(){throw 2}))}catch(t){}t.exports=function(t,e){if(!e&&!i)return!1;var n=!1;try{var o=[7],a=o[r]();a.next=function(){return{done:n=!0}},o[r]=function(){return a},t(o)}catch(t){}return n}},function(t,e,n){"use strict";var r=n(1),i=n(18),o=n(13),a=n(7),u=[].sort,c=[1,2,3];r(r.P+r.F*(a((function(){c.sort(void 0)}))||!a((function(){c.sort(null)}))||!n(20)(u)),"Array",{sort:function(t){return void 0===t?u.call(o(this)):u.call(o(this),i(t))}})},function(t,e,n){"use strict";var r=n(1),i=n(52)(2);r(r.P+r.F*!n(20)([].filter,!0),"Array",{filter:function(t){return i(this,t,arguments[1])}})},function(t,e,n){var r=n(11),i=n(53),o=n(13),a=n(16),u=n(104);t.exports=function(t,e){var n=1==t,c=2==t,s=3==t,f=4==t,l=6==t,h=5==t||l,p=e||u;return function(e,u,d){for(var v,g,y=o(e),m=i(y),b=r(u,d,3),w=a(m.length),x=0,_=n?p(e,w):c?p(e,0):void 0;w>x;x++)if((h||x in m)&&(g=b(v=m[x],x,y),t))if(n)_[x]=g;else if(g)switch(t){case 3:return!0;case 5:return v;case 6:return x;case 2:_.push(v)}else if(f)return!1;return l?-1:s||f?f:_}}},function(t,e,n){var r=n(19);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,e,n){var r=n(19);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,e,n){"use strict";var r=n(1),i=n(106);r(r.P+r.F*!n(20)([].reduce,!0),"Array",{reduce:function(t){return i(this,t,arguments.length,arguments[1],!1)}})},function(t,e,n){"use strict";var r=n(25),i=n(1),o=n(9),a=n(12),u=n(28),c=n(107),s=n(29),f=n(110),l=n(0)("iterator"),h=!([].keys&&"next"in[].keys()),p=function(){return this};t.exports=function(t,e,n,d,v,g,y){c(n,e,d);var m,b,w,x=function(t){if(!h&&t in A)return A[t];switch(t){case"keys":case"values":return function(){return new n(this,t)}}return function(){return new n(this,t)}},_=e+" Iterator",M="values"==v,E=!1,A=t.prototype,S=A[l]||A["@@iterator"]||v&&A[v],O=S||x(v),T=v?M?x("entries"):O:void 0,j="Array"==e&&A.entries||S;if(j&&(w=f(j.call(new t)))!==Object.prototype&&w.next&&(s(w,_,!0),r||"function"==typeof w[l]||a(w,l,p)),M&&S&&"values"!==S.name&&(E=!0,O=function(){return S.call(this)}),r&&!y||!h&&!E&&A[l]||a(A,l,O),u[e]=O,u[_]=p,v)if(m={values:M?O:x("values"),keys:g?O:x("keys"),entries:T},y)for(b in m)b in A||o(A,b,m[b]);else i(i.P+i.F*(h||E),e,m);return m}},function(t,e,n){var r=n(5),i=n(108),o=n(60),a=n(59)("IE_PROTO"),u=function(){},c=function(){var t,e=n(43)("iframe"),r=o.length;for(e.style.display="none",n(70).appendChild(e),e.src="javascript:",(t=e.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),c=t.F;r--;)delete c.prototype[o[r]];return c()};t.exports=Object.create||function(t,e){var n;return null!==t?(u.prototype=r(t),n=new u,u.prototype=null,n[a]=t):n=c(),void 0===e?n:i(n,e)}},function(t,e,n){var r=n(17),i=n(16),o=n(109);t.exports=function(t){return function(e,n,a){var u,c=r(e),s=i(c.length),f=o(a,s);if(t&&n!=n){for(;s>f;)if((u=c[f++])!=u)return!0}else for(;s>f;f++)if((t||f in c)&&c[f]===n)return t||f||0;return!t&&-1}}},function(t,e,n){var r=n(34)("keys"),i=n(26);t.exports=function(t){return r[t]||(r[t]=i(t))}},function(t,e){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,e,n){"use strict";var r,i,o=n(37),a=RegExp.prototype.exec,u=String.prototype.replace,c=a,s=(r=/a/,i=/b*/g,a.call(r,"a"),a.call(i,"a"),0!==r.lastIndex||0!==i.lastIndex),f=void 0!==/()??/.exec("")[1];(s||f)&&(c=function(t){var e,n,r,i,c=this;return f&&(n=new RegExp("^"+c.source+"$(?!\\s)",o.call(c))),s&&(e=c.lastIndex),r=a.call(c,t),s&&r&&(c.lastIndex=c.global?r.index+r[0].length:e),f&&r&&r.length>1&&u.call(r[0],n,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(r[i]=void 0)})),r}),t.exports=c},function(t,e,n){var r=n(26)("meta"),i=n(6),o=n(15),a=n(4).f,u=0,c=Object.isExtensible||function(){return!0},s=!n(7)((function(){return c(Object.preventExtensions({}))})),f=function(t){a(t,r,{value:{i:"O"+ ++u,w:{}}})},l=t.exports={KEY:r,NEED:!1,fastKey:function(t,e){if(!i(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!o(t,r)){if(!c(t))return"F";if(!e)return"E";f(t)}return t[r].i},getWeak:function(t,e){if(!o(t,r)){if(!c(t))return!0;if(!e)return!1;f(t)}return t[r].w},onFreeze:function(t){return s&&l.NEED&&c(t)&&!o(t,r)&&f(t),t}}},function(t,e,n){var r=n(75),i=n(60).concat("length","prototype");e.f=Object.getOwnPropertyNames||function(t){return r(t,i)}},function(t,e,n){t.exports=!n(3)&&!n(7)((function(){return 7!=Object.defineProperty(n(43)("div"),"a",{get:function(){return 7}}).a}))},function(t,e,n){var r=n(5);t.exports=function(t,e,n,i){try{return i?e(r(n)[0],n[1]):e(n)}catch(e){var o=t.return;throw void 0!==o&&r(o.call(t)),e}}},function(t,e,n){var r=n(28),i=n(0)("iterator"),o=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||o[i]===t)}},function(t,e,n){var r=n(33),i=n(0)("iterator"),o=n(28);t.exports=n(14).getIteratorMethod=function(t){if(null!=t)return t[i]||t["@@iterator"]||o[r(t)]}},function(t,e,n){var r=n(5),i=n(18),o=n(0)("species");t.exports=function(t,e){var n,a=r(t).constructor;return void 0===a||null==(n=r(a)[o])?e:i(n)}},function(t,e,n){var r,i,o,a=n(11),u=n(99),c=n(70),s=n(43),f=n(2),l=f.process,h=f.setImmediate,p=f.clearImmediate,d=f.MessageChannel,v=f.Dispatch,g=0,y={},m=function(){var t=+this;if(y.hasOwnProperty(t)){var e=y[t];delete y[t],e()}},b=function(t){m.call(t.data)};h&&p||(h=function(t){for(var e=[],n=1;arguments.length>n;)e.push(arguments[n++]);return y[++g]=function(){u("function"==typeof t?t:Function(t),e)},r(g),g},p=function(t){delete y[t]},"process"==n(19)(l)?r=function(t){l.nextTick(a(m,t,1))}:v&&v.now?r=function(t){v.now(a(m,t,1))}:d?(o=(i=new d).port2,i.port1.onmessage=b,r=a(o.postMessage,o,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(r=function(t){f.postMessage(t+"","*")},f.addEventListener("message",b,!1)):r="onreadystatechange"in s("script")?function(t){c.appendChild(s("script")).onreadystatechange=function(){c.removeChild(this),m.call(t)}}:function(t){setTimeout(a(m,t,1),0)}),t.exports={set:h,clear:p}},function(t,e,n){var r=n(2).document;t.exports=r&&r.documentElement},function(t,e,n){"use strict";var r=n(18);function i(t){var e,n;this.promise=new t((function(t,r){if(void 0!==e||void 0!==n)throw TypeError("Bad Promise constructor");e=t,n=r})),this.resolve=r(e),this.reject=r(n)}t.exports.f=function(t){return new i(t)}},function(t,e,n){"use strict";var r=n(1),i=n(52)(0),o=n(20)([].forEach,!0);r(r.P+r.F*!o,"Array",{forEach:function(t){return i(this,t,arguments[1])}})},function(t,e,n){var r=n(0)("unscopables"),i=Array.prototype;null==i[r]&&n(12)(i,r,{}),t.exports=function(t){i[r][t]=!0}},function(t,e){t.exports=function(t,e){return{value:e,done:!!t}}},function(t,e,n){var r=n(15),i=n(17),o=n(58)(!1),a=n(59)("IE_PROTO");t.exports=function(t,e){var n,u=i(t),c=0,s=[];for(n in u)n!=a&&r(u,n)&&s.push(n);for(;e.length>c;)r(u,n=e[c++])&&(~o(s,n)||s.push(n));return s}},function(t,e,n){"use strict";var r=n(5),i=n(13),o=n(16),a=n(35),u=n(77),c=n(79),s=Math.max,f=Math.min,l=Math.floor,h=/\$([$&`']|\d\d?|<[^>]*>)/g,p=/\$([$&`']|\d\d?)/g;n(80)("replace",2,(function(t,e,n,d){return[function(r,i){var o=t(this),a=null==r?void 0:r[e];return void 0!==a?a.call(r,o,i):n.call(String(o),r,i)},function(t,e){var i=d(n,t,this,e);if(i.done)return i.value;var l=r(t),h=String(this),p="function"==typeof e;p||(e=String(e));var g=l.global;if(g){var y=l.unicode;l.lastIndex=0}for(var m=[];;){var b=c(l,h);if(null===b)break;if(m.push(b),!g)break;""===String(b[0])&&(l.lastIndex=u(h,o(l.lastIndex),y))}for(var w,x="",_=0,M=0;M<m.length;M++){b=m[M];for(var E=String(b[0]),A=s(f(a(b.index),h.length),0),S=[],O=1;O<b.length;O++)S.push(void 0===(w=b[O])?w:String(w));var T=b.groups;if(p){var j=[E].concat(S,A,h);void 0!==T&&j.push(T);var k=String(e.apply(void 0,j))}else k=v(E,h,A,S,T,e);A>=_&&(x+=h.slice(_,A)+k,_=A+E.length)}return x+h.slice(_)}];function v(t,e,r,o,a,u){var c=r+t.length,s=o.length,f=p;return void 0!==a&&(a=i(a),f=h),n.call(u,f,(function(n,i){var u;switch(i.charAt(0)){case"$":return"$";case"&":return t;case"`":return e.slice(0,r);case"'":return e.slice(c);case"<":u=a[i.slice(1,-1)];break;default:var f=+i;if(0===f)return n;if(f>s){var h=l(f/10);return 0===h?n:h<=s?void 0===o[h-1]?i.charAt(1):o[h-1]+i.charAt(1):n}u=o[f-1]}return void 0===u?"":u}))}}))},function(t,e,n){"use strict";var r=n(78)(!0);t.exports=function(t,e,n){return e+(n?r(t,e).length:1)}},function(t,e,n){var r=n(35),i=n(30);t.exports=function(t){return function(e,n){var o,a,u=String(i(e)),c=r(n),s=u.length;return c<0||c>=s?t?"":void 0:(o=u.charCodeAt(c))<55296||o>56319||c+1===s||(a=u.charCodeAt(c+1))<56320||a>57343?t?u.charAt(c):o:t?u.slice(c,c+2):a-56320+(o-55296<<10)+65536}}},function(t,e,n){"use strict";var r=n(33),i=RegExp.prototype.exec;t.exports=function(t,e){var n=t.exec;if("function"==typeof n){var o=n.call(t,e);if("object"!=typeof o)throw new TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==r(t))throw new TypeError("RegExp#exec called on incompatible receiver");return i.call(t,e)}},function(t,e,n){"use strict";n(111);var r=n(9),i=n(12),o=n(7),a=n(30),u=n(0),c=n(61),s=u("species"),f=!o((function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")})),l=function(){var t=/(?:)/,e=t.exec;t.exec=function(){return e.apply(this,arguments)};var n="ab".split(t);return 2===n.length&&"a"===n[0]&&"b"===n[1]}();t.exports=function(t,e,n){var h=u(t),p=!o((function(){var e={};return e[h]=function(){return 7},7!=""[t](e)})),d=p?!o((function(){var e=!1,n=/a/;return n.exec=function(){return e=!0,null},"split"===t&&(n.constructor={},n.constructor[s]=function(){return n}),n[h](""),!e})):void 0;if(!p||!d||"replace"===t&&!f||"split"===t&&!l){var v=/./[h],g=n(a,h,""[t],(function(t,e,n,r,i){return e.exec===c?p&&!i?{done:!0,value:v.call(e,n,r)}:{done:!0,value:t.call(n,e,r)}:{done:!1}})),y=g[0],m=g[1];r(String.prototype,t,y),i(RegExp.prototype,h,2==e?function(t,e){return m.call(t,this,e)}:function(t){return m.call(t,this)})}}},function(t,e,n){var r=n(13),i=n(22);n(115)("keys",(function(){return function(t){return i(r(t))}}))},function(t,e,n){"use strict";var r=n(78)(!0);n(56)(String,"String",(function(t){this._t=String(t),this._i=0}),(function(){var t,e=this._t,n=this._i;return n>=e.length?{value:void 0,done:!0}:(t=r(e,n),this._i+=t.length,{value:t,done:!1})}))},function(t,e,n){"use strict";var r=n(11),i=n(1),o=n(13),a=n(65),u=n(66),c=n(16),s=n(118),f=n(67);i(i.S+i.F*!n(49)((function(t){Array.from(t)})),"Array",{from:function(t){var e,n,i,l,h=o(t),p="function"==typeof this?this:Array,d=arguments.length,v=d>1?arguments[1]:void 0,g=void 0!==v,y=0,m=f(h);if(g&&(v=r(v,d>2?arguments[2]:void 0,2)),null==m||p==Array&&u(m))for(n=new p(e=c(h.length));e>y;y++)s(n,y,g?v(h[y],y):h[y]);else for(l=m.call(h),n=new p;!(i=l.next()).done;y++)s(n,y,g?a(l,v,[i.value,y],!0):i.value);return n.length=y,n}})},function(t,e,n){var r=n(2),i=n(14),o=n(25),a=n(85),u=n(4).f;t.exports=function(t){var e=i.Symbol||(i.Symbol=o?{}:r.Symbol||{});"_"==t.charAt(0)||t in e||u(e,t,{value:a.f(t)})}},function(t,e,n){e.f=n(0)},function(t,e,n){"use strict";var r=n(2),i=n(15),o=n(3),a=n(1),u=n(9),c=n(62).KEY,s=n(7),f=n(34),l=n(29),h=n(26),p=n(0),d=n(85),v=n(84),g=n(120),y=n(54),m=n(5),b=n(6),w=n(13),x=n(17),_=n(44),M=n(27),E=n(57),A=n(121),S=n(88),O=n(87),T=n(4),j=n(22),k=S.f,C=T.f,D=A.f,P=r.Symbol,N=r.JSON,L=N&&N.stringify,F=p("_hidden"),I=p("toPrimitive"),U={}.propertyIsEnumerable,R=f("symbol-registry"),H=f("symbols"),q=f("op-symbols"),V=Object.prototype,Y="function"==typeof P&&!!O.f,B=r.QObject,z=!B||!B.prototype||!B.prototype.findChild,W=o&&s((function(){return 7!=E(C({},"a",{get:function(){return C(this,"a",{value:7}).a}})).a}))?function(t,e,n){var r=k(V,e);r&&delete V[e],C(t,e,n),r&&t!==V&&C(V,e,r)}:C,$=function(t){var e=H[t]=E(P.prototype);return e._k=t,e},X=Y&&"symbol"==typeof P.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof P},G=function(t,e,n){return t===V&&G(q,e,n),m(t),e=_(e,!0),m(n),i(H,e)?(n.enumerable?(i(t,F)&&t[F][e]&&(t[F][e]=!1),n=E(n,{enumerable:M(0,!1)})):(i(t,F)||C(t,F,M(1,{})),t[F][e]=!0),W(t,e,n)):C(t,e,n)},Z=function(t,e){m(t);for(var n,r=g(e=x(e)),i=0,o=r.length;o>i;)G(t,n=r[i++],e[n]);return t},J=function(t){var e=U.call(this,t=_(t,!0));return!(this===V&&i(H,t)&&!i(q,t))&&(!(e||!i(this,t)||!i(H,t)||i(this,F)&&this[F][t])||e)},Q=function(t,e){if(t=x(t),e=_(e,!0),t!==V||!i(H,e)||i(q,e)){var n=k(t,e);return!n||!i(H,e)||i(t,F)&&t[F][e]||(n.enumerable=!0),n}},K=function(t){for(var e,n=D(x(t)),r=[],o=0;n.length>o;)i(H,e=n[o++])||e==F||e==c||r.push(e);return r},tt=function(t){for(var e,n=t===V,r=D(n?q:x(t)),o=[],a=0;r.length>a;)!i(H,e=r[a++])||n&&!i(V,e)||o.push(H[e]);return o};Y||(u((P=function(){if(this instanceof P)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),e=function(n){this===V&&e.call(q,n),i(this,F)&&i(this[F],t)&&(this[F][t]=!1),W(this,t,M(1,n))};return o&&z&&W(V,t,{configurable:!0,set:e}),$(t)}).prototype,"toString",(function(){return this._k})),S.f=Q,T.f=G,n(63).f=A.f=K,n(38).f=J,O.f=tt,o&&!n(25)&&u(V,"propertyIsEnumerable",J,!0),d.f=function(t){return $(p(t))}),a(a.G+a.W+a.F*!Y,{Symbol:P});for(var et="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),nt=0;et.length>nt;)p(et[nt++]);for(var rt=j(p.store),it=0;rt.length>it;)v(rt[it++]);a(a.S+a.F*!Y,"Symbol",{for:function(t){return i(R,t+="")?R[t]:R[t]=P(t)},keyFor:function(t){if(!X(t))throw TypeError(t+" is not a symbol!");for(var e in R)if(R[e]===t)return e},useSetter:function(){z=!0},useSimple:function(){z=!1}}),a(a.S+a.F*!Y,"Object",{create:function(t,e){return void 0===e?E(t):Z(E(t),e)},defineProperty:G,defineProperties:Z,getOwnPropertyDescriptor:Q,getOwnPropertyNames:K,getOwnPropertySymbols:tt});var ot=s((function(){O.f(1)}));a(a.S+a.F*ot,"Object",{getOwnPropertySymbols:function(t){return O.f(w(t))}}),N&&a(a.S+a.F*(!Y||s((function(){var t=P();return"[null]"!=L([t])||"{}"!=L({a:t})||"{}"!=L(Object(t))}))),"JSON",{stringify:function(t){for(var e,n,r=[t],i=1;arguments.length>i;)r.push(arguments[i++]);if(n=e=r[1],(b(e)||void 0!==t)&&!X(t))return y(e)||(e=function(t,e){if("function"==typeof n&&(e=n.call(this,t,e)),!X(e))return e}),r[1]=e,L.apply(N,r)}}),P.prototype[I]||n(12)(P.prototype,I,P.prototype.valueOf),l(P,"Symbol"),l(Math,"Math",!0),l(r.JSON,"JSON",!0)},function(t,e){e.f=Object.getOwnPropertySymbols},function(t,e,n){var r=n(38),i=n(27),o=n(17),a=n(44),u=n(15),c=n(64),s=Object.getOwnPropertyDescriptor;e.f=n(3)?s:function(t,e){if(t=o(t),e=a(e,!0),c)try{return s(t,e)}catch(t){}if(u(t,e))return i(!r.f.call(t,e),t[e])}},function(t,e,n){"use strict";n(123);var r=n(5),i=n(37),o=n(3),a=/./.toString,u=function(t){n(9)(RegExp.prototype,"toString",t,!0)};n(7)((function(){return"/a/b"!=a.call({source:"a",flags:"b"})}))?u((function(){var t=r(this);return"/".concat(t.source,"/","flags"in t?t.flags:!o&&t instanceof RegExp?i.call(t):void 0)})):"toString"!=a.name&&u((function(){return a.call(this)}))},function(t,e,n){var r=Date.prototype,i=r.toString,o=r.getTime;new Date(NaN)+""!="Invalid Date"&&n(9)(r,"toString",(function(){var t=o.call(this);return t==t?i.call(this):"Invalid Date"}))},function(t,e,n){"use strict";var r=n(1),i=n(58)(!1),o=[].indexOf,a=!!o&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(a||!n(20)(o)),"Array",{indexOf:function(t){return a?o.apply(this,arguments)||0:i(this,t,arguments[1])}})},function(t,e,n){var r=n(6);t.exports=function(t,e){if(!r(t)||t._t!==e)throw TypeError("Incompatible receiver, "+e+" required!");return t}},function(t,e,n){var r=n(6),i=n(127).set;t.exports=function(t,e,n){var o,a=e.constructor;return a!==n&&"function"==typeof a&&(o=a.prototype)!==n.prototype&&r(o)&&i&&i(t,o),t}},function(t,e,n){var r=n(6),i=n(19),o=n(0)("match");t.exports=function(t){var e;return r(t)&&(void 0!==(e=t[o])?!!e:"RegExp"==i(t))}},,,,function(t,e,n){t.exports=n(34)("native-function-to-string",Function.toString)},function(t,e){t.exports=function(t,e,n){var r=void 0===n;switch(e.length){case 0:return r?t():t.call(n);case 1:return r?t(e[0]):t.call(n,e[0]);case 2:return r?t(e[0],e[1]):t.call(n,e[0],e[1]);case 3:return r?t(e[0],e[1],e[2]):t.call(n,e[0],e[1],e[2]);case 4:return r?t(e[0],e[1],e[2],e[3]):t.call(n,e[0],e[1],e[2],e[3])}return t.apply(n,e)}},function(t,e,n){var r=n(2),i=n(69).set,o=r.MutationObserver||r.WebKitMutationObserver,a=r.process,u=r.Promise,c="process"==n(19)(a);t.exports=function(){var t,e,n,s=function(){var r,i;for(c&&(r=a.domain)&&r.exit();t;){i=t.fn,t=t.next;try{i()}catch(r){throw t?n():e=void 0,r}}e=void 0,r&&r.enter()};if(c)n=function(){a.nextTick(s)};else if(!o||r.navigator&&r.navigator.standalone)if(u&&u.resolve){var f=u.resolve(void 0);n=function(){f.then(s)}}else n=function(){i.call(r,s)};else{var l=!0,h=document.createTextNode("");new o(s).observe(h,{characterData:!0}),n=function(){h.data=l=!l}}return function(r){var i={fn:r,next:void 0};e&&(e.next=i),t||(t=i,n()),e=i}}},function(t,e){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,e,n){var r=n(2).navigator;t.exports=r&&r.userAgent||""},function(t,e,n){var r=n(5),i=n(6),o=n(71);t.exports=function(t,e){if(r(t),i(e)&&e.constructor===t)return e;var n=o.f(t);return(0,n.resolve)(e),n.promise}},function(t,e,n){var r=n(105);t.exports=function(t,e){return new(r(t))(e)}},function(t,e,n){var r=n(6),i=n(54),o=n(0)("species");t.exports=function(t){var e;return i(t)&&("function"!=typeof(e=t.constructor)||e!==Array&&!i(e.prototype)||(e=void 0),r(e)&&null===(e=e[o])&&(e=void 0)),void 0===e?Array:e}},function(t,e,n){var r=n(18),i=n(13),o=n(53),a=n(16);t.exports=function(t,e,n,u,c){r(e);var s=i(t),f=o(s),l=a(s.length),h=c?l-1:0,p=c?-1:1;if(n<2)for(;;){if(h in f){u=f[h],h+=p;break}if(h+=p,c?h<0:l<=h)throw TypeError("Reduce of empty array with no initial value")}for(;c?h>=0:l>h;h+=p)h in f&&(u=e(u,f[h],h,s));return u}},function(t,e,n){"use strict";var r=n(57),i=n(27),o=n(29),a={};n(12)(a,n(0)("iterator"),(function(){return this})),t.exports=function(t,e,n){t.prototype=r(a,{next:i(1,n)}),o(t,e+" Iterator")}},function(t,e,n){var r=n(4),i=n(5),o=n(22);t.exports=n(3)?Object.defineProperties:function(t,e){i(t);for(var n,a=o(e),u=a.length,c=0;u>c;)r.f(t,n=a[c++],e[n]);return t}},function(t,e,n){var r=n(35),i=Math.max,o=Math.min;t.exports=function(t,e){return(t=r(t))<0?i(t+e,0):o(t,e)}},function(t,e,n){var r=n(15),i=n(13),o=n(59)("IE_PROTO"),a=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=i(t),r(t,o)?t[o]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},function(t,e,n){"use strict";var r=n(61);n(1)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(t,e,n){"use strict";n(113)("trim",(function(t){return function(){return t(this,3)}}))},function(t,e,n){var r=n(1),i=n(30),o=n(7),a=n(114),u="["+a+"]",c=RegExp("^"+u+u+"*"),s=RegExp(u+u+"*$"),f=function(t,e,n){var i={},u=o((function(){return!!a[t]()||"​"!="​"[t]()})),c=i[t]=u?e(l):a[t];n&&(i[n]=c),r(r.P+r.F*u,"String",i)},l=f.trim=function(t,e){return t=String(i(t)),1&e&&(t=t.replace(c,"")),2&e&&(t=t.replace(s,"")),t};t.exports=f},function(t,e){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,e,n){var r=n(1),i=n(14),o=n(7);t.exports=function(t,e){var n=(i.Object||{})[t]||Object[t],a={};a[t]=e(n),r(r.S+r.F*o((function(){n(1)})),"Object",a)}},function(t,e,n){var r=n(1);r(r.S+r.F*!n(3),"Object",{defineProperty:n(4).f})},function(t,e,n){var r=n(4).f,i=Function.prototype,o=/^\s*function ([^ (]*)/;"name"in i||n(3)&&r(i,"name",{configurable:!0,get:function(){try{return(""+this).match(o)[1]}catch(t){return""}}})},function(t,e,n){"use strict";var r=n(4),i=n(27);t.exports=function(t,e,n){e in t?r.f(t,e,i(0,n)):t[e]=n}},function(t,e,n){n(84)("asyncIterator")},function(t,e,n){var r=n(22),i=n(87),o=n(38);t.exports=function(t){var e=r(t),n=i.f;if(n)for(var a,u=n(t),c=o.f,s=0;u.length>s;)c.call(t,a=u[s++])&&e.push(a);return e}},function(t,e,n){var r=n(17),i=n(63).f,o={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==o.call(t)?function(t){try{return i(t)}catch(t){return a.slice()}}(t):i(r(t))}},function(t,e,n){var r=n(1);r(r.S,"Array",{isArray:n(54)})},function(t,e,n){n(3)&&"g"!=/./g.flags&&n(4).f(RegExp.prototype,"flags",{configurable:!0,get:n(37)})},function(t,e,n){"use strict";var r=n(125),i=n(92);t.exports=n(126)("Set",(function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(t){return r.def(i(this,"Set"),t=0===t?0:t,t)}},r)},function(t,e,n){"use strict";var r=n(4).f,i=n(57),o=n(47),a=n(11),u=n(45),c=n(46),s=n(56),f=n(74),l=n(48),h=n(3),p=n(62).fastKey,d=n(92),v=h?"_s":"size",g=function(t,e){var n,r=p(e);if("F"!==r)return t._i[r];for(n=t._f;n;n=n.n)if(n.k==e)return n};t.exports={getConstructor:function(t,e,n,s){var f=t((function(t,r){u(t,f,e,"_i"),t._t=e,t._i=i(null),t._f=void 0,t._l=void 0,t[v]=0,null!=r&&c(r,n,t[s],t)}));return o(f.prototype,{clear:function(){for(var t=d(this,e),n=t._i,r=t._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete n[r.i];t._f=t._l=void 0,t[v]=0},delete:function(t){var n=d(this,e),r=g(n,t);if(r){var i=r.n,o=r.p;delete n._i[r.i],r.r=!0,o&&(o.n=i),i&&(i.p=o),n._f==r&&(n._f=i),n._l==r&&(n._l=o),n[v]--}return!!r},forEach:function(t){d(this,e);for(var n,r=a(t,arguments.length>1?arguments[1]:void 0,3);n=n?n.n:this._f;)for(r(n.v,n.k,this);n&&n.r;)n=n.p},has:function(t){return!!g(d(this,e),t)}}),h&&r(f.prototype,"size",{get:function(){return d(this,e)[v]}}),f},def:function(t,e,n){var r,i,o=g(t,e);return o?o.v=n:(t._l=o={i:i=p(e,!0),k:e,v:n,p:r=t._l,n:void 0,r:!1},t._f||(t._f=o),r&&(r.n=o),t[v]++,"F"!==i&&(t._i[i]=o)),t},getEntry:g,setStrong:function(t,e,n){s(t,e,(function(t,n){this._t=d(t,e),this._k=n,this._l=void 0}),(function(){for(var t=this._k,e=this._l;e&&e.r;)e=e.p;return this._t&&(this._l=e=e?e.n:this._t._f)?f(0,"keys"==t?e.k:"values"==t?e.v:[e.k,e.v]):(this._t=void 0,f(1))}),n?"entries":"values",!n,!0),l(e)}}},function(t,e,n){"use strict";var r=n(2),i=n(1),o=n(9),a=n(47),u=n(62),c=n(46),s=n(45),f=n(6),l=n(7),h=n(49),p=n(29),d=n(93);t.exports=function(t,e,n,v,g,y){var m=r[t],b=m,w=g?"set":"add",x=b&&b.prototype,_={},M=function(t){var e=x[t];o(x,t,"delete"==t||"has"==t?function(t){return!(y&&!f(t))&&e.call(this,0===t?0:t)}:"get"==t?function(t){return y&&!f(t)?void 0:e.call(this,0===t?0:t)}:"add"==t?function(t){return e.call(this,0===t?0:t),this}:function(t,n){return e.call(this,0===t?0:t,n),this})};if("function"==typeof b&&(y||x.forEach&&!l((function(){(new b).entries().next()})))){var E=new b,A=E[w](y?{}:-0,1)!=E,S=l((function(){E.has(1)})),O=h((function(t){new b(t)})),T=!y&&l((function(){for(var t=new b,e=5;e--;)t[w](e,e);return!t.has(-0)}));O||((b=e((function(e,n){s(e,b,t);var r=d(new m,e,b);return null!=n&&c(n,g,r[w],r),r}))).prototype=x,x.constructor=b),(S||T)&&(M("delete"),M("has"),g&&M("get")),(T||A)&&M(w),y&&x.clear&&delete x.clear}else b=v.getConstructor(e,t,g,w),a(b.prototype,n),u.NEED=!0;return p(b,t),_[t]=b,i(i.G+i.W+i.F*(b!=m),_),y||v.setStrong(b,t,g),b}},function(t,e,n){var r=n(6),i=n(5),o=function(t,e){if(i(t),!r(e)&&null!==e)throw TypeError(e+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,e,r){try{(r=n(11)(Function.call,n(88).f(Object.prototype,"__proto__").set,2))(t,[]),e=!(t instanceof Array)}catch(t){e=!0}return function(t,n){return o(t,n),e?t.__proto__=n:r(t,n),t}}({},!1):void 0),check:o}},function(t,e,n){"use strict";var r=n(1),i=n(58)(!0);r(r.P,"Array",{includes:function(t){return i(this,t,arguments.length>1?arguments[1]:void 0)}}),n(73)("includes")},function(t,e,n){var r=n(1),i=n(130)(!1);r(r.S,"Object",{values:function(t){return i(t)}})},function(t,e,n){var r=n(3),i=n(22),o=n(17),a=n(38).f;t.exports=function(t){return function(e){for(var n,u=o(e),c=i(u),s=c.length,f=0,l=[];s>f;)n=c[f++],r&&!a.call(u,n)||l.push(t?[n,u[n]]:u[n]);return l}}},function(t,e,n){var r=n(2),i=n(93),o=n(4).f,a=n(63).f,u=n(94),c=n(37),s=r.RegExp,f=s,l=s.prototype,h=/a/g,p=/a/g,d=new s(h)!==h;if(n(3)&&(!d||n(7)((function(){return p[n(0)("match")]=!1,s(h)!=h||s(p)==p||"/a/i"!=s(h,"i")})))){s=function(t,e){var n=this instanceof s,r=u(t),o=void 0===e;return!n&&r&&t.constructor===s&&o?t:i(d?new f(r&&!o?t.source:t,e):f((r=t instanceof s)?t.source:t,r&&o?c.call(t):e),n?this:l,s)};for(var v=function(t){t in s||o(s,t,{configurable:!0,get:function(){return f[t]},set:function(e){f[t]=e}})},g=a(f),y=0;g.length>y;)v(g[y++]);l.constructor=s,s.prototype=l,n(9)(r,"RegExp",s)}n(48)("RegExp")},function(t,e,n){"use strict";var r=n(94),i=n(5),o=n(68),a=n(77),u=n(16),c=n(79),s=n(61),f=n(7),l=Math.min,h=[].push,p="length",d=!f((function(){RegExp(4294967295,"y")}));n(80)("split",2,(function(t,e,n,f){var v;return v="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1)[p]||2!="ab".split(/(?:ab)*/)[p]||4!=".".split(/(.?)(.?)/)[p]||".".split(/()()/)[p]>1||"".split(/.?/)[p]?function(t,e){var i=String(this);if(void 0===t&&0===e)return[];if(!r(t))return n.call(i,t,e);for(var o,a,u,c=[],f=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),l=0,d=void 0===e?4294967295:e>>>0,v=new RegExp(t.source,f+"g");(o=s.call(v,i))&&!((a=v.lastIndex)>l&&(c.push(i.slice(l,o.index)),o[p]>1&&o.index<i[p]&&h.apply(c,o.slice(1)),u=o[0][p],l=a,c[p]>=d));)v.lastIndex===o.index&&v.lastIndex++;return l===i[p]?!u&&v.test("")||c.push(""):c.push(i.slice(l)),c[p]>d?c.slice(0,d):c}:"0".split(void 0,0)[p]?function(t,e){return void 0===t&&0===e?[]:n.call(this,t,e)}:n,[function(n,r){var i=t(this),o=null==n?void 0:n[e];return void 0!==o?o.call(n,i,r):v.call(String(i),n,r)},function(t,e){var r=f(v,t,this,e,v!==n);if(r.done)return r.value;var s=i(t),h=String(this),p=o(s,RegExp),g=s.unicode,y=(s.ignoreCase?"i":"")+(s.multiline?"m":"")+(s.unicode?"u":"")+(d?"y":"g"),m=new p(d?s:"^(?:"+s.source+")",y),b=void 0===e?4294967295:e>>>0;if(0===b)return[];if(0===h.length)return null===c(m,h)?[h]:[];for(var w=0,x=0,_=[];x<h.length;){m.lastIndex=d?x:0;var M,E=c(m,d?h:h.slice(x));if(null===E||(M=l(u(m.lastIndex+(d?0:x)),h.length))===w)x=a(h,x,g);else{if(_.push(h.slice(w,x)),_.length===b)return _;for(var A=1;A<=E.length-1;A++)if(_.push(E[A]),_.length===b)return _;x=w=M}}return _.push(h.slice(w)),_}]}))},function(t,e,n){},function(t,e,n){"use strict";n.r(e);n(41),n(42),n(50),n(51),n(36),n(55),n(72),n(31),n(21),n(23),n(76),n(112);var r={calculate:function(){return getComputedStyle(document.body).getPropertyValue("--breakpoint").replace(/\"/g,"").trim()},isMobile:function(){var t=this.calculate();return"xsmall"==t||"small"==t}},i=(n(81),{idp_total:{title:"Total IDPs per Governate",groupSize:15e4}}),o=Object.keys(i),a=(o.map((function(t){return{label:i[t].title,value:t}})),n(116),n(117),n(82),n(83),n(119),n(86),n(122),n(89),n(90),n(91),Array.prototype.slice),u=function(t){return t};function c(t){return"translate("+(t+.5)+",0)"}function s(t){return"translate(0,"+(t+.5)+")"}function f(t){return function(e){return+t(e)}}function l(t){var e=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(e=Math.round(e)),function(n){return+t(n)+e}}function h(){return!this.__axis}function p(t,e){var n=[],r=null,i=null,o=6,p=6,d=3,v=1===t||4===t?-1:1,g=4===t||2===t?"x":"y",y=1===t||3===t?c:s;function m(a){var c=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,s=null==i?e.tickFormat?e.tickFormat.apply(e,n):u:i,m=Math.max(o,0)+d,b=e.range(),w=+b[0]+.5,x=+b[b.length-1]+.5,_=(e.bandwidth?l:f)(e.copy()),M=a.selection?a.selection():a,E=M.selectAll(".domain").data([null]),A=M.selectAll(".tick").data(c,e).order(),S=A.exit(),O=A.enter().append("g").attr("class","tick"),T=A.select("line"),j=A.select("text");E=E.merge(E.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),A=A.merge(O),T=T.merge(O.append("line").attr("stroke","currentColor").attr(g+"2",v*o)),j=j.merge(O.append("text").attr("fill","currentColor").attr(g,v*m).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),a!==M&&(E=E.transition(a),A=A.transition(a),T=T.transition(a),j=j.transition(a),S=S.transition(a).attr("opacity",1e-6).attr("transform",(function(t){return isFinite(t=_(t))?y(t):this.getAttribute("transform")})),O.attr("opacity",1e-6).attr("transform",(function(t){var e=this.parentNode.__axis;return y(e&&isFinite(e=e(t))?e:_(t))}))),S.remove(),E.attr("d",4===t||2==t?p?"M"+v*p+","+w+"H0.5V"+x+"H"+v*p:"M0.5,"+w+"V"+x:p?"M"+w+","+v*p+"V0.5H"+x+"V"+v*p:"M"+w+",0.5H"+x),A.attr("opacity",1).attr("transform",(function(t){return y(_(t))})),T.attr(g+"2",v*o),j.attr(g,v*m).text(s),M.filter(h).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),M.each((function(){this.__axis=_}))}return m.scale=function(t){return arguments.length?(e=t,m):e},m.ticks=function(){return n=a.call(arguments),m},m.tickArguments=function(t){return arguments.length?(n=null==t?[]:a.call(t),m):n.slice()},m.tickValues=function(t){return arguments.length?(r=null==t?null:a.call(t),m):r&&r.slice()},m.tickFormat=function(t){return arguments.length?(i=t,m):i},m.tickSize=function(t){return arguments.length?(o=p=+t,m):o},m.tickSizeInner=function(t){return arguments.length?(o=+t,m):o},m.tickSizeOuter=function(t){return arguments.length?(p=+t,m):p},m.tickPadding=function(t){return arguments.length?(d=+t,m):d},m}var d=function(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]},v=function(t){return(t=d(Math.abs(t)))?t[1]:NaN},g=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function y(t){if(!(e=g.exec(t)))throw new Error("invalid format: "+t);var e;return new m({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function m(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}y.prototype=m.prototype,m.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var b,w,x,_,M=function(t,e){var n=d(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},E={"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return M(100*t,e)},r:M,s:function(t,e){var n=d(t,e);if(!n)return t+"";var r=n[0],i=n[1],o=i-(b=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+d(t,Math.max(0,e+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},A=function(t){return t},S=Array.prototype.map,O=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];w=function(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?A:(e=S.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,u=e[0],c=0;i>0&&u>0&&(c+u+1>r&&(u=Math.max(1,r-c)),o.push(t.substring(i-=u,i+u)),!((c+=u+1)>r));)u=e[a=(a+1)%e.length];return o.reverse().join(n)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",u=void 0===t.numerals?A:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(S.call(t.numerals,String)),c=void 0===t.percent?"%":t.percent+"",s=void 0===t.minus?"-":t.minus+"",f=void 0===t.nan?"NaN":t.nan+"";function l(t){var e=(t=y(t)).fill,n=t.align,l=t.sign,h=t.symbol,p=t.zero,d=t.width,v=t.comma,g=t.precision,m=t.trim,w=t.type;"n"===w?(v=!0,w="g"):E[w]||(void 0===g&&(g=12),m=!0,w="g"),(p||"0"===e&&"="===n)&&(p=!0,e="0",n="=");var x="$"===h?i:"#"===h&&/[boxX]/.test(w)?"0"+w.toLowerCase():"",_="$"===h?o:/[%p]/.test(w)?c:"",M=E[w],A=/[defgprs%]/.test(w);function S(t){var i,o,c,h=x,y=_;if("c"===w)y=M(t)+y,t="";else{var E=(t=+t)<0||1/t<0;if(t=isNaN(t)?f:M(Math.abs(t),g),m&&(t=function(t){t:for(var e,n=t.length,r=1,i=-1;r<n;++r)switch(t[r]){case".":i=e=r;break;case"0":0===i&&(i=r),e=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(e+1):t}(t)),E&&0==+t&&"+"!==l&&(E=!1),h=(E?"("===l?l:s:"-"===l||"("===l?"":l)+h,y=("s"===w?O[8+b/3]:"")+y+(E&&"("===l?")":""),A)for(i=-1,o=t.length;++i<o;)if(48>(c=t.charCodeAt(i))||c>57){y=(46===c?a+t.slice(i+1):t.slice(i))+y,t=t.slice(0,i);break}}v&&!p&&(t=r(t,1/0));var S=h.length+t.length+y.length,T=S<d?new Array(d-S+1).join(e):"";switch(v&&p&&(t=r(T+t,T.length?d-y.length:1/0),T=""),n){case"<":t=h+t+y+T;break;case"=":t=h+T+t+y;break;case"^":t=T.slice(0,S=T.length>>1)+h+t+y+T.slice(S);break;default:t=T+h+t+y}return u(t)}return g=void 0===g?6:/[gprs]/.test(w)?Math.max(1,Math.min(21,g)):Math.max(0,Math.min(20,g)),S.toString=function(){return t+""},S}return{format:l,formatPrefix:function(t,e){var n=l(((t=y(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(v(e)/3))),i=Math.pow(10,-r),o=O[8+r/3];return function(t){return n(i*t)+o}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""],minus:"-"}),x=w.format,_=w.formatPrefix;var T=Math.PI,j=2*T,k=j-1e-6;function C(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function D(){return new C}C.prototype=D.prototype={constructor:C,moveTo:function(t,e){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,e){this._+="L"+(this._x1=+t)+","+(this._y1=+e)},quadraticCurveTo:function(t,e,n,r){this._+="Q"+ +t+","+ +e+","+(this._x1=+n)+","+(this._y1=+r)},bezierCurveTo:function(t,e,n,r,i,o){this._+="C"+ +t+","+ +e+","+ +n+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,e,n,r,i){t=+t,e=+e,n=+n,r=+r,i=+i;var o=this._x1,a=this._y1,u=n-t,c=r-e,s=o-t,f=a-e,l=s*s+f*f;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=e);else if(l>1e-6)if(Math.abs(f*u-c*s)>1e-6&&i){var h=n-o,p=r-a,d=u*u+c*c,v=h*h+p*p,g=Math.sqrt(d),y=Math.sqrt(l),m=i*Math.tan((T-Math.acos((d+l-v)/(2*g*y)))/2),b=m/y,w=m/g;Math.abs(b-1)>1e-6&&(this._+="L"+(t+b*s)+","+(e+b*f)),this._+="A"+i+","+i+",0,0,"+ +(f*h>s*p)+","+(this._x1=t+w*u)+","+(this._y1=e+w*c)}else this._+="L"+(this._x1=t)+","+(this._y1=e);else;},arc:function(t,e,n,r,i,o){t=+t,e=+e,o=!!o;var a=(n=+n)*Math.cos(r),u=n*Math.sin(r),c=t+a,s=e+u,f=1^o,l=o?r-i:i-r;if(n<0)throw new Error("negative radius: "+n);null===this._x1?this._+="M"+c+","+s:(Math.abs(this._x1-c)>1e-6||Math.abs(this._y1-s)>1e-6)&&(this._+="L"+c+","+s),n&&(l<0&&(l=l%j+j),l>k?this._+="A"+n+","+n+",0,1,"+f+","+(t-a)+","+(e-u)+"A"+n+","+n+",0,1,"+f+","+(this._x1=c)+","+(this._y1=s):l>1e-6&&(this._+="A"+n+","+n+",0,"+ +(l>=T)+","+f+","+(this._x1=t+n*Math.cos(i))+","+(this._y1=e+n*Math.sin(i))))},rect:function(t,e,n,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+e)+"h"+ +n+"v"+ +r+"h"+-n+"Z"},toString:function(){return this._}};var P=D,N=function(t){return function(){return t}};function L(t){this._context=t}L.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};var F=function(t){return new L(t)};function I(t){return t[0]}function U(t){return t[1]}var R=function(){var t=I,e=U,n=N(!0),r=null,i=F,o=null;function a(a){var u,c,s,f=a.length,l=!1;for(null==r&&(o=i(s=P())),u=0;u<=f;++u)!(u<f&&n(c=a[u],u,a))===l&&((l=!l)?o.lineStart():o.lineEnd()),l&&o.point(+t(c,u,a),+e(c,u,a));if(s)return o=null,s+""||null}return a.x=function(e){return arguments.length?(t="function"==typeof e?e:N(+e),a):t},a.y=function(t){return arguments.length?(e="function"==typeof t?t:N(+t),a):e},a.defined=function(t){return arguments.length?(n="function"==typeof t?t:N(!!t),a):n},a.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),a):i},a.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),a):r},a},H=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN},q=function(t){var e;return 1===t.length&&(e=t,t=function(t,n){return H(e(t),n)}),{left:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)<0?r=o+1:i=o}return r},right:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)>0?i=o:r=o+1}return r}}};var V=q(H),Y=V.right,B=(V.left,Y);var z=Array.prototype,W=(z.slice,z.map,Math.sqrt(50)),$=Math.sqrt(10),X=Math.sqrt(2),G=function(t,e,n){var r,i,o,a,u=-1;if(n=+n,(t=+t)===(e=+e)&&n>0)return[t];if((r=e<t)&&(i=t,t=e,e=i),0===(a=Z(t,e,n))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),e=Math.floor(e/a),o=new Array(i=Math.ceil(e-t+1));++u<i;)o[u]=(t+u)*a;else for(t=Math.floor(t*a),e=Math.ceil(e*a),o=new Array(i=Math.ceil(t-e+1));++u<i;)o[u]=(t-u)/a;return r&&o.reverse(),o};function Z(t,e,n){var r=(e-t)/Math.max(0,n),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=W?10:o>=$?5:o>=X?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=W?10:o>=$?5:o>=X?2:1)}function J(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=W?i*=10:o>=$?i*=5:o>=X&&(i*=2),e<t?-i:i}function Q(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}function K(){}function tt(t,e){var n=new K;if(t instanceof K)t.each((function(t,e){n.set(e,t)}));else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==e)for(;++i<o;)n.set(i,t[i]);else for(;++i<o;)n.set(e(r=t[i],i,t),r)}else if(t)for(var a in t)n.set(a,t[a]);return n}K.prototype=tt.prototype={constructor:K,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,e){return this["$"+t]=e,this},remove:function(t){var e="$"+t;return e in this&&delete this[e]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(e.slice(1));return t},values:function(){var t=[];for(var e in this)"$"===e[0]&&t.push(this[e]);return t},entries:function(){var t=[];for(var e in this)"$"===e[0]&&t.push({key:e.slice(1),value:this[e]});return t},size:function(){var t=0;for(var e in this)"$"===e[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var e in this)"$"===e[0]&&t(this[e],e.slice(1),this)}};var et=tt;function nt(){}var rt=et.prototype;function it(t,e){var n=new nt;if(t instanceof nt)t.each((function(t){n.add(t)}));else if(t){var r=-1,i=t.length;if(null==e)for(;++r<i;)n.add(t[r]);else for(;++r<i;)n.add(e(t[r],r,t))}return n}nt.prototype=it.prototype={constructor:nt,has:rt.has,add:function(t){return this["$"+(t+="")]=t,this},remove:rt.remove,clear:rt.clear,values:rt.keys,size:rt.size,empty:rt.empty,each:rt.each};var ot=Array.prototype,at=ot.map,ut=ot.slice;var ct=function(t,e,n){t.prototype=e.prototype=n,n.constructor=t};function st(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function ft(){}var lt="\\s*([+-]?\\d+)\\s*",ht="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",pt="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",dt=/^#([0-9a-f]{3,8})$/,vt=new RegExp("^rgb\\("+[lt,lt,lt]+"\\)$"),gt=new RegExp("^rgb\\("+[pt,pt,pt]+"\\)$"),yt=new RegExp("^rgba\\("+[lt,lt,lt,ht]+"\\)$"),mt=new RegExp("^rgba\\("+[pt,pt,pt,ht]+"\\)$"),bt=new RegExp("^hsl\\("+[ht,pt,pt]+"\\)$"),wt=new RegExp("^hsla\\("+[ht,pt,pt,ht]+"\\)$"),xt={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function _t(){return this.rgb().formatHex()}function Mt(){return this.rgb().formatRgb()}function Et(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=dt.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?At(e):3===n?new jt(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?St(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?St(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=vt.exec(t))?new jt(e[1],e[2],e[3],1):(e=gt.exec(t))?new jt(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=yt.exec(t))?St(e[1],e[2],e[3],e[4]):(e=mt.exec(t))?St(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=bt.exec(t))?Pt(e[1],e[2]/100,e[3]/100,1):(e=wt.exec(t))?Pt(e[1],e[2]/100,e[3]/100,e[4]):xt.hasOwnProperty(t)?At(xt[t]):"transparent"===t?new jt(NaN,NaN,NaN,0):null}function At(t){return new jt(t>>16&255,t>>8&255,255&t,1)}function St(t,e,n,r){return r<=0&&(t=e=n=NaN),new jt(t,e,n,r)}function Ot(t){return t instanceof ft||(t=Et(t)),t?new jt((t=t.rgb()).r,t.g,t.b,t.opacity):new jt}function Tt(t,e,n,r){return 1===arguments.length?Ot(t):new jt(t,e,n,null==r?1:r)}function jt(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function kt(){return"#"+Dt(this.r)+Dt(this.g)+Dt(this.b)}function Ct(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}function Dt(t){return((t=Math.max(0,Math.min(255,Math.round(t)||0)))<16?"0":"")+t.toString(16)}function Pt(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new Lt(t,e,n,r)}function Nt(t){if(t instanceof Lt)return new Lt(t.h,t.s,t.l,t.opacity);if(t instanceof ft||(t=Et(t)),!t)return new Lt;if(t instanceof Lt)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),o=Math.max(e,n,r),a=NaN,u=o-i,c=(o+i)/2;return u?(a=e===o?(n-r)/u+6*(n<r):n===o?(r-e)/u+2:(e-n)/u+4,u/=c<.5?o+i:2-o-i,a*=60):u=c>0&&c<1?0:a,new Lt(a,u,c,t.opacity)}function Lt(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Ft(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function It(t,e,n,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*e+(4-6*o+3*a)*n+(1+3*t+3*o-3*a)*r+a*i)/6}ct(ft,Et,{copy:function(t){return Object.assign(new this.constructor,this,t)},displayable:function(){return this.rgb().displayable()},hex:_t,formatHex:_t,formatHsl:function(){return Nt(this).formatHsl()},formatRgb:Mt,toString:Mt}),ct(jt,Tt,st(ft,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new jt(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new jt(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:kt,formatHex:kt,formatRgb:Ct,toString:Ct})),ct(Lt,(function(t,e,n,r){return 1===arguments.length?Nt(t):new Lt(t,e,n,null==r?1:r)}),st(ft,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Lt(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Lt(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new jt(Ft(t>=240?t-240:t+120,i,r),Ft(t,i,r),Ft(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"hsl(":"hsla(")+(this.h||0)+", "+100*(this.s||0)+"%, "+100*(this.l||0)+"%"+(1===t?")":", "+t+")")}}));var Ut=function(t){return function(){return t}};function Rt(t,e){return function(n){return t+n*e}}function Ht(t){return 1==(t=+t)?qt:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):Ut(isNaN(e)?n:e)}}function qt(t,e){var n=e-t;return n?Rt(t,n):Ut(isNaN(t)?e:t)}var Vt=function t(e){var n=Ht(e);function r(t,e){var r=n((t=Tt(t)).r,(e=Tt(e)).r),i=n(t.g,e.g),o=n(t.b,e.b),a=qt(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=o(e),t.opacity=a(e),t+""}}return r.gamma=t,r}(1);function Yt(t){return function(e){var n,r,i=e.length,o=new Array(i),a=new Array(i),u=new Array(i);for(n=0;n<i;++n)r=Tt(e[n]),o[n]=r.r||0,a[n]=r.g||0,u[n]=r.b||0;return o=t(o),a=t(a),u=t(u),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=u(t),r+""}}}Yt((function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,u=r<e-1?t[r+2]:2*o-i;return It((n-r/e)*e,a,i,o,u)}})),Yt((function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),i=t[(r+e-1)%e],o=t[r%e],a=t[(r+1)%e],u=t[(r+2)%e];return It((n-r/e)*e,i,o,a,u)}}));var Bt=function(t,e){e||(e=[]);var n,r=t?Math.min(e.length,t.length):0,i=e.slice();return function(o){for(n=0;n<r;++n)i[n]=t[n]*(1-o)+e[n]*o;return i}};function zt(t){return ArrayBuffer.isView(t)&&!(t instanceof DataView)}function Wt(t,e){var n,r=e?e.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(n=0;n<i;++n)o[n]=Kt(t[n],e[n]);for(;n<r;++n)a[n]=e[n];return function(t){for(n=0;n<i;++n)a[n]=o[n](t);return a}}var $t=function(t,e){var n=new Date;return t=+t,e=+e,function(r){return n.setTime(t*(1-r)+e*r),n}},Xt=function(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}},Gt=function(t,e){var n,r={},i={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=Kt(t[n],e[n]):i[n]=e[n];return function(t){for(n in r)i[n]=r[n](t);return i}},Zt=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Jt=new RegExp(Zt.source,"g");var Qt=function(t,e){var n,r,i,o=Zt.lastIndex=Jt.lastIndex=0,a=-1,u=[],c=[];for(t+="",e+="";(n=Zt.exec(t))&&(r=Jt.exec(e));)(i=r.index)>o&&(i=e.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(n=n[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,c.push({i:a,x:Xt(n,r)})),o=Jt.lastIndex;return o<e.length&&(i=e.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?c[0]?function(t){return function(e){return t(e)+""}}(c[0].x):function(t){return function(){return t}}(e):(e=c.length,function(t){for(var n,r=0;r<e;++r)u[(n=c[r]).i]=n.x(t);return u.join("")})},Kt=function(t,e){var n,r=typeof e;return null==e||"boolean"===r?Ut(e):("number"===r?Xt:"string"===r?(n=Et(e))?(e=n,Vt):Qt:e instanceof Et?Vt:e instanceof Date?$t:zt(e)?Bt:Array.isArray(e)?Wt:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?Gt:Xt)(t,e)},te=function(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}},ee=function(t){return+t},ne=[0,1];function re(t){return t}function ie(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:(n=isNaN(e)?NaN:.5,function(){return n});var n}function oe(t){var e,n=t[0],r=t[t.length-1];return n>r&&(e=n,n=r,r=e),function(t){return Math.max(n,Math.min(r,t))}}function ae(t,e,n){var r=t[0],i=t[1],o=e[0],a=e[1];return i<r?(r=ie(i,r),o=n(a,o)):(r=ie(r,i),o=n(o,a)),function(t){return o(r(t))}}function ue(t,e,n){var r=Math.min(t.length,e.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++a<r;)i[a]=ie(t[a],t[a+1]),o[a]=n(e[a],e[a+1]);return function(e){var n=B(t,e,1,r)-1;return o[n](i[n](e))}}function ce(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function se(){var t,e,n,r,i,o,a=ne,u=ne,c=Kt,s=re;function f(){return r=Math.min(a.length,u.length)>2?ue:ae,i=o=null,l}function l(e){return isNaN(e=+e)?n:(i||(i=r(a.map(t),u,c)))(t(s(e)))}return l.invert=function(n){return s(e((o||(o=r(u,a.map(t),Xt)))(n)))},l.domain=function(t){return arguments.length?(a=at.call(t,ee),s===re||(s=oe(a)),f()):a.slice()},l.range=function(t){return arguments.length?(u=ut.call(t),f()):u.slice()},l.rangeRound=function(t){return u=ut.call(t),c=te,f()},l.clamp=function(t){return arguments.length?(s=t?oe(a):re,l):s!==re},l.interpolate=function(t){return arguments.length?(c=t,f()):c},l.unknown=function(t){return arguments.length?(n=t,l):n},function(n,r){return t=n,e=r,f()}}function fe(t,e){return se()(t,e)}var le=function(t,e,n,r){var i,o=J(t,e,n);switch((r=y(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(i=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(v(e)/3)))-v(Math.abs(t)))}(o,a))||(r.precision=i),_(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,v(e)-v(t))+1}(o,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-v(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return x(r)};function he(t){var e=t.domain;return t.ticks=function(t){var n=e();return G(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return le(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,i=e(),o=0,a=i.length-1,u=i[o],c=i[a];return c<u&&(r=u,u=c,c=r,r=o,o=a,a=r),(r=Z(u,c,n))>0?r=Z(u=Math.floor(u/r)*r,c=Math.ceil(c/r)*r,n):r<0&&(r=Z(u=Math.ceil(u*r)/r,c=Math.floor(c*r)/r,n)),r>0?(i[o]=Math.floor(u/r)*r,i[a]=Math.ceil(c/r)*r,e(i)):r<0&&(i[o]=Math.ceil(u*r)/r,i[a]=Math.floor(c*r)/r,e(i)),t},t}function pe(){var t=fe(re,re);return t.copy=function(){return ce(t,pe())},Q.apply(t,arguments),he(t)}var de=new Date,ve=new Date;function ge(t,e,n,r){function i(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return i.floor=function(e){return t(e=new Date(+e)),e},i.ceil=function(n){return t(n=new Date(n-1)),e(n,1),t(n),n},i.round=function(t){var e=i(t),n=i.ceil(t);return t-e<n-t?e:n},i.offset=function(t,n){return e(t=new Date(+t),null==n?1:Math.floor(n)),t},i.range=function(n,r,o){var a,u=[];if(n=i.ceil(n),o=null==o?1:Math.floor(o),!(n<r&&o>0))return u;do{u.push(a=new Date(+n)),e(n,o),t(n)}while(a<n&&n<r);return u},i.filter=function(n){return ge((function(e){if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),(function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););}))},n&&(i.count=function(e,r){return de.setTime(+e),ve.setTime(+r),t(de),t(ve),Math.floor(n(de,ve))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(e){return r(e)%t==0}:function(e){return i.count(0,e)%t==0}):i:null}),i}var ye=ge((function(t){t.setMonth(0,1),t.setHours(0,0,0,0)}),(function(t,e){t.setFullYear(t.getFullYear()+e)}),(function(t,e){return e.getFullYear()-t.getFullYear()}),(function(t){return t.getFullYear()}));ye.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ge((function(e){e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),(function(e,n){e.setFullYear(e.getFullYear()+n*t)})):null};var me=ye,be=(ye.range,ge((function(t){t.setDate(1),t.setHours(0,0,0,0)}),(function(t,e){t.setMonth(t.getMonth()+e)}),(function(t,e){return e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())}),(function(t){return t.getMonth()})));be.range;function we(t){return ge((function(e){e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+7*e)}),(function(t,e){return(e-t-6e4*(e.getTimezoneOffset()-t.getTimezoneOffset()))/6048e5}))}var xe=we(0),_e=we(1),Me=we(2),Ee=we(3),Ae=we(4),Se=we(5),Oe=we(6),Te=(xe.range,_e.range,Me.range,Ee.range,Ae.range,Se.range,Oe.range,ge((function(t){t.setHours(0,0,0,0)}),(function(t,e){t.setDate(t.getDate()+e)}),(function(t,e){return(e-t-6e4*(e.getTimezoneOffset()-t.getTimezoneOffset()))/864e5}),(function(t){return t.getDate()-1}))),je=Te,ke=(Te.range,ge((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds()-6e4*t.getMinutes())}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getHours()}))),Ce=(ke.range,ge((function(t){t.setTime(t-t.getMilliseconds()-1e3*t.getSeconds())}),(function(t,e){t.setTime(+t+6e4*e)}),(function(t,e){return(e-t)/6e4}),(function(t){return t.getMinutes()}))),De=(Ce.range,ge((function(t){t.setTime(t-t.getMilliseconds())}),(function(t,e){t.setTime(+t+1e3*e)}),(function(t,e){return(e-t)/1e3}),(function(t){return t.getUTCSeconds()}))),Pe=(De.range,ge((function(){}),(function(t,e){t.setTime(+t+e)}),(function(t,e){return e-t})));Pe.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?ge((function(e){e.setTime(Math.floor(e/t)*t)}),(function(e,n){e.setTime(+e+n*t)}),(function(e,n){return(n-e)/t})):Pe:null};Pe.range;function Ne(t){return ge((function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+7*e)}),(function(t,e){return(e-t)/6048e5}))}var Le=Ne(0),Fe=Ne(1),Ie=Ne(2),Ue=Ne(3),Re=Ne(4),He=Ne(5),qe=Ne(6),Ve=(Le.range,Fe.range,Ie.range,Ue.range,Re.range,He.range,qe.range,ge((function(t){t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCDate(t.getUTCDate()+e)}),(function(t,e){return(e-t)/864e5}),(function(t){return t.getUTCDate()-1}))),Ye=Ve,Be=(Ve.range,ge((function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCFullYear(t.getUTCFullYear()+e)}),(function(t,e){return e.getUTCFullYear()-t.getUTCFullYear()}),(function(t){return t.getUTCFullYear()})));Be.every=function(t){return isFinite(t=Math.floor(t))&&t>0?ge((function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),(function(e,n){e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null};var ze=Be;Be.range;function We(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function $e(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Xe(t,e,n){return{y:t,m:e,d:n,H:0,M:0,S:0,L:0}}var Ge,Ze={"-":"",_:" ",0:"0"},Je=/^\s*\d+/,Qe=/^%/,Ke=/[\\^$*+?|[\]().{}]/g;function tn(t,e,n){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<n?new Array(n-o+1).join(e)+i:i)}function en(t){return t.replace(Ke,"\\$&")}function nn(t){return new RegExp("^(?:"+t.map(en).join("|")+")","i")}function rn(t){for(var e={},n=-1,r=t.length;++n<r;)e[t[n].toLowerCase()]=n;return e}function on(t,e,n){var r=Je.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function an(t,e,n){var r=Je.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function un(t,e,n){var r=Je.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function cn(t,e,n){var r=Je.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function sn(t,e,n){var r=Je.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function fn(t,e,n){var r=Je.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function ln(t,e,n){var r=Je.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function hn(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function pn(t,e,n){var r=Je.exec(e.slice(n,n+1));return r?(t.q=3*r[0]-3,n+r[0].length):-1}function dn(t,e,n){var r=Je.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function vn(t,e,n){var r=Je.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function gn(t,e,n){var r=Je.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function yn(t,e,n){var r=Je.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function mn(t,e,n){var r=Je.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function bn(t,e,n){var r=Je.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function wn(t,e,n){var r=Je.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function xn(t,e,n){var r=Je.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function _n(t,e,n){var r=Qe.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function Mn(t,e,n){var r=Je.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function En(t,e,n){var r=Je.exec(e.slice(n));return r?(t.s=+r[0],n+r[0].length):-1}function An(t,e){return tn(t.getDate(),e,2)}function Sn(t,e){return tn(t.getHours(),e,2)}function On(t,e){return tn(t.getHours()%12||12,e,2)}function Tn(t,e){return tn(1+je.count(me(t),t),e,3)}function jn(t,e){return tn(t.getMilliseconds(),e,3)}function kn(t,e){return jn(t,e)+"000"}function Cn(t,e){return tn(t.getMonth()+1,e,2)}function Dn(t,e){return tn(t.getMinutes(),e,2)}function Pn(t,e){return tn(t.getSeconds(),e,2)}function Nn(t){var e=t.getDay();return 0===e?7:e}function Ln(t,e){return tn(xe.count(me(t)-1,t),e,2)}function Fn(t,e){var n=t.getDay();return t=n>=4||0===n?Ae(t):Ae.ceil(t),tn(Ae.count(me(t),t)+(4===me(t).getDay()),e,2)}function In(t){return t.getDay()}function Un(t,e){return tn(_e.count(me(t)-1,t),e,2)}function Rn(t,e){return tn(t.getFullYear()%100,e,2)}function Hn(t,e){return tn(t.getFullYear()%1e4,e,4)}function qn(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+tn(e/60|0,"0",2)+tn(e%60,"0",2)}function Vn(t,e){return tn(t.getUTCDate(),e,2)}function Yn(t,e){return tn(t.getUTCHours(),e,2)}function Bn(t,e){return tn(t.getUTCHours()%12||12,e,2)}function zn(t,e){return tn(1+Ye.count(ze(t),t),e,3)}function Wn(t,e){return tn(t.getUTCMilliseconds(),e,3)}function $n(t,e){return Wn(t,e)+"000"}function Xn(t,e){return tn(t.getUTCMonth()+1,e,2)}function Gn(t,e){return tn(t.getUTCMinutes(),e,2)}function Zn(t,e){return tn(t.getUTCSeconds(),e,2)}function Jn(t){var e=t.getUTCDay();return 0===e?7:e}function Qn(t,e){return tn(Le.count(ze(t)-1,t),e,2)}function Kn(t,e){var n=t.getUTCDay();return t=n>=4||0===n?Re(t):Re.ceil(t),tn(Re.count(ze(t),t)+(4===ze(t).getUTCDay()),e,2)}function tr(t){return t.getUTCDay()}function er(t,e){return tn(Fe.count(ze(t)-1,t),e,2)}function nr(t,e){return tn(t.getUTCFullYear()%100,e,2)}function rr(t,e){return tn(t.getUTCFullYear()%1e4,e,4)}function ir(){return"+0000"}function or(){return"%"}function ar(t){return+t}function ur(t){return Math.floor(+t/1e3)}!function(t){Ge=function(t){var e=t.dateTime,n=t.date,r=t.time,i=t.periods,o=t.days,a=t.shortDays,u=t.months,c=t.shortMonths,s=nn(i),f=rn(i),l=nn(o),h=rn(o),p=nn(a),d=rn(a),v=nn(u),g=rn(u),y=nn(c),m=rn(c),b={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return u[t.getMonth()]},c:null,d:An,e:An,f:kn,H:Sn,I:On,j:Tn,L:jn,m:Cn,M:Dn,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:ar,s:ur,S:Pn,u:Nn,U:Ln,V:Fn,w:In,W:Un,x:null,X:null,y:Rn,Y:Hn,Z:qn,"%":or},w={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return u[t.getUTCMonth()]},c:null,d:Vn,e:Vn,f:$n,H:Yn,I:Bn,j:zn,L:Wn,m:Xn,M:Gn,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:ar,s:ur,S:Zn,u:Jn,U:Qn,V:Kn,w:tr,W:er,x:null,X:null,y:nr,Y:rr,Z:ir,"%":or},x={a:function(t,e,n){var r=p.exec(e.slice(n));return r?(t.w=d[r[0].toLowerCase()],n+r[0].length):-1},A:function(t,e,n){var r=l.exec(e.slice(n));return r?(t.w=h[r[0].toLowerCase()],n+r[0].length):-1},b:function(t,e,n){var r=y.exec(e.slice(n));return r?(t.m=m[r[0].toLowerCase()],n+r[0].length):-1},B:function(t,e,n){var r=v.exec(e.slice(n));return r?(t.m=g[r[0].toLowerCase()],n+r[0].length):-1},c:function(t,n,r){return E(t,e,n,r)},d:vn,e:vn,f:xn,H:yn,I:yn,j:gn,L:wn,m:dn,M:mn,p:function(t,e,n){var r=s.exec(e.slice(n));return r?(t.p=f[r[0].toLowerCase()],n+r[0].length):-1},q:pn,Q:Mn,s:En,S:bn,u:an,U:un,V:cn,w:on,W:sn,x:function(t,e,r){return E(t,n,e,r)},X:function(t,e,n){return E(t,r,e,n)},y:ln,Y:fn,Z:hn,"%":_n};function _(t,e){return function(n){var r,i,o,a=[],u=-1,c=0,s=t.length;for(n instanceof Date||(n=new Date(+n));++u<s;)37===t.charCodeAt(u)&&(a.push(t.slice(c,u)),null!=(i=Ze[r=t.charAt(++u)])?r=t.charAt(++u):i="e"===r?" ":"0",(o=e[r])&&(r=o(n,i)),a.push(r),c=u+1);return a.push(t.slice(c,u)),a.join("")}}function M(t,e){return function(n){var r,i,o=Xe(1900,void 0,1);if(E(o,t,n+="",0)!=n.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(e&&!("Z"in o)&&(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=$e(Xe(o.y,0,1))).getUTCDay(),r=i>4||0===i?Fe.ceil(r):Fe(r),r=Ye.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=We(Xe(o.y,0,1))).getDay(),r=i>4||0===i?_e.ceil(r):_e(r),r=je.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?$e(Xe(o.y,0,1)).getUTCDay():We(Xe(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,$e(o)):We(o)}}function E(t,e,n,r){for(var i,o,a=0,u=e.length,c=n.length;a<u;){if(r>=c)return-1;if(37===(i=e.charCodeAt(a++))){if(i=e.charAt(a++),!(o=x[i in Ze?e.charAt(a++):i])||(r=o(t,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}return b.x=_(n,b),b.X=_(r,b),b.c=_(e,b),w.x=_(n,w),w.X=_(r,w),w.c=_(e,w),{format:function(t){var e=_(t+="",b);return e.toString=function(){return t},e},parse:function(t){var e=M(t+="",!1);return e.toString=function(){return t},e},utcFormat:function(t){var e=_(t+="",w);return e.toString=function(){return t},e},utcParse:function(t){var e=M(t+="",!0);return e.toString=function(){return t},e}}}(t),Ge.format,Ge.parse,Ge.utcFormat,Ge.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var cr=ge((function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),(function(t,e){t.setUTCMonth(t.getUTCMonth()+e)}),(function(t,e){return e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())}),(function(t){return t.getUTCMonth()})),sr=(cr.range,ge((function(t){t.setUTCMinutes(0,0,0)}),(function(t,e){t.setTime(+t+36e5*e)}),(function(t,e){return(e-t)/36e5}),(function(t){return t.getUTCHours()}))),fr=(sr.range,ge((function(t){t.setUTCSeconds(0,0)}),(function(t,e){t.setTime(+t+6e4*e)}),(function(t,e){return(e-t)/6e4}),(function(t){return t.getUTCMinutes()})));fr.range;function lr(){}var hr=function(t){return null==t?lr:function(){return this.querySelector(t)}};function pr(){return[]}var dr=function(t){return null==t?pr:function(){return this.querySelectorAll(t)}},vr=function(t){return function(){return this.matches(t)}},gr=function(t){return new Array(t.length)};function yr(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}yr.prototype={constructor:yr,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};function mr(t,e,n,r,i,o){for(var a,u=0,c=e.length,s=o.length;u<s;++u)(a=e[u])?(a.__data__=o[u],r[u]=a):n[u]=new yr(t,o[u]);for(;u<c;++u)(a=e[u])&&(i[u]=a)}function br(t,e,n,r,i,o,a){var u,c,s,f={},l=e.length,h=o.length,p=new Array(l);for(u=0;u<l;++u)(c=e[u])&&(p[u]=s="$"+a.call(c,c.__data__,u,e),s in f?i[u]=c:f[s]=c);for(u=0;u<h;++u)(c=f[s="$"+a.call(t,o[u],u,o)])?(r[u]=c,c.__data__=o[u],f[s]=null):n[u]=new yr(t,o[u]);for(u=0;u<l;++u)(c=e[u])&&f[p[u]]===c&&(i[u]=c)}function wr(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}var xr="http://www.w3.org/1999/xhtml",_r={svg:"http://www.w3.org/2000/svg",xhtml:xr,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},Mr=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),_r.hasOwnProperty(e)?{space:_r[e],local:t}:t};function Er(t){return function(){this.removeAttribute(t)}}function Ar(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Sr(t,e){return function(){this.setAttribute(t,e)}}function Or(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function Tr(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function jr(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}var kr=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function Cr(t){return function(){this.style.removeProperty(t)}}function Dr(t,e,n){return function(){this.style.setProperty(t,e,n)}}function Pr(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function Nr(t,e){return t.style.getPropertyValue(e)||kr(t).getComputedStyle(t,null).getPropertyValue(e)}function Lr(t){return function(){delete this[t]}}function Fr(t,e){return function(){this[t]=e}}function Ir(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function Ur(t){return t.trim().split(/^|\s+/)}function Rr(t){return t.classList||new Hr(t)}function Hr(t){this._node=t,this._names=Ur(t.getAttribute("class")||"")}function qr(t,e){for(var n=Rr(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function Vr(t,e){for(var n=Rr(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}function Yr(t){return function(){qr(this,t)}}function Br(t){return function(){Vr(this,t)}}function zr(t,e){return function(){(e.apply(this,arguments)?qr:Vr)(this,t)}}Hr.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function Wr(){this.textContent=""}function $r(t){return function(){this.textContent=t}}function Xr(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function Gr(){this.innerHTML=""}function Zr(t){return function(){this.innerHTML=t}}function Jr(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function Qr(){this.nextSibling&&this.parentNode.appendChild(this)}function Kr(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function ti(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===xr&&e.documentElement.namespaceURI===xr?e.createElement(t):e.createElementNS(n,t)}}function ei(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var ni=function(t){var e=Mr(t);return(e.local?ei:ti)(e)};function ri(){return null}function ii(){var t=this.parentNode;t&&t.removeChild(this)}function oi(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function ai(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}var ui={},ci=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(ui={mouseenter:"mouseover",mouseleave:"mouseout"}));function si(t,e,n){return t=fi(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function fi(t,e,n){return function(r){var i=ci;ci=r;try{t.call(this,this.__data__,e,n)}finally{ci=i}}}function li(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}function hi(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,o=e.length;r<o;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.capture);++i?e.length=i:delete this.__on}}}function pi(t,e,n){var r=ui.hasOwnProperty(t.type)?si:fi;return function(i,o,a){var u,c=this.__on,s=r(e,o,a);if(c)for(var f=0,l=c.length;f<l;++f)if((u=c[f]).type===t.type&&u.name===t.name)return this.removeEventListener(u.type,u.listener,u.capture),this.addEventListener(u.type,u.listener=s,u.capture=n),void(u.value=e);this.addEventListener(t.type,s,n),u={type:t.type,name:t.name,value:e,listener:s,capture:n},c?c.push(u):this.__on=[u]}}function di(t,e,n){var r=kr(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}function vi(t,e){return function(){return di(this,t,e)}}function gi(t,e){return function(){return di(this,t,e.apply(this,arguments))}}var yi=[null];function mi(t,e){this._groups=t,this._parents=e}function bi(){return new mi([[document.documentElement]],yi)}mi.prototype=bi.prototype={constructor:mi,select:function(t){"function"!=typeof t&&(t=hr(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a,u=e[i],c=u.length,s=r[i]=new Array(c),f=0;f<c;++f)(o=u[f])&&(a=t.call(o,o.__data__,f,u))&&("__data__"in o&&(a.__data__=o.__data__),s[f]=a);return new mi(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=dr(t));for(var e=this._groups,n=e.length,r=[],i=[],o=0;o<n;++o)for(var a,u=e[o],c=u.length,s=0;s<c;++s)(a=u[s])&&(r.push(t.call(a,a.__data__,s,u)),i.push(a));return new mi(r,i)},filter:function(t){"function"!=typeof t&&(t=vr(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],u=a.length,c=r[i]=[],s=0;s<u;++s)(o=a[s])&&t.call(o,o.__data__,s,a)&&c.push(o);return new mi(r,this._parents)},data:function(t,e){if(!t)return d=new Array(this.size()),f=-1,this.each((function(t){d[++f]=t})),d;var n,r=e?br:mr,i=this._parents,o=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var a=o.length,u=new Array(a),c=new Array(a),s=new Array(a),f=0;f<a;++f){var l=i[f],h=o[f],p=h.length,d=t.call(l,l&&l.__data__,f,i),v=d.length,g=c[f]=new Array(v),y=u[f]=new Array(v);r(l,h,g,y,s[f]=new Array(p),d,e);for(var m,b,w=0,x=0;w<v;++w)if(m=g[w]){for(w>=x&&(x=w+1);!(b=y[x])&&++x<v;);m._next=b||null}}return(u=new mi(u,i))._enter=c,u._exit=s,u},enter:function(){return new mi(this._enter||this._groups.map(gr),this._parents)},exit:function(){return new mi(this._exit||this._groups.map(gr),this._parents)},join:function(t,e,n){var r=this.enter(),i=this,o=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=e&&(i=e(i)),null==n?o.remove():n(o),r&&i?r.merge(i).order():i},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var c,s=e[u],f=n[u],l=s.length,h=a[u]=new Array(l),p=0;p<l;++p)(c=s[p]||f[p])&&(h[p]=c);for(;u<r;++u)a[u]=e[u];return new mi(a,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=wr);for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var a,u=n[o],c=u.length,s=i[o]=new Array(c),f=0;f<c;++f)(a=u[f])&&(s[f]=a);s.sort(e)}return new mi(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each((function(){t[++e]=this})),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,o=e[n],a=0,u=o.length;a<u;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,e){var n=Mr(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?Ar:Er:"function"==typeof e?n.local?jr:Tr:n.local?Or:Sr)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?Cr:"function"==typeof e?Pr:Dr)(t,e,null==n?"":n)):Nr(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?Lr:"function"==typeof e?Ir:Fr)(t,e)):this.node()[t]},classed:function(t,e){var n=Ur(t+"");if(arguments.length<2){for(var r=Rr(this.node()),i=-1,o=n.length;++i<o;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?zr:e?Yr:Br)(n,e))},text:function(t){return arguments.length?this.each(null==t?Wr:("function"==typeof t?Xr:$r)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?Gr:("function"==typeof t?Jr:Zr)(t)):this.node().innerHTML},raise:function(){return this.each(Qr)},lower:function(){return this.each(Kr)},append:function(t){var e="function"==typeof t?t:ni(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:ni(t),r=null==e?ri:"function"==typeof e?e:hr(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(ii)},clone:function(t){return this.select(t?ai:oi)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,i,o=li(t+""),a=o.length;if(!(arguments.length<2)){for(u=e?pi:hi,null==n&&(n=!1),r=0;r<a;++r)this.each(u(o[r],e,n));return this}var u=this.node().__on;if(u)for(var c,s=0,f=u.length;s<f;++s)for(r=0,c=u[s];r<a;++r)if((i=o[r]).type===c.type&&i.name===c.name)return c.value},dispatch:function(t,e){return this.each(("function"==typeof e?gi:vi)(t,e))}};var wi=bi,xi=function(t){return"string"==typeof t?new mi([[document.querySelector(t)]],[document.documentElement]):new mi([[t]],yi)},_i=function(t){return"string"==typeof t?new mi([document.querySelectorAll(t)],[document.documentElement]):new mi([null==t?[]:t],yi)},Mi=function(t){var e=function(){for(var t,e=ci;t=e.sourceEvent;)e=t;return e}();return e.changedTouches&&(e=e.changedTouches[0]),function(t,e){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=e.clientX,r.y=e.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[e.clientX-i.left-t.clientLeft,e.clientY-i.top-t.clientTop]}(t,e)},Ei={value:function(){}};function Ai(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new Si(r)}function Si(t){this._=t}function Oi(t,e){return t.trim().split(/^|\s+/).map((function(t){var n="",r=t.indexOf(".");if(r>=0&&(n=t.slice(r+1),t=t.slice(0,r)),t&&!e.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:n}}))}function Ti(t,e){for(var n,r=0,i=t.length;r<i;++r)if((n=t[r]).name===e)return n.value}function ji(t,e,n){for(var r=0,i=t.length;r<i;++r)if(t[r].name===e){t[r]=Ei,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}Si.prototype=Ai.prototype={constructor:Si,on:function(t,e){var n,r=this._,i=Oi(t+"",r),o=-1,a=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++o<a;)if(n=(t=i[o]).type)r[n]=ji(r[n],t.name,e);else if(null==e)for(n in r)r[n]=ji(r[n],t.name,null);return this}for(;++o<a;)if((n=(t=i[o]).type)&&(n=Ti(r[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new Si(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),o=0;o<n;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,n=(r=this._[t]).length;o<n;++o)r[o].value.apply(e,i)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(e,n)}};var ki,Ci,Di=Ai,Pi=0,Ni=0,Li=0,Fi=0,Ii=0,Ui=0,Ri="object"==typeof performance&&performance.now?performance:Date,Hi="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function qi(){return Ii||(Hi(Vi),Ii=Ri.now()+Ui)}function Vi(){Ii=0}function Yi(){this._call=this._time=this._next=null}function Bi(t,e,n){var r=new Yi;return r.restart(t,e,n),r}function zi(){Ii=(Fi=Ri.now())+Ui,Pi=Ni=0;try{!function(){qi(),++Pi;for(var t,e=ki;e;)(t=Ii-e._time)>=0&&e._call.call(null,t),e=e._next;--Pi}()}finally{Pi=0,function(){var t,e,n=ki,r=1/0;for(;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:ki=e);Ci=t,$i(r)}(),Ii=0}}function Wi(){var t=Ri.now(),e=t-Fi;e>1e3&&(Ui-=e,Fi=t)}function $i(t){Pi||(Ni&&(Ni=clearTimeout(Ni)),t-Ii>24?(t<1/0&&(Ni=setTimeout(zi,t-Ri.now()-Ui)),Li&&(Li=clearInterval(Li))):(Li||(Fi=Ri.now(),Li=setInterval(Wi,1e3)),Pi=1,Hi(zi)))}Yi.prototype=Bi.prototype={constructor:Yi,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?qi():+n)+(null==e?0:+e),this._next||Ci===this||(Ci?Ci._next=this:ki=this,Ci=this),this._call=t,this._time=n,$i()},stop:function(){this._call&&(this._call=null,this._time=1/0,$i())}};var Xi=function(t,e,n){var r=new Yi;return e=null==e?0:+e,r.restart((function(n){r.stop(),t(n+e)}),e,n),r},Gi=Di("start","end","cancel","interrupt"),Zi=[],Ji=function(t,e,n,r,i,o){var a=t.__transition;if(a){if(n in a)return}else t.__transition={};!function(t,e,n){var r,i=t.__transition;function o(c){var s,f,l,h;if(1!==n.state)return u();for(s in i)if((h=i[s]).name===n.name){if(3===h.state)return Xi(o);4===h.state?(h.state=6,h.timer.stop(),h.on.call("interrupt",t,t.__data__,h.index,h.group),delete i[s]):+s<e&&(h.state=6,h.timer.stop(),h.on.call("cancel",t,t.__data__,h.index,h.group),delete i[s])}if(Xi((function(){3===n.state&&(n.state=4,n.timer.restart(a,n.delay,n.time),a(c))})),n.state=2,n.on.call("start",t,t.__data__,n.index,n.group),2===n.state){for(n.state=3,r=new Array(l=n.tween.length),s=0,f=-1;s<l;++s)(h=n.tween[s].value.call(t,t.__data__,n.index,n.group))&&(r[++f]=h);r.length=f+1}}function a(e){for(var i=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(u),n.state=5,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);5===n.state&&(n.on.call("end",t,t.__data__,n.index,n.group),u())}function u(){for(var r in n.state=6,n.timer.stop(),delete i[e],i)return;delete t.__transition}i[e]=n,n.timer=Bi((function(t){n.state=1,n.timer.restart(o,n.delay,n.time),n.delay<=t&&o(t-n.delay)}),0,n.time)}(t,n,{name:e,index:r,group:i,on:Gi,tween:Zi,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})};function Qi(t,e){var n=to(t,e);if(n.state>0)throw new Error("too late; already scheduled");return n}function Ki(t,e){var n=to(t,e);if(n.state>3)throw new Error("too late; already running");return n}function to(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}var eo,no,ro,io,oo=180/Math.PI,ao={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},uo=function(t,e,n,r,i,o){var a,u,c;return(a=Math.sqrt(t*t+e*e))&&(t/=a,e/=a),(c=t*n+e*r)&&(n-=t*c,r-=e*c),(u=Math.sqrt(n*n+r*r))&&(n/=u,r/=u,c/=u),t*r<e*n&&(t=-t,e=-e,c=-c,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(e,t)*oo,skewX:Math.atan(c)*oo,scaleX:a,scaleY:u}};function co(t,e,n,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var u=[],c=[];return o=t(o),a=t(a),function(t,r,i,o,a,u){if(t!==i||r!==o){var c=a.push("translate(",null,e,null,n);u.push({i:c-4,x:Xt(t,i)},{i:c-2,x:Xt(r,o)})}else(i||o)&&a.push("translate("+i+e+o+n)}(o.translateX,o.translateY,a.translateX,a.translateY,u,c),function(t,e,n,o){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),o.push({i:n.push(i(n)+"rotate(",null,r)-2,x:Xt(t,e)})):e&&n.push(i(n)+"rotate("+e+r)}(o.rotate,a.rotate,u,c),function(t,e,n,o){t!==e?o.push({i:n.push(i(n)+"skewX(",null,r)-2,x:Xt(t,e)}):e&&n.push(i(n)+"skewX("+e+r)}(o.skewX,a.skewX,u,c),function(t,e,n,r,o,a){if(t!==n||e!==r){var u=o.push(i(o)+"scale(",null,",",null,")");a.push({i:u-4,x:Xt(t,n)},{i:u-2,x:Xt(e,r)})}else 1===n&&1===r||o.push(i(o)+"scale("+n+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,u,c),o=a=null,function(t){for(var e,n=-1,r=c.length;++n<r;)u[(e=c[n]).i]=e.x(t);return u.join("")}}}var so=co((function(t){return"none"===t?ao:(eo||(eo=document.createElement("DIV"),no=document.documentElement,ro=document.defaultView),eo.style.transform=t,t=ro.getComputedStyle(no.appendChild(eo),null).getPropertyValue("transform"),no.removeChild(eo),t=t.slice(7,-1).split(","),uo(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}),"px, ","px)","deg)"),fo=co((function(t){return null==t?ao:(io||(io=document.createElementNS("http://www.w3.org/2000/svg","g")),io.setAttribute("transform",t),(t=io.transform.baseVal.consolidate())?(t=t.matrix,uo(t.a,t.b,t.c,t.d,t.e,t.f)):ao)}),", ",")",")");function lo(t,e){var n,r;return function(){var i=Ki(this,t),o=i.tween;if(o!==n)for(var a=0,u=(r=n=o).length;a<u;++a)if(r[a].name===e){(r=r.slice()).splice(a,1);break}i.tween=r}}function ho(t,e,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var o=Ki(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var u={name:e,value:n},c=0,s=i.length;c<s;++c)if(i[c].name===e){i[c]=u;break}c===s&&i.push(u)}o.tween=i}}function po(t,e,n){var r=t._id;return t.each((function(){var t=Ki(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return to(t,r).value[e]}}var vo=function(t,e){var n;return("number"==typeof e?Xt:e instanceof Et?Vt:(n=Et(e))?(e=n,Vt):Qt)(t,e)};function go(t){return function(){this.removeAttribute(t)}}function yo(t){return function(){this.removeAttributeNS(t.space,t.local)}}function mo(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=e(r=a,n)}}function bo(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=e(r=a,n)}}function wo(t,e,n){var r,i,o;return function(){var a,u,c=n(this);if(null!=c)return(a=this.getAttribute(t))===(u=c+"")?null:a===r&&u===i?o:(i=u,o=e(r=a,c));this.removeAttribute(t)}}function xo(t,e,n){var r,i,o;return function(){var a,u,c=n(this);if(null!=c)return(a=this.getAttributeNS(t.space,t.local))===(u=c+"")?null:a===r&&u===i?o:(i=u,o=e(r=a,c));this.removeAttributeNS(t.space,t.local)}}function _o(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}function Mo(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}function Eo(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&Mo(t,i)),n}return i._value=e,i}function Ao(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&_o(t,i)),n}return i._value=e,i}function So(t,e){return function(){Qi(this,t).delay=+e.apply(this,arguments)}}function Oo(t,e){return e=+e,function(){Qi(this,t).delay=e}}function To(t,e){return function(){Ki(this,t).duration=+e.apply(this,arguments)}}function jo(t,e){return e=+e,function(){Ki(this,t).duration=e}}function ko(t,e){if("function"!=typeof e)throw new Error;return function(){Ki(this,t).ease=e}}function Co(t,e,n){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?Qi:Ki;return function(){var a=o(this,t),u=a.on;u!==r&&(i=(r=u).copy()).on(e,n),a.on=i}}var Do=wi.prototype.constructor;function Po(t){return function(){this.style.removeProperty(t)}}function No(t,e,n){return function(r){this.style.setProperty(t,e.call(this,r),n)}}function Lo(t,e,n){var r,i;function o(){var o=e.apply(this,arguments);return o!==i&&(r=(i=o)&&No(t,o,n)),r}return o._value=e,o}function Fo(t){return function(e){this.textContent=t.call(this,e)}}function Io(t){var e,n;function r(){var r=t.apply(this,arguments);return r!==n&&(e=(n=r)&&Fo(r)),e}return r._value=t,r}var Uo=0;function Ro(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function Ho(t){return wi().transition(t)}function qo(){return++Uo}var Vo=wi.prototype;Ro.prototype=Ho.prototype={constructor:Ro,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=hr(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var u,c,s=r[a],f=s.length,l=o[a]=new Array(f),h=0;h<f;++h)(u=s[h])&&(c=t.call(u,u.__data__,h,s))&&("__data__"in u&&(c.__data__=u.__data__),l[h]=c,Ji(l[h],e,n,h,l,to(u,n)));return new Ro(o,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=dr(t));for(var r=this._groups,i=r.length,o=[],a=[],u=0;u<i;++u)for(var c,s=r[u],f=s.length,l=0;l<f;++l)if(c=s[l]){for(var h,p=t.call(c,c.__data__,l,s),d=to(c,n),v=0,g=p.length;v<g;++v)(h=p[v])&&Ji(h,e,n,v,p,d);o.push(p),a.push(c)}return new Ro(o,a,e,n)},filter:function(t){"function"!=typeof t&&(t=vr(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],u=a.length,c=r[i]=[],s=0;s<u;++s)(o=a[s])&&t.call(o,o.__data__,s,a)&&c.push(o);return new Ro(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var c,s=e[u],f=n[u],l=s.length,h=a[u]=new Array(l),p=0;p<l;++p)(c=s[p]||f[p])&&(h[p]=c);for(;u<r;++u)a[u]=e[u];return new Ro(a,this._parents,this._name,this._id)},selection:function(){return new Do(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=qo(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],c=u.length,s=0;s<c;++s)if(a=u[s]){var f=to(a,e);Ji(a,t,n,s,u,{time:f.time+f.delay+f.duration,delay:0,duration:f.duration,ease:f.ease})}return new Ro(r,this._parents,t,n)},call:Vo.call,nodes:Vo.nodes,node:Vo.node,size:Vo.size,empty:Vo.empty,each:Vo.each,on:function(t,e){var n=this._id;return arguments.length<2?to(this.node(),n).on.on(t):this.each(Co(n,t,e))},attr:function(t,e){var n=Mr(t),r="transform"===n?fo:vo;return this.attrTween(t,"function"==typeof e?(n.local?xo:wo)(n,r,po(this,"attr."+t,e)):null==e?(n.local?yo:go)(n):(n.local?bo:mo)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=Mr(t);return this.tween(n,(r.local?Eo:Ao)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?so:vo;return null==e?this.styleTween(t,function(t,e){var n,r,i;return function(){var o=Nr(this,t),a=(this.style.removeProperty(t),Nr(this,t));return o===a?null:o===n&&a===r?i:i=e(n=o,r=a)}}(t,r)).on("end.style."+t,Po(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,i,o;return function(){var a=Nr(this,t),u=n(this),c=u+"";return null==u&&(this.style.removeProperty(t),c=u=Nr(this,t)),a===c?null:a===r&&c===i?o:(i=c,o=e(r=a,u))}}(t,r,po(this,"style."+t,e))).each(function(t,e){var n,r,i,o,a="style."+e,u="end."+a;return function(){var c=Ki(this,t),s=c.on,f=null==c.value[a]?o||(o=Po(e)):void 0;s===n&&i===f||(r=(n=s).copy()).on(u,i=f),c.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,i,o=n+"";return function(){var a=Nr(this,t);return a===o?null:a===r?i:i=e(r=a,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,Lo(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(po(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,Io(t))},remove:function(){return this.on("end.remove",(t=this._id,function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}));var t},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,i=to(this.node(),n).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==e?lo:ho)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?So:Oo)(e,t)):to(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?To:jo)(e,t)):to(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(ko(e,t)):to(this.node(),e).ease},end:function(){var t,e,n=this,r=n._id,i=n.size();return new Promise((function(o,a){var u={value:a},c={value:function(){0==--i&&o()}};n.each((function(){var n=Ki(this,r),i=n.on;i!==t&&((e=(t=i).copy())._.cancel.push(u),e._.interrupt.push(u),e._.end.push(c)),n.on=e}))}))}};var Yo={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Bo(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))return Yo.time=qi(),Yo;return n}wi.prototype.interrupt=function(t){return this.each((function(){!function(t,e){var n,r,i,o=t.__transition,a=!0;if(o){for(i in e=null==e?null:e+"",o)(n=o[i]).name===e?(r=n.state>2&&n.state<5,n.state=6,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete o[i]):a=!1;a&&delete t.__transition}}(this,t)}))},wi.prototype.transition=function(t){var e,n;t instanceof Ro?(e=t._id,t=t._name):(e=qo(),(n=Yo).time=qi(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],c=u.length,s=0;s<c;++s)(a=u[s])&&Ji(a,t,e,s,u,n||Bo(a,e));return new Ro(r,this._parents,t,e)};var zo;r.calculate();zo={HL:{x:1,y:3},HA:{x:2,y:3},RA:{x:3,y:3},SU:{x:4,y:3},DI:{x:5,y:3},DR:{x:1,y:4},DY:{x:2,y:4},HM:{x:3,y:4},HI:{x:4,y:4},LA:{x:1,y:5},QU:{x:2,y:5},RD:{x:3,y:5},TA:{x:4,y:5},IB:{x:4,y:2}},r.isMobile()&&(zo={HL:{x:1,y:4},HA:{x:1,y:5},RA:{x:2,y:5},SU:{x:3,y:5},DI:{x:1,y:6},DR:{x:2,y:6},DY:{x:3,y:6},HM:{x:1,y:7},HI:{x:2,y:7},LA:{x:3,y:7},QU:{x:1,y:8},RD:{x:2,y:8},TA:{x:3,y:8},IB:{x:2,y:4}});var Wo=zo;function $o(t){return function(t){if(Array.isArray(t))return Xo(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return Xo(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);"Object"===n&&t.constructor&&(n=t.constructor.name);if("Map"===n||"Set"===n)return Array.from(t);if("Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))return Xo(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function Xo(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}var Go,Zo=function(){var t,e,n,r,o,a,u={top:10,right:12,bottom:40,left:15},c=200,s=200,f=pe(),l=pe();function h(i){var a=i.data;f.domain([e,n]).range([0,c]);var u=a.map((function(t){return t.values.reduce((function(t,e){return t.concat(e)}),[]).map((function(t){return t[r]}))})).reduce((function(t,e){return t.concat(e)}),[]),h=Math.max.apply(Math,$o(u));l.domain([0,h]).range([s,0]).nice(),o=t.map((function(t){return i=0,(n=r)in(e={year:t})?Object.defineProperty(e,n,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[n]=i,e;var e,n,i}))}function d(t,i){var a=c-u.left-u.right;f.range([0,a]);var h=function(){var t=I,e=null,n=N(0),r=U,i=N(!0),o=null,a=F,u=null;function c(c){var s,f,l,h,p,d=c.length,v=!1,g=new Array(d),y=new Array(d);for(null==o&&(u=a(p=P())),s=0;s<=d;++s){if(!(s<d&&i(h=c[s],s,c))===v)if(v=!v)f=s,u.areaStart(),u.lineStart();else{for(u.lineEnd(),u.lineStart(),l=s-1;l>=f;--l)u.point(g[l],y[l]);u.lineEnd(),u.areaEnd()}v&&(g[s]=+t(h,s,c),y[s]=+n(h,s,c),u.point(e?+e(h,s,c):g[s],r?+r(h,s,c):y[s]))}if(p)return u=null,p+""||null}function s(){return R().defined(i).curve(a).context(o)}return c.x=function(n){return arguments.length?(t="function"==typeof n?n:N(+n),e=null,c):t},c.x0=function(e){return arguments.length?(t="function"==typeof e?e:N(+e),c):t},c.x1=function(t){return arguments.length?(e=null==t?null:"function"==typeof t?t:N(+t),c):e},c.y=function(t){return arguments.length?(n="function"==typeof t?t:N(+t),r=null,c):n},c.y0=function(t){return arguments.length?(n="function"==typeof t?t:N(+t),c):n},c.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:N(+t),c):r},c.lineX0=c.lineY0=function(){return s().x(t).y(n)},c.lineY1=function(){return s().x(t).y(r)},c.lineX1=function(){return s().x(e).y(n)},c.defined=function(t){return arguments.length?(i="function"==typeof t?t:N(!!t),c):i},c.curve=function(t){return arguments.length?(a=t,null!=o&&(u=a(o)),c):a},c.context=function(t){return arguments.length?(null==t?o=u=null:u=a(o=t),c):o},c}().x((function(t){return f(t.year)})).y1((function(t){return l(t[r])})).y0(l(0)),d=R().x((function(t){return f(t.year)})).y((function(t){return l(t[r])})),g=xi(this).selectAll("svg").data([t]);g.exit().remove();var m=g.enter().append("svg"),b=m.attr("class","chart").attr("data-id",t.id).append("g").attr("transform","translate(".concat(u.left,", ").concat(u.top,")"));m.merge(g).attr("viewBox","0 0 ".concat(a+u.left+u.right," ").concat(s+u.top+u.bottom)),window.navigator.userAgent.indexOf("Edge")>-1&&m.attr("width",a+u.left+u.right).attr("height",s+u.top+u.bottom),b.append("g").attr("class","axis axis--x"),b.append("g").attr("class","axis axis--y"),b.append("g").attr("class","g-plot").append("text").attr("class","chart-title").text(t.province),b.append("g").attr("class","g-points"),b.append("g").attr("class","g-clip").append("rect").attr("class","plot-area").attr("width",a+u.left+u.right).attr("height",s+u.top+u.bottom).attr("transform","translate(-".concat(u.left," -").concat(u.top,")")).on("mouseover",y.mouseover).on("mousemove",y.mousemove).on("mouseleave",y.mouseleave),function(t){var r=t.g,i=(t.svgWidth,(o=f,p(3,o)).tickValues([e,n]).tickFormat((function(t){return"'".concat(t.toString().slice(-2))})));var o;r.select(".axis--x").attr("transform","translate(0,"+s+")").call(i)}({g:b=m.merge(g).select("g"),svgWidth:a}),b.select(".chart-title").attr("transform","translate(".concat(a/2," ").concat(s+u.bottom-3,")"));var w=b.select(".g-plot"),x=w.selectAll(".path").data([t]);x.exit().remove(),x.enter().append("path").attr("class","path").attr("data-id",(function(t){return t.id})).attr("d",d(o)).merge(x).transition(Qo).attr("d",(function(t){return d(t.values)})).style("stroke",(function(t){return v(t.values)}));var _=w.selectAll(".area").data([t]);_.exit().remove(),_.enter().append("path").attr("class","area").attr("data-id",(function(t){return t.id})).attr("d",h(o)).merge(_).transition(Qo).attr("d",(function(t){return h(t.values)})).style("fill",(function(t){return v(t.values)})),function(t,i){var o=t.select(".g-points"),a=o.selectAll(".point-circle").data(i.values,(function(t){return t.year}));a.exit().remove(),a.enter().append("circle").attr("class","point-circle point").attr("r",2).attr("cx",(function(t){return f(t.year)})).attr("cy",(function(t){return l(t[r])})).merge(a).classed("is-visible",(function(t){return t.year===e||t.year===n})).attr("data-year",(function(t){return t.year})).transition(Qo).attr("cx",(function(t){return f(t.year)})).attr("cy",(function(t){return l(t[r])}));var u=o.selectAll(".point-label").data(i.values,(function(t){return t.year}));u.exit().remove(),u.enter().append("text").attr("class","point-label point").attr("x",(function(t){return f(t.year)})).attr("y",(function(t){return l(t[r])-5})).merge(u).classed("is-visible",(function(t){return t.year===e||t.year===n})).attr("data-year",(function(t){return t.year})).transition(Qo).attr("x",(function(t){return f(t.year)})).attr("y",(function(t){return l(t[r])-5})).text((function(t){return Jo(t[r])}));var c=o.selectAll(".point-year").data(i.values,(function(t){return t.year}));c.exit().remove(),c.enter().append("text").attr("class","point-year point").attr("x",(function(t){return f(t.year)})).attr("y",s+16).merge(c).classed("is-visible",!1).attr("data-year",(function(t){return t.year})).transition(Qo).attr("x",(function(t){return f(t.year)})).attr("y",s+16).text((function(t){return t.year}))}(b,t)}function v(t){return a(t[t.length-1][r])}function g(t){var e=t.datum();h({container:t,data:e}),function(t){var e=t.container,n=t.data,o=e.selectAll(".province").data(n,(function(t){return t.id}));o.exit().remove(),o.enter().append("figure").attr("class","province").attr("data-id",(function(t){return t.id})).merge(o).style("grid-column",(function(t){return Wo[t.id].x})).style("grid-row",(function(t){return Wo[t.id].y})).attr("aria-label",(function(t){return"".concat(t.province," had ").concat(Jo(t.values[0][r])," total ").concat(i[r].title," in ").concat(t.values[0].year," and ").concat(Jo(t.values[t.values.length-1][r])," in ").concat(t.values[t.values.length-1].year,".")})).each(d)}({container:t,data:e})}g.width=function(){if(!arguments.length)return c;var t=window.getComputedStyle(document.documentElement).getPropertyValue("--grid-columns");return s=((c=(arguments.length<=0?void 0:arguments[0])/t)-u.left-u.right)/1.33333333333,g},g.currentCategory=function(){return arguments.length?(r=arguments.length<=0?void 0:arguments[0],g):r},g.years=function(){return arguments.length?(e=(t=arguments.length<=0?void 0:arguments[0])[0],n=t[t.length-1],g):t},g.scaleColor=function(){return arguments.length?(a=arguments.length<=0?void 0:arguments[0],g):a};var y={currentID:null,currentYear:null,mouseover:function(t){y.currentID=t.id,y.currentYear=y.getYear(this),y.highlightChart()},mouseleave:function(){y.resetChart(),y.hidePoints()},mousemove:function(){var t=y.getYear(this);t!=y.currentYear&&(y.currentYear=t,y.showPoints())},highlightChart:function(){_i('.chart[data-id="'+this.currentID+'"], .map-province[data-id="'+this.currentID+'"]').classed("is-highlighted",!0),_i('.chart:not([data-id="'+this.currentID+'"]), .map-province:not([data-id="'+this.currentID+'"])').classed("is-faded",!0)},resetChart:function(){_i(".chart, .map-province").classed("is-faded",!1).classed("is-highlighted",!1)},showPoints:function(){var t=this,e=_i(".chart .point");e.filter((function(e){return e.year===t.currentYear})).classed("is-visible",!0),e.filter((function(e){return e.year!==t.currentYear})).classed("is-visible",!1),_i(".chart .axis").classed("is-hidden",!0)},hidePoints:function(){_i(".chart .point").classed("is-visible",!1),_i('.chart .point-circle[data-year="'+e+'"], .chart .point-label[data-year="'+e+'"]').classed("is-visible",!0),_i('.chart .point-circle[data-year="'+n+'"], .chart .point-label[data-year="'+n+'"]').classed("is-visible",!0),_i(".chart .axis").classed("is-hidden",!1)},getYear:function(t){return Math.round(f.invert(Mi(t)[0]))}};return g}(),Jo=x(".2~s"),Qo=Ho().duration(750);var Ko={init:function(t){var e;(Go=xi(t.container)).datum(t.data),Zo.years(t.years),Zo.currentCategory(t.currentCategory),Zo.scaleColor(t.scaleColor),e=Go.node().offsetWidth,Zo.width(e),Go.call(Zo)}},ta=(n(124),n(128),{}),ea={};function na(t){return new Function("d","return {"+t.map((function(t,e){return JSON.stringify(t)+": d["+e+'] || ""'})).join(",")+"}")}function ra(t){var e=Object.create(null),n=[];return t.forEach((function(t){for(var r in t)r in e||n.push(e[r]=r)})),n}function ia(t,e){var n=t+"",r=n.length;return r<e?new Array(e-r+1).join(0)+n:n}function oa(t){var e,n=t.getUTCHours(),r=t.getUTCMinutes(),i=t.getUTCSeconds(),o=t.getUTCMilliseconds();return isNaN(t)?"Invalid Date":((e=t.getUTCFullYear())<0?"-"+ia(-e,6):e>9999?"+"+ia(e,6):ia(e,4))+"-"+ia(t.getUTCMonth()+1,2)+"-"+ia(t.getUTCDate(),2)+(o?"T"+ia(n,2)+":"+ia(r,2)+":"+ia(i,2)+"."+ia(o,3)+"Z":i?"T"+ia(n,2)+":"+ia(r,2)+":"+ia(i,2)+"Z":r||n?"T"+ia(n,2)+":"+ia(r,2)+"Z":"")}var aa=function(t){var e=new RegExp('["'+t+"\n\r]"),n=t.charCodeAt(0);function r(t,e){var r,i=[],o=t.length,a=0,u=0,c=o<=0,s=!1;function f(){if(c)return ea;if(s)return s=!1,ta;var e,r,i=a;if(34===t.charCodeAt(i)){for(;a++<o&&34!==t.charCodeAt(a)||34===t.charCodeAt(++a););return(e=a)>=o?c=!0:10===(r=t.charCodeAt(a++))?s=!0:13===r&&(s=!0,10===t.charCodeAt(a)&&++a),t.slice(i+1,e-1).replace(/""/g,'"')}for(;a<o;){if(10===(r=t.charCodeAt(e=a++)))s=!0;else if(13===r)s=!0,10===t.charCodeAt(a)&&++a;else if(r!==n)continue;return t.slice(i,e)}return c=!0,t.slice(i,o)}for(10===t.charCodeAt(o-1)&&--o,13===t.charCodeAt(o-1)&&--o;(r=f())!==ea;){for(var l=[];r!==ta&&r!==ea;)l.push(r),r=f();e&&null==(l=e(l,u++))||i.push(l)}return i}function i(e,n){return e.map((function(e){return n.map((function(t){return a(e[t])})).join(t)}))}function o(e){return e.map(a).join(t)}function a(t){return null==t?"":t instanceof Date?oa(t):e.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,e){var n,i,o=r(t,(function(t,r){if(n)return n(t,r-1);i=t,n=e?function(t,e){var n=na(t);return function(r,i){return e(n(r),i,t)}}(t,e):na(t)}));return o.columns=i||[],o},parseRows:r,format:function(e,n){return null==n&&(n=ra(e)),[n.map(a).join(t)].concat(i(e,n)).join("\n")},formatBody:function(t,e){return null==e&&(e=ra(t)),i(t,e).join("\n")},formatRows:function(t){return t.map(o).join("\n")},formatRow:o,formatValue:a}},ua=aa(","),ca=ua.parse,sa=(ua.parseRows,ua.format,ua.formatBody,ua.formatRows,ua.formatRow,ua.formatValue,aa("\t")),fa=sa.parse;sa.parseRows,sa.format,sa.formatBody,sa.formatRows,sa.formatRow,sa.formatValue;function la(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);return t.text()}var ha=function(t,e){return fetch(t,e).then(la)};function pa(t){return function(e,n,r){return 2===arguments.length&&"function"==typeof n&&(r=n,n=void 0),ha(e,n).then((function(e){return t(e,r)}))}}var da=pa(ca);pa(fa),n(129),n(131);function va(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},o=Object.keys(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(r=0;r<o.length;r++)n=o[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}function ga(t){var e=t.objectArray,n=t.key,r=t.sortBy,i=e.reduce((function(t,e){var i=e.id,o=e.province,a=va(e,["id","province"]);return t[e[n]]=t[e[n]]||{values:[],id:i,province:o},t[e[n]].values.push(a),t[e[n]].values.sort((function(t,e){return t[r]-e[r]})),t}),{});return Object.values(i)}function ya(t,e,n,r,i,o,a){try{var u=t[o](a),c=u.value}catch(t){return void n(t)}u.done?e(c):Promise.resolve(c).then(r,i)}function ma(t){return function(){var e=this,n=arguments;return new Promise((function(r,i){var o=t.apply(e,n);function a(t){ya(o,r,i,a,u,"next",t)}function u(t){ya(o,r,i,a,u,"throw",t)}a(void 0)}))}}var ba=["id","province"];function wa(){return(wa=ma(regeneratorRuntime.mark((function t(e){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,da(e,(function(t){for(var e in t)ba.includes(e)||(t[e]=+t[e]);return t})).then((function(t){var e={years:{}};return o.forEach((function(n){e.years[n]=Array.from(new Set(t.filter((function(t){return 0!==t[n]})).map((function(t){return t.year})))).sort()})),e.values=ga({objectArray:t,key:"province",sortBy:"year"}).sort((function(t,e){return t.province.localeCompare(e.province)})),e}));case 2:return n=t.sent,t.abrupt("return",n);case 4:case"end":return t.stop()}}),t)})))).apply(this,arguments)}var xa=function(t){return wa.apply(this,arguments)},_a=(n(132),{svg:"http://www.w3.org/2000/svg",xhtml:"http://www.w3.org/1999/xhtml",xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"}),Ma=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),_a.hasOwnProperty(e)?{space:_a[e],local:t}:t};function Ea(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return"http://www.w3.org/1999/xhtml"===n&&"http://www.w3.org/1999/xhtml"===e.documentElement.namespaceURI?e.createElement(t):e.createElementNS(n,t)}}function Aa(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var Sa=function(t){var e=Ma(t);return(e.local?Aa:Ea)(e)},Oa=0;function Ta(){this._="@"+(++Oa).toString(36)}Ta.prototype=function(){return new Ta}.prototype={constructor:Ta,get:function(t){for(var e=this._;!(e in t);)if(!(t=t.parentNode))return;return t[e]},set:function(t,e){return t[this._]=e},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var ja=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var ka=document.documentElement;if(!ka.matches){var Ca=ka.webkitMatchesSelector||ka.msMatchesSelector||ka.mozMatchesSelector||ka.oMatchesSelector;ja=function(t){return function(){return Ca.call(this,t)}}}}var Da=ja,Pa={},Na=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Pa={mouseenter:"mouseover",mouseleave:"mouseout"}));function La(t,e,n){return t=Fa(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function Fa(t,e,n){return function(r){var i=Na;Na=r;try{t.call(this,this.__data__,e,n)}finally{Na=i}}}function Ia(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}function Ua(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,o=e.length;r<o;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.capture);++i?e.length=i:delete this.__on}}}function Ra(t,e,n){var r=Pa.hasOwnProperty(t.type)?La:Fa;return function(i,o,a){var u,c=this.__on,s=r(e,o,a);if(c)for(var f=0,l=c.length;f<l;++f)if((u=c[f]).type===t.type&&u.name===t.name)return this.removeEventListener(u.type,u.listener,u.capture),this.addEventListener(u.type,u.listener=s,u.capture=n),void(u.value=e);this.addEventListener(t.type,s,n),u={type:t.type,name:t.name,value:e,listener:s,capture:n},c?c.push(u):this.__on=[u]}}function Ha(){}var qa=function(t){return null==t?Ha:function(){return this.querySelector(t)}};function Va(){return[]}var Ya=function(t){return new Array(t.length)};function Ba(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}Ba.prototype={constructor:Ba,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};function za(t,e,n,r,i,o){for(var a,u=0,c=e.length,s=o.length;u<s;++u)(a=e[u])?(a.__data__=o[u],r[u]=a):n[u]=new Ba(t,o[u]);for(;u<c;++u)(a=e[u])&&(i[u]=a)}function Wa(t,e,n,r,i,o,a){var u,c,s,f={},l=e.length,h=o.length,p=new Array(l);for(u=0;u<l;++u)(c=e[u])&&(p[u]=s="$"+a.call(c,c.__data__,u,e),s in f?i[u]=c:f[s]=c);for(u=0;u<h;++u)(c=f[s="$"+a.call(t,o[u],u,o)])?(r[u]=c,c.__data__=o[u],f[s]=null):n[u]=new Ba(t,o[u]);for(u=0;u<l;++u)(c=e[u])&&f[p[u]]===c&&(i[u]=c)}function $a(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function Xa(t){return function(){this.removeAttribute(t)}}function Ga(t){return function(){this.removeAttributeNS(t.space,t.local)}}function Za(t,e){return function(){this.setAttribute(t,e)}}function Ja(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function Qa(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function Ka(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}var tu=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function eu(t){return function(){this.style.removeProperty(t)}}function nu(t,e,n){return function(){this.style.setProperty(t,e,n)}}function ru(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function iu(t){return function(){delete this[t]}}function ou(t,e){return function(){this[t]=e}}function au(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function uu(t){return t.trim().split(/^|\s+/)}function cu(t){return t.classList||new su(t)}function su(t){this._node=t,this._names=uu(t.getAttribute("class")||"")}function fu(t,e){for(var n=cu(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function lu(t,e){for(var n=cu(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}function hu(t){return function(){fu(this,t)}}function pu(t){return function(){lu(this,t)}}function du(t,e){return function(){(e.apply(this,arguments)?fu:lu)(this,t)}}su.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function vu(){this.textContent=""}function gu(t){return function(){this.textContent=t}}function yu(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function mu(){this.innerHTML=""}function bu(t){return function(){this.innerHTML=t}}function wu(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function xu(){this.nextSibling&&this.parentNode.appendChild(this)}function _u(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Mu(){return null}function Eu(){var t=this.parentNode;t&&t.removeChild(this)}function Au(t,e,n){var r=tu(t),i=r.CustomEvent;i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}function Su(t,e){return function(){return Au(this,t,e)}}function Ou(t,e){return function(){return Au(this,t,e.apply(this,arguments))}}var Tu=[null];function ju(t,e){this._groups=t,this._parents=e}function ku(){return new ju([[document.documentElement]],Tu)}ju.prototype=ku.prototype={constructor:ju,select:function(t){"function"!=typeof t&&(t=qa(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a,u=e[i],c=u.length,s=r[i]=new Array(c),f=0;f<c;++f)(o=u[f])&&(a=t.call(o,o.__data__,f,u))&&("__data__"in o&&(a.__data__=o.__data__),s[f]=a);return new ju(r,this._parents)},selectAll:function(t){var e;"function"!=typeof t&&(t=null==(e=t)?Va:function(){return this.querySelectorAll(e)});for(var n=this._groups,r=n.length,i=[],o=[],a=0;a<r;++a)for(var u,c=n[a],s=c.length,f=0;f<s;++f)(u=c[f])&&(i.push(t.call(u,u.__data__,f,c)),o.push(u));return new ju(i,o)},filter:function(t){"function"!=typeof t&&(t=Da(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],u=a.length,c=r[i]=[],s=0;s<u;++s)(o=a[s])&&t.call(o,o.__data__,s,a)&&c.push(o);return new ju(r,this._parents)},data:function(t,e){if(!t)return d=new Array(this.size()),f=-1,this.each((function(t){d[++f]=t})),d;var n,r=e?Wa:za,i=this._parents,o=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var a=o.length,u=new Array(a),c=new Array(a),s=new Array(a),f=0;f<a;++f){var l=i[f],h=o[f],p=h.length,d=t.call(l,l&&l.__data__,f,i),v=d.length,g=c[f]=new Array(v),y=u[f]=new Array(v);r(l,h,g,y,s[f]=new Array(p),d,e);for(var m,b,w=0,x=0;w<v;++w)if(m=g[w]){for(w>=x&&(x=w+1);!(b=y[x])&&++x<v;);m._next=b||null}}return(u=new ju(u,i))._enter=c,u._exit=s,u},enter:function(){return new ju(this._enter||this._groups.map(Ya),this._parents)},exit:function(){return new ju(this._exit||this._groups.map(Ya),this._parents)},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var c,s=e[u],f=n[u],l=s.length,h=a[u]=new Array(l),p=0;p<l;++p)(c=s[p]||f[p])&&(h[p]=c);for(;u<r;++u)a[u]=e[u];return new ju(a,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&a!==r.nextSibling&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=$a);for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var a,u=n[o],c=u.length,s=i[o]=new Array(c),f=0;f<c;++f)(a=u[f])&&(s[f]=a);s.sort(e)}return new ju(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each((function(){t[++e]=this})),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,o=e[n],a=0,u=o.length;a<u;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,e){var n=Ma(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?Ga:Xa:"function"==typeof e?n.local?Ka:Qa:n.local?Ja:Za)(n,e))},style:function(t,e,n){var r;return arguments.length>1?this.each((null==e?eu:"function"==typeof e?ru:nu)(t,e,null==n?"":n)):tu(r=this.node()).getComputedStyle(r,null).getPropertyValue(t)},property:function(t,e){return arguments.length>1?this.each((null==e?iu:"function"==typeof e?au:ou)(t,e)):this.node()[t]},classed:function(t,e){var n=uu(t+"");if(arguments.length<2){for(var r=cu(this.node()),i=-1,o=n.length;++i<o;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?du:e?hu:pu)(n,e))},text:function(t){return arguments.length?this.each(null==t?vu:("function"==typeof t?yu:gu)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?mu:("function"==typeof t?wu:bu)(t)):this.node().innerHTML},raise:function(){return this.each(xu)},lower:function(){return this.each(_u)},append:function(t){var e="function"==typeof t?t:Sa(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:Sa(t),r=null==e?Mu:"function"==typeof e?e:qa(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(Eu)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,i,o=Ia(t+""),a=o.length;if(!(arguments.length<2)){for(u=e?Ra:Ua,null==n&&(n=!1),r=0;r<a;++r)this.each(u(o[r],e,n));return this}var u=this.node().__on;if(u)for(var c,s=0,f=u.length;s<f;++s)for(r=0,c=u[s];r<a;++r)if((i=o[r]).type===c.type&&i.name===c.name)return c.value},dispatch:function(t,e){return this.each(("function"==typeof e?Ou:Su)(t,e))}};var Cu,Du=function(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]},Pu=function(t){return(t=Du(Math.abs(t)))?t[1]:NaN},Nu=function(t,e){var n=Du(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},Lu={"":function(t,e){t:for(var n,r=(t=t.toPrecision(e)).length,i=1,o=-1;i<r;++i)switch(t[i]){case".":o=n=i;break;case"0":0===o&&(o=i),n=i;break;case"e":break t;default:o>0&&(o=0)}return o>0?t.slice(0,o)+t.slice(n+1):t},"%":function(t,e){return(100*t).toFixed(e)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,e){return t.toExponential(e)},f:function(t,e){return t.toFixed(e)},g:function(t,e){return t.toPrecision(e)},o:function(t){return Math.round(t).toString(8)},p:function(t,e){return Nu(100*t,e)},r:Nu,s:function(t,e){var n=Du(t,e);if(!n)return t+"";var r=n[0],i=n[1],o=i-(Cu=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+Du(t,Math.max(0,e+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},Fu=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i,Iu=function(t){return new Uu(t)};function Uu(t){if(!(e=Fu.exec(t)))throw new Error("invalid format: "+t);var e,n=e[1]||" ",r=e[2]||">",i=e[3]||"-",o=e[4]||"",a=!!e[5],u=e[6]&&+e[6],c=!!e[7],s=e[8]&&+e[8].slice(1),f=e[9]||"";"n"===f?(c=!0,f="g"):Lu[f]||(f=""),(a||"0"===n&&"="===r)&&(a=!0,n="0",r="="),this.fill=n,this.align=r,this.sign=i,this.symbol=o,this.zero=a,this.width=u,this.comma=c,this.precision=s,this.type=f}Uu.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+this.type};var Ru=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];function Hu(t){return t}var qu,Vu,Yu,Bu=function(t){var e,n,r=t.grouping&&t.thousands?(e=t.grouping,n=t.thousands,function(t,r){for(var i=t.length,o=[],a=0,u=e[0],c=0;i>0&&u>0&&(c+u+1>r&&(u=Math.max(1,r-c)),o.push(t.substring(i-=u,i+u)),!((c+=u+1)>r));)u=e[a=(a+1)%e.length];return o.reverse().join(n)}):Hu,i=t.currency,o=t.decimal;function a(t){var e=(t=Iu(t)).fill,n=t.align,a=t.sign,u=t.symbol,c=t.zero,s=t.width,f=t.comma,l=t.precision,h=t.type,p="$"===u?i[0]:"#"===u&&/[boxX]/.test(h)?"0"+h.toLowerCase():"",d="$"===u?i[1]:/[%p]/.test(h)?"%":"",v=Lu[h],g=!h||/[defgprs%]/.test(h);function y(t){var i,u,y,m=p,b=d;if("c"===h)b=v(t)+b,t="";else{var w=((t=+t)<0||1/t<0)&&(t*=-1,!0);if(t=v(t,l),w)for(i=-1,u=t.length,w=!1;++i<u;)if(48<(y=t.charCodeAt(i))&&y<58||"x"===h&&96<y&&y<103||"X"===h&&64<y&&y<71){w=!0;break}if(m=(w?"("===a?a:"-":"-"===a||"("===a?"":a)+m,b=b+("s"===h?Ru[8+Cu/3]:"")+(w&&"("===a?")":""),g)for(i=-1,u=t.length;++i<u;)if(48>(y=t.charCodeAt(i))||y>57){b=(46===y?o+t.slice(i+1):t.slice(i))+b,t=t.slice(0,i);break}}f&&!c&&(t=r(t,1/0));var x=m.length+t.length+b.length,_=x<s?new Array(s-x+1).join(e):"";switch(f&&c&&(t=r(_+t,_.length?s-b.length:1/0),_=""),n){case"<":return m+t+b+_;case"=":return m+_+t+b;case"^":return _.slice(0,x=_.length>>1)+m+t+b+_.slice(x)}return _+m+t+b}return l=null==l?h?6:12:/[gprs]/.test(h)?Math.max(1,Math.min(21,l)):Math.max(0,Math.min(20,l)),y.toString=function(){return t+""},y}return{format:a,formatPrefix:function(t,e){var n=a(((t=Iu(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(Pu(e)/3))),i=Math.pow(10,-r),o=Ru[8+r/3];return function(t){return n(i*t)+o}}}};!function(t){qu=Bu(t),Vu=qu.format,Yu=qu.formatPrefix}({decimal:".",thousands:",",grouping:[3],currency:["$",""]});var zu=function(t,e){return t<e?-1:t>e?1:t>=e?0:NaN},Wu=function(t){var e;return 1===t.length&&(e=t,t=function(t,n){return zu(e(t),n)}),{left:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)<0?r=o+1:i=o}return r},right:function(e,n,r,i){for(null==r&&(r=0),null==i&&(i=e.length);r<i;){var o=r+i>>>1;t(e[o],n)>0?i=o:r=o+1}return r}}};var $u=Wu(zu),Xu=$u.right,Gu=($u.left,Xu),Zu=Array.prototype,Ju=(Zu.slice,Zu.map,function(t,e,n){t=+t,e=+e,n=(i=arguments.length)<2?(e=t,t=0,1):i<3?1:+n;for(var r=-1,i=0|Math.max(0,Math.ceil((e-t)/n)),o=new Array(i);++r<i;)o[r]=t+r*n;return o}),Qu=Math.sqrt(50),Ku=Math.sqrt(10),tc=Math.sqrt(2),ec=function(t,e,n){var r=nc(t,e,n);return Ju(Math.ceil(t/r)*r,Math.floor(e/r)*r+r/2,r)};function nc(t,e,n){var r=Math.abs(e-t)/Math.max(0,n),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=Qu?i*=10:o>=Ku?i*=5:o>=tc&&(i*=2),e<t?-i:i}var rc=function(t,e){var n,r=0,i=t.length,o=-1;if(null==e)for(;++o<i;)(n=+t[o])&&(r+=n);else for(;++o<i;)(n=+e(t[o],o,t))&&(r+=n);return r};var ic=Array.prototype,oc=ic.map,ac=ic.slice;var uc=function(t){return function(){return t}},cc=function(t){return+t},sc=[0,1];function fc(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:uc(e)}function lc(t,e,n,r){var i=t[0],o=t[1],a=e[0],u=e[1];return o<i?(i=n(o,i),a=r(u,a)):(i=n(i,o),a=r(a,u)),function(t){return a(i(t))}}function hc(t,e,n,r){var i=Math.min(t.length,e.length)-1,o=new Array(i),a=new Array(i),u=-1;for(t[i]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++u<i;)o[u]=n(t[u],t[u+1]),a[u]=r(e[u],e[u+1]);return function(e){var n=Gu(t,e,1,i)-1;return a[n](o[n](e))}}function pc(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp())}function dc(t,e){var n,r,i,o=sc,a=sc,u=Kt,c=!1;function s(){return n=Math.min(o.length,a.length)>2?hc:lc,r=i=null,f}function f(e){return(r||(r=n(o,a,c?function(t){return function(e,n){var r=t(e=+e,n=+n);return function(t){return t<=e?0:t>=n?1:r(t)}}}(t):t,u)))(+e)}return f.invert=function(t){return(i||(i=n(a,o,fc,c?function(t){return function(e,n){var r=t(e=+e,n=+n);return function(t){return t<=0?e:t>=1?n:r(t)}}}(e):e)))(+t)},f.domain=function(t){return arguments.length?(o=oc.call(t,cc),s()):o.slice()},f.range=function(t){return arguments.length?(a=ac.call(t),s()):a.slice()},f.rangeRound=function(t){return a=ac.call(t),u=te,s()},f.clamp=function(t){return arguments.length?(c=!!t,s()):c},f.interpolate=function(t){return arguments.length?(u=t,s()):u},s()}var vc=function(t,e,n){var r,i=t[0],o=t[t.length-1],a=nc(i,o,null==e?10:e);switch((n=Iu(null==n?",f":n)).type){case"s":var u=Math.max(Math.abs(i),Math.abs(o));return null!=n.precision||isNaN(r=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Pu(e)/3)))-Pu(Math.abs(t)))}(a,u))||(n.precision=r),Yu(n,u);case"":case"e":case"g":case"p":case"r":null!=n.precision||isNaN(r=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,Pu(e)-Pu(t))+1}(a,Math.max(Math.abs(i),Math.abs(o))))||(n.precision=r-("e"===n.type));break;case"f":case"%":null!=n.precision||isNaN(r=function(t){return Math.max(0,-Pu(Math.abs(t)))}(a))||(n.precision=r-2*("%"===n.type))}return Vu(n)};function gc(t){var e=t.domain;return t.ticks=function(t){var n=e();return ec(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){return vc(e(),t,n)},t.nice=function(n){var r=e(),i=r.length-1,o=null==n?10:n,a=r[0],u=r[i],c=nc(a,u,o);return c&&(c=nc(Math.floor(a/c)*c,Math.ceil(u/c)*c,o),r[0]=Math.floor(a/c)*c,r[i]=Math.ceil(u/c)*c,e(r)),t},t}function yc(){var t=dc(fc,Xt);return t.copy=function(){return pc(t,yc())},gc(t)}var mc=function(t){return t.match(/.{6}/g).map((function(t){return"#"+t}))},bc=(mc("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),mc("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6"),mc("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9"),mc("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5"),Math.PI/180),wc=180/Math.PI,xc=-.14861,_c=1.78277,Mc=-.29227,Ec=-.90649,Ac=1.97294,Sc=Ac*Ec,Oc=Ac*_c,Tc=_c*Mc-Ec*xc;function jc(t){if(t instanceof Cc)return new Cc(t.h,t.s,t.l,t.opacity);t instanceof jt||(t=Ot(t));var e=t.r/255,n=t.g/255,r=t.b/255,i=(Tc*r+Sc*e-Oc*n)/(Tc+Sc-Oc),o=r-i,a=(Ac*(n-i)-Mc*o)/Ec,u=Math.sqrt(a*a+o*o)/(Ac*i*(1-i)),c=u?Math.atan2(a,o)*wc-120:NaN;return new Cc(c<0?c+360:c,u,i,t.opacity)}function kc(t,e,n,r){return 1===arguments.length?jc(t):new Cc(t,e,n,null==r?1:r)}function Cc(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Dc(t){return function e(n){function r(e,r){var i=t((e=kc(e)).h,(r=kc(r)).h),o=qt(e.s,r.s),a=qt(e.l,r.l),u=qt(e.opacity,r.opacity);return function(t){return e.h=i(t),e.s=o(t),e.l=a(Math.pow(t,n)),e.opacity=u(t),e+""}}return n=+n,r.gamma=e,r}(1)}ct(Cc,kc,st(ft,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Cc(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Cc(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*bc,e=+this.l,n=isNaN(this.s)?0:this.s*e*(1-e),r=Math.cos(t),i=Math.sin(t);return new jt(255*(e+n*(xc*r+_c*i)),255*(e+n*(Mc*r+Ec*i)),255*(e+n*(Ac*r)),this.opacity)}}));Dc((function(t,e){var n=e-t;return n?Rt(t,n>180||n<-180?n-360*Math.round(n/360):n):Ut(isNaN(t)?e:t)}));var Pc=Dc(qt);Pc(kc(300,.5,0),kc(-240,.5,1)),Pc(kc(-100,.75,.35),kc(80,1.5,.8)),Pc(kc(260,.75,.35),kc(80,1.5,.8)),kc();function Nc(t){var e=t.length;return function(n){return t[Math.max(0,Math.min(e-1,Math.floor(n*e)))]}}Nc(mc("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),Nc(mc("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),Nc(mc("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),Nc(mc("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));var Lc="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},Fc=function(t){return t},Ic=function(t){for(var e=[],n=0,r=t.length;n<r;n++)e[n]=t[r-n-1];return e},Uc=function(t,e){t.each((function(){for(var t,n,r="string"==typeof(n=this)?new ju([[document.querySelector(n)]],[document.documentElement]):new ju([[n]],Tu),i=r.text().split(/\s+/).reverse(),o=[],a=(r.attr("y"),parseFloat(r.attr("dy"))||0),u=r.text(null).append("tspan").attr("x",0).attr("dy",a+"em");t=i.pop();)o.push(t),u.text(o.join(" ")),u.node().getComputedTextLength()>e&&o.length>1&&(o.pop(),u.text(o.join(" ")),o=[t],u=r.append("tspan").attr("x",0).attr("dy",1.2+a+"em").text(t))}))},Rc={d3_drawShapes:function(t,e,n,r,i,o){"rect"===t?e.attr("height",n).attr("width",r):"circle"===t?e.attr("r",i):"line"===t?e.attr("x1",0).attr("x2",r).attr("y1",0).attr("y2",0):"path"===t&&e.attr("d",o)},d3_addText:function(t,e,n,r,i){e.append("text").attr("class",r+"label");var o=t.selectAll("g."+r+"cell text."+r+"label").data(n).text(Fc);return i&&t.selectAll("g."+r+"cell text."+r+"label").call(Uc,i),o},d3_calcType:function(t,e,n,r,i,o){var a=t.invertExtent?function(t,e,n){var r=t.range().map((function(r){var i=t.invertExtent(r);return e(i[0])+" "+n+" "+e(i[1])}));return{data:t.range(),labels:r,feature:Fc}}(t,i,o):t.ticks?function(t,e,n){var r=[];if(e.length>1)r=e;else for(var i=t.domain(),o=(i[i.length-1]-i[0])/(e-1),a=0;a<e;a++)r.push(i[0]+a*o);var u=r.map(n);return{data:r,labels:u,feature:function(e){return t(e)}}}(t,n,i):function(t){return{data:t.domain(),labels:t.domain(),feature:function(e){return t(e)}}}(t),u=t.range&&t.range()||t.domain();return a.labels=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments[1],n=arguments[2],r=arguments[3],i=arguments[4];if("object"===(void 0===e?"undefined":Lc(e))){if(0===e.length)return t;for(var o=e.length;o<t.length;o++)e.push(t[o]);return e}if("function"==typeof e){for(var a=[],u=t.length,c=0;c<u;c++)a.push(e({i:c,genLength:u,generatedLabels:t,domain:n,range:r,labelDelimiter:i}));return a}return t}(a.labels,r,t.domain(),u,o),e&&(a.labels=Ic(a.labels),a.data=Ic(a.data)),a},d3_filterCells:function(t,e){var n=t.data.map((function(e,n){return{data:e,label:t.labels[n]}})).filter(e),r=n.map((function(t){return t.data})),i=n.map((function(t){return t.label}));return t.data=t.data.filter((function(t){return-1!==r.indexOf(t)})),t.labels=t.labels.filter((function(t){return-1!==i.indexOf(t)})),t},d3_placement:function(t,e,n,r,i,o){e.attr("transform",n),r.attr("transform",i),"horizontal"===t&&r.style("text-anchor",o)},d3_addEvents:function(t,e){t.on("mouseover.legend",(function(t){!function(t,e,n){t.call("cellover",n,e)}(e,t,this)})).on("mouseout.legend",(function(t){!function(t,e,n){t.call("cellout",n,e)}(e,t,this)})).on("click.legend",(function(t){!function(t,e,n){t.call("cellclick",n,e)}(e,t,this)}))},d3_title:function(t,e,n,r){if(""!==e){t.selectAll("text."+n+"legendTitle").data([e]).enter().append("text").attr("class",n+"legendTitle"),t.selectAll("text."+n+"legendTitle").text(e),r&&t.selectAll("text."+n+"legendTitle").call(Uc,r);var i=t.select("."+n+"legendCells"),o=t.select("."+n+"legendTitle").nodes().map((function(t){return t.getBBox().height}))[0],a=-i.nodes().map((function(t){return t.getBBox().x}))[0];i.attr("transform","translate("+a+","+o+")")}},d3_defaultLocale:{format:Vu,formatPrefix:Yu},d3_defaultFormatSpecifier:".01f",d3_defaultDelimiter:"to"};function Hc(){var t=yc(),e="rect",n=15,r=15,i=10,o=2,a=[5],u=void 0,c=[],s="",f=!1,l="",h=Rc.d3_defaultLocale,p=Rc.d3_defaultFormatSpecifier,d=10,v="middle",g=Rc.d3_defaultDelimiter,y=void 0,m="vertical",b=!1,w=void 0,x=void 0,_=Di("cellover","cellout","cellclick");function M(M){var E=Rc.d3_calcType(t,b,a,c,h.format(p),g);M.selectAll("g").data([t]).enter().append("g").attr("class",s+"legendCells"),u&&Rc.d3_filterCells(E,u);var A=M.select("."+s+"legendCells").selectAll("."+s+"cell").data(E.data),S=A.enter().append("g").attr("class",s+"cell");S.append(e).attr("class",s+"swatch");var O=M.selectAll("g."+s+"cell "+e+"."+s+"swatch").data(E.data);Rc.d3_addEvents(S,_),A.exit().transition().style("opacity",0).remove(),O.exit().transition().style("opacity",0).remove(),O=O.merge(O),Rc.d3_drawShapes(e,O,r,n,i,w);var T=Rc.d3_addText(M,S,E.labels,s,y);A=S.merge(A);var j=T.nodes().map((function(t){return t.getBBox()})),k=O.nodes().map((function(t){return t.getBBox()}));f?O.attr("class",(function(t){return s+"swatch "+E.feature(t)})):"line"==e?O.style("stroke",E.feature):O.style("fill",E.feature);var C,D=void 0,P=void 0,N="start"==v?0:"middle"==v?.5:1;"vertical"===m?(C=j.map((function(t,e){return Math.max(t.height,k[e].height)})),D=function(t,e){return"translate(0, "+(rc(C.slice(0,e))+e*o)+")"},P=function(t,e){return"translate( "+(k[e].width+k[e].x+d)+", "+(k[e].y+k[e].height/2+5)+")"}):"horizontal"===m&&(D=function(t,e){return"translate("+e*(k[e].width+o)+",0)"},P=function(t,e){return"translate("+(k[e].width*N+k[e].x)+",\n          "+(k[e].height+k[e].y+d+8)+")"}),Rc.d3_placement(m,A,D,T,P,v),Rc.d3_title(M,l,s,x),A.transition().style("opacity",1)}return M.scale=function(e){return arguments.length?(t=e,M):t},M.cells=function(t){return arguments.length?((t.length>1||t>=2)&&(a=t),M):a},M.cellFilter=function(t){return arguments.length?(u=t,M):u},M.shape=function(t,n){return arguments.length?(("rect"==t||"circle"==t||"line"==t||"path"==t&&"string"==typeof n)&&(e=t,w=n),M):e},M.shapeWidth=function(t){return arguments.length?(n=+t,M):n},M.shapeHeight=function(t){return arguments.length?(r=+t,M):r},M.shapeRadius=function(t){return arguments.length?(i=+t,M):i},M.shapePadding=function(t){return arguments.length?(o=+t,M):o},M.labels=function(t){return arguments.length?(c=t,M):c},M.labelAlign=function(t){return arguments.length?("start"!=t&&"end"!=t&&"middle"!=t||(v=t),M):v},M.locale=function(t){return arguments.length?(h=Bu(t),M):h},M.labelFormat=function(t){return arguments.length?(p=Iu(t),M):M.locale().format(p)},M.labelOffset=function(t){return arguments.length?(d=+t,M):d},M.labelDelimiter=function(t){return arguments.length?(g=t,M):g},M.labelWrap=function(t){return arguments.length?(y=t,M):y},M.useClass=function(t){return arguments.length?(!0!==t&&!1!==t||(f=t),M):f},M.orient=function(t){return arguments.length?("horizontal"!=(t=t.toLowerCase())&&"vertical"!=t||(m=t),M):m},M.ascending=function(t){return arguments.length?(b=!!t,M):b},M.classPrefix=function(t){return arguments.length?(s=t,M):s},M.title=function(t){return arguments.length?(l=t,M):l},M.titleWidth=function(t){return arguments.length?(x=t,M):x},M.textWrap=function(t){return arguments.length?(textWrap=t,M):textWrap},M.on=function(){var t=_.on.apply(_,arguments);return t===_?M:t},M}var qc={colorDomain:[],setup:function(){var t=xi("#interactive__legend").attr("width","225px").attr("height","30px");t.append("g").attr("class","legendQuant");var e=this.returnColorScale(),n=Hc().labelFormat(x(".2s")).labels(this.labelFormatter).scale(e).shapeWidth(30).shapeHeight(10).shapePadding(1).orient("horizontal").labelAlign("end").labelOffset(5);t.select(".legendQuant").call(n),t.selectAll("text").each((function(t,e,n){xi(this).attr("transform","translate(40, 23)")}))},labelFormatter:function(t){var e=t.i,n=t.genLength,r=t.generatedLabels,i=t.labelDelimiter,o=r[e].split(" ".concat(i," "));if(e!==n-1)return o[1]},returnColorScale:function(){return function t(){var e,n=[.5],r=[0,1],i=1;function o(t){return t<=t?r[B(n,t,0,i)]:e}return o.domain=function(t){return arguments.length?(n=ut.call(t),i=Math.min(n.length,r.length-1),o):n.slice()},o.range=function(t){return arguments.length?(r=ut.call(t),i=Math.min(n.length,r.length-1),o):r.slice()},o.invertExtent=function(t){var e=r.indexOf(t);return[n[e-1],n[e]]},o.unknown=function(t){return arguments.length?(e=t,o):e},o.copy=function(){return t().domain(n).range(r).unknown(e)},Q.apply(o,arguments)}().domain(this.colorDomain).range(["#b9dff4","#9cd2ef","#84bbe0","#6ca4d0","#538ec1","#3579b2","#0064a3"])}};function Vc(t){if(!t.ok)throw new Error(t.status+" "+t.statusText);if(204!==t.status&&205!==t.status)return t.json()}var Yc=function(t,e){return fetch(t,e).then(Vc)},Bc=Math.PI,zc=2*Bc,Wc=180/Bc,$c=Bc/180,Xc=Math.abs,Gc=(Math.atan,Math.atan2,Math.cos),Zc=(Math.ceil,Math.exp,Math.floor,Math.log,Math.pow,Math.sin),Jc=(Math.sign,Math.sqrt);Math.tan;function Qc(){}function Kc(t,e,n,r){this.x=t,this.z=e,this.o=n,this.e=r,this.v=!1,this.n=this.p=null}var ts=function(t,e,n,r,i){var o,a,u=[],c=[];if(t.forEach((function(t){if(!((e=t.length-1)<=0)){var e,n,r,a,s=t[0],f=t[e];if(a=f,Xc((r=s)[0]-a[0])<1e-6&&Xc(r[1]-a[1])<1e-6){if(!s[2]&&!f[2]){for(i.lineStart(),o=0;o<e;++o)i.point((s=t[o])[0],s[1]);return void i.lineEnd()}f[0]+=2e-6}u.push(n=new Kc(s,t,null,!0)),c.push(n.o=new Kc(s,null,n,!1)),u.push(n=new Kc(f,t,null,!1)),c.push(n.o=new Kc(f,null,n,!0))}})),u.length){for(c.sort(e),es(u),es(c),o=0,a=c.length;o<a;++o)c[o].e=n=!n;for(var s,f,l=u[0];;){for(var h=l,p=!0;h.v;)if((h=h.n)===l)return;s=h.z,i.lineStart();do{if(h.v=h.o.v=!0,h.e){if(p)for(o=0,a=s.length;o<a;++o)i.point((f=s[o])[0],f[1]);else r(h.x,h.n.x,1,i);h=h.n}else{if(p)for(s=h.p.z,o=s.length-1;o>=0;--o)i.point((f=s[o])[0],f[1]);else r(h.x,h.p.x,-1,i);h=h.p}s=(h=h.o).z,p=!p}while(!h.v);i.lineEnd()}}};function es(t){if(e=t.length){for(var e,n,r=0,i=t[0];++r<e;)i.n=n=t[r],n.p=i,i=n;i.n=n=t[0],n.p=i}}function ns(t,e,n,r){function i(i,o){return t<=i&&i<=n&&e<=o&&o<=r}function o(i,o,u,s){var f=0,l=0;if(null==i||(f=a(i,u))!==(l=a(o,u))||c(i,o)<0^u>0)do{s.point(0===f||3===f?t:n,f>1?r:e)}while((f=(f+u+4)%4)!==l);else s.point(o[0],o[1])}function a(r,i){return Xc(r[0]-t)<1e-6?i>0?0:3:Xc(r[0]-n)<1e-6?i>0?2:1:Xc(r[1]-e)<1e-6?i>0?1:0:i>0?3:2}function u(t,e){return c(t.x,e.x)}function c(t,e){var n=a(t,1),r=a(e,1);return n!==r?n-r:0===n?e[1]-t[1]:1===n?t[0]-e[0]:2===n?t[1]-e[1]:e[0]-t[0]}return function(a){var c,s,f,l,h,p,d,v,g,y,m,b,w,x=a,_=(w=[],{point:function(t,e,n){b.push([t,e,n])},lineStart:function(){w.push(b=[])},lineEnd:Qc,rejoin:function(){w.length>1&&w.push(w.pop().concat(w.shift()))},result:function(){var t=w;return w=[],b=null,t}}),M={point:E,lineStart:function(){M.point=A,s&&s.push(f=[]);y=!0,g=!1,d=v=NaN},lineEnd:function(){c&&(A(l,h),p&&g&&_.rejoin(),c.push(_.result()));M.point=E,g&&x.lineEnd()},polygonStart:function(){x=_,c=[],s=[],m=!0},polygonEnd:function(){var e=function(){for(var e=0,n=0,i=s.length;n<i;++n)for(var o,a,u=s[n],c=1,f=u.length,l=u[0],h=l[0],p=l[1];c<f;++c)o=h,a=p,l=u[c],h=l[0],p=l[1],a<=r?p>r&&(h-o)*(r-a)>(p-a)*(t-o)&&++e:p<=r&&(h-o)*(r-a)<(p-a)*(t-o)&&--e;return e}(),n=m&&e,i=(c=function(t){for(var e,n,r,i=t.length,o=-1,a=0;++o<i;)a+=t[o].length;for(n=new Array(a);--i>=0;)for(e=(r=t[i]).length;--e>=0;)n[--a]=r[e];return n}(c)).length;(n||i)&&(a.polygonStart(),n&&(a.lineStart(),o(null,null,1,a),a.lineEnd()),i&&ts(c,u,e,o,a),a.polygonEnd());x=a,c=s=f=null}};function E(t,e){i(t,e)&&x.point(t,e)}function A(o,a){var u=i(o,a);if(s&&f.push([o,a]),y)l=o,h=a,p=u,y=!1,u&&(x.lineStart(),x.point(o,a));else if(u&&g)x.point(o,a);else{var c=[d=Math.max(-1e9,Math.min(1e9,d)),v=Math.max(-1e9,Math.min(1e9,v))],b=[o=Math.max(-1e9,Math.min(1e9,o)),a=Math.max(-1e9,Math.min(1e9,a))];!function(t,e,n,r,i,o){var a,u=t[0],c=t[1],s=0,f=1,l=e[0]-u,h=e[1]-c;if(a=n-u,l||!(a>0)){if(a/=l,l<0){if(a<s)return;a<f&&(f=a)}else if(l>0){if(a>f)return;a>s&&(s=a)}if(a=i-u,l||!(a<0)){if(a/=l,l<0){if(a>f)return;a>s&&(s=a)}else if(l>0){if(a<s)return;a<f&&(f=a)}if(a=r-c,h||!(a>0)){if(a/=h,h<0){if(a<s)return;a<f&&(f=a)}else if(h>0){if(a>f)return;a>s&&(s=a)}if(a=o-c,h||!(a<0)){if(a/=h,h<0){if(a>f)return;a>s&&(s=a)}else if(h>0){if(a<s)return;a<f&&(f=a)}return s>0&&(t[0]=u+s*l,t[1]=c+s*h),f<1&&(e[0]=u+f*l,e[1]=c+f*h),!0}}}}}(c,b,t,e,n,r)?u&&(x.lineStart(),x.point(o,a),m=!1):(g||(x.lineStart(),x.point(c[0],c[1])),x.point(b[0],b[1]),u||x.lineEnd(),m=!1)}d=o,v=a,g=u}return M}}var rs=function(t){return t};function is(t){return function(e){var n=new os;for(var r in t)n[r]=t[r];return n.stream=e,n}}function os(){}function as(t,e){t&&cs.hasOwnProperty(t.type)&&cs[t.type](t,e)}os.prototype={constructor:os,point:function(t,e){this.stream.point(t,e)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var us={Feature:function(t,e){as(t.geometry,e)},FeatureCollection:function(t,e){for(var n=t.features,r=-1,i=n.length;++r<i;)as(n[r].geometry,e)}},cs={Sphere:function(t,e){e.sphere()},Point:function(t,e){t=t.coordinates,e.point(t[0],t[1],t[2])},MultiPoint:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)t=n[r],e.point(t[0],t[1],t[2])},LineString:function(t,e){ss(t.coordinates,e,0)},MultiLineString:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)ss(n[r],e,0)},Polygon:function(t,e){fs(t.coordinates,e)},MultiPolygon:function(t,e){for(var n=t.coordinates,r=-1,i=n.length;++r<i;)fs(n[r],e)},GeometryCollection:function(t,e){for(var n=t.geometries,r=-1,i=n.length;++r<i;)as(n[r],e)}};function ss(t,e,n){var r,i=-1,o=t.length-n;for(e.lineStart();++i<o;)r=t[i],e.point(r[0],r[1],r[2]);e.lineEnd()}function fs(t,e){var n=-1,r=t.length;for(e.polygonStart();++n<r;)ss(t[n],e,1);e.polygonEnd()}var ls=function(t,e){t&&us.hasOwnProperty(t.type)?us[t.type](t,e):as(t,e)},hs=1/0,ps=hs,ds=-hs,vs=ds;var gs={point:function(t,e){t<hs&&(hs=t);t>ds&&(ds=t);e<ps&&(ps=e);e>vs&&(vs=e)},lineStart:Qc,lineEnd:Qc,polygonStart:Qc,polygonEnd:Qc,result:function(){var t=[[hs,ps],[ds,vs]];return ds=vs=-(ps=hs=1/0),t}};function ys(t,e,n){var r=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=r&&t.clipExtent(null),ls(n,t.stream(gs)),e(gs.result()),null!=r&&t.clipExtent(r),t}function ms(t,e,n){return ys(t,(function(n){var r=e[1][0]-e[0][0],i=e[1][1]-e[0][1],o=Math.min(r/(n[1][0]-n[0][0]),i/(n[1][1]-n[0][1])),a=+e[0][0]+(r-o*(n[1][0]+n[0][0]))/2,u=+e[0][1]+(i-o*(n[1][1]+n[0][1]))/2;t.scale(150*o).translate([a,u])}),n)}var bs=function(){var t,e,n,r,i,o,a,u=1,c=0,s=0,f=1,l=1,h=0,p=null,d=1,v=1,g=is({point:function(t,e){var n=b([t,e]);this.stream.point(n[0],n[1])}}),y=rs;function m(){return d=u*f,v=u*l,o=a=null,b}function b(n){var r=n[0]*d,i=n[1]*v;if(h){var o=i*t-r*e;r=r*t+i*e,i=o}return[r+c,i+s]}return b.invert=function(n){var r=n[0]-c,i=n[1]-s;if(h){var o=i*t+r*e;r=r*t-i*e,i=o}return[r/d,i/v]},b.stream=function(t){return o&&a===t?o:o=g(y(a=t))},b.postclip=function(t){return arguments.length?(y=t,p=n=r=i=null,m()):y},b.clipExtent=function(t){return arguments.length?(y=null==t?(p=n=r=i=null,rs):ns(p=+t[0][0],n=+t[0][1],r=+t[1][0],i=+t[1][1]),m()):null==p?null:[[p,n],[r,i]]},b.scale=function(t){return arguments.length?(u=+t,m()):u},b.translate=function(t){return arguments.length?(c=+t[0],s=+t[1],m()):[c,s]},b.angle=function(n){return arguments.length?(e=Zc(h=n%360*$c),t=Gc(h),m()):h*Wc},b.reflectX=function(t){return arguments.length?(f=t?-1:1,m()):f<0},b.reflectY=function(t){return arguments.length?(l=t?-1:1,m()):l<0},b.fitExtent=function(t,e){return ms(b,t,e)},b.fitSize=function(t,e){return function(t,e,n){return ms(t,[[0,0],e],n)}(b,t,e)},b.fitWidth=function(t,e){return function(t,e,n){return ys(t,(function(n){var r=+e,i=r/(n[1][0]-n[0][0]),o=(r-i*(n[1][0]+n[0][0]))/2,a=-i*n[0][1];t.scale(150*i).translate([o,a])}),n)}(b,t,e)},b.fitHeight=function(t,e){return function(t,e,n){return ys(t,(function(n){var r=+e,i=r/(n[1][1]-n[0][1]),o=-i*n[0][0],a=(r-i*(n[1][1]+n[0][1]))/2;t.scale(150*i).translate([o,a])}),n)}(b,t,e)},b},ws=function(){return new xs};function xs(){this.reset()}xs.prototype={constructor:xs,reset:function(){this.s=this.t=0},add:function(t){Ms(_s,t,this.t),Ms(this,_s.s,this.s),this.s?this.t+=_s.t:this.s=_s.t},valueOf:function(){return this.s}};var _s=new xs;function Ms(t,e,n){var r=t.s=e+n,i=r-e,o=r-i;t.t=e-o+(n-i)}var Es,As,Ss,Os,Ts=ws(),js=ws(),ks={point:Qc,lineStart:Qc,lineEnd:Qc,polygonStart:function(){ks.lineStart=Cs,ks.lineEnd=Ns},polygonEnd:function(){ks.lineStart=ks.lineEnd=ks.point=Qc,Ts.add(Xc(js)),js.reset()},result:function(){var t=Ts/2;return Ts.reset(),t}};function Cs(){ks.point=Ds}function Ds(t,e){ks.point=Ps,Es=Ss=t,As=Os=e}function Ps(t,e){js.add(Os*t-Ss*e),Ss=t,Os=e}function Ns(){Ps(Es,As)}var Ls,Fs,Is,Us,Rs=ks,Hs=0,qs=0,Vs=0,Ys=0,Bs=0,zs=0,Ws=0,$s=0,Xs=0,Gs={point:Zs,lineStart:Js,lineEnd:tf,polygonStart:function(){Gs.lineStart=ef,Gs.lineEnd=nf},polygonEnd:function(){Gs.point=Zs,Gs.lineStart=Js,Gs.lineEnd=tf},result:function(){var t=Xs?[Ws/Xs,$s/Xs]:zs?[Ys/zs,Bs/zs]:Vs?[Hs/Vs,qs/Vs]:[NaN,NaN];return Hs=qs=Vs=Ys=Bs=zs=Ws=$s=Xs=0,t}};function Zs(t,e){Hs+=t,qs+=e,++Vs}function Js(){Gs.point=Qs}function Qs(t,e){Gs.point=Ks,Zs(Is=t,Us=e)}function Ks(t,e){var n=t-Is,r=e-Us,i=Jc(n*n+r*r);Ys+=i*(Is+t)/2,Bs+=i*(Us+e)/2,zs+=i,Zs(Is=t,Us=e)}function tf(){Gs.point=Zs}function ef(){Gs.point=rf}function nf(){of(Ls,Fs)}function rf(t,e){Gs.point=of,Zs(Ls=Is=t,Fs=Us=e)}function of(t,e){var n=t-Is,r=e-Us,i=Jc(n*n+r*r);Ys+=i*(Is+t)/2,Bs+=i*(Us+e)/2,zs+=i,Ws+=(i=Us*t-Is*e)*(Is+t),$s+=i*(Us+e),Xs+=3*i,Zs(Is=t,Us=e)}var af=Gs;function uf(t){this._context=t}uf.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._context.moveTo(t,e),this._point=1;break;case 1:this._context.lineTo(t,e);break;default:this._context.moveTo(t+this._radius,e),this._context.arc(t,e,this._radius,0,zc)}},result:Qc};var cf,sf,ff,lf,hf,pf=ws(),df={point:Qc,lineStart:function(){df.point=vf},lineEnd:function(){cf&&gf(sf,ff),df.point=Qc},polygonStart:function(){cf=!0},polygonEnd:function(){cf=null},result:function(){var t=+pf;return pf.reset(),t}};function vf(t,e){df.point=gf,sf=lf=t,ff=hf=e}function gf(t,e){lf-=t,hf-=e,pf.add(Jc(lf*lf+hf*hf)),lf=t,hf=e}var yf=df;function mf(){this._string=[]}function bf(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}mf.prototype={_radius:4.5,_circle:bf(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,e){switch(this._point){case 0:this._string.push("M",t,",",e),this._point=1;break;case 1:this._string.push("L",t,",",e);break;default:null==this._circle&&(this._circle=bf(this._radius)),this._string.push("M",t,",",e,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};function wf(t,e,n,r,i,o,a){try{var u=t[o](a),c=u.value}catch(t){return void n(t)}u.done?e(c):Promise.resolve(c).then(r,i)}function xf(t){return function(){var e=this,n=arguments;return new Promise((function(r,i){var o=t.apply(e,n);function a(t){wf(o,r,i,a,u,"next",t)}function u(t){wf(o,r,i,a,u,"throw",t)}a(void 0)}))}}r.calculate();var _f,Mf=function(){var t,e={top:0,right:5,bottom:0,left:5},n=bs().reflectY(!0),i=function(t,e){var n,r,i=4.5;function o(t){return t&&("function"==typeof i&&r.pointRadius(+i.apply(this,arguments)),ls(t,n(r))),r.result()}return o.area=function(t){return ls(t,n(Rs)),Rs.result()},o.measure=function(t){return ls(t,n(yf)),yf.result()},o.bounds=function(t){return ls(t,n(gs)),gs.result()},o.centroid=function(t){return ls(t,n(af)),af.result()},o.projection=function(e){return arguments.length?(n=null==e?(t=null,rs):(t=e).stream,o):t},o.context=function(t){return arguments.length?(r=null==t?(e=null,new mf):new uf(e=t),"function"!=typeof i&&r.pointRadius(i),o):e},o.pointRadius=function(t){return arguments.length?(i="function"==typeof t?t:(r.pointRadius(+t),+t),o):i},o.projection(t).context(e)}(),o=200,a=200;function u(u){var s=u.datum();!function(t){var e=t.container,n=t.data;e.selectAll("svg").data([n]).enter().append("svg").append("g").append("g").attr("class","g-plot")}({container:u,data:s}),function(u){var s=u.container,f=u.data;n.scale(.12*o).translate([-75,230]),i.projection(n),r.isMobile()&&n.scale(.1*o).translate([o/2.5,a/2]);var l=s.select("svg").attr("viewBox","0 0 "+(o+e.left+e.right)+" "+(a+e.top+e.bottom)).select("g").attr("transform","translate("+e.left+","+e.top+")").select(".g-plot").selectAll("path").data(f.features);l.enter().append("path").attr("class","map-province").attr("data-id",(function(t){return t.properties.code})).attr("data-name",(function(t){return t.properties.province})).attr("d",i).on("mouseover",c.mouseover).on("mouseleave",c.mouseleave).merge(l).attr("fill",(function(e){return t(e.properties.value)}))}({container:u,data:s})}var c={mouseover:function(t){var e=t.properties.code;_i('.chart:not([data-id="'+e+'"]), .map-province:not([data-id="'+e+'"])').classed("is-faded",!0),_i('.chart[data-id="'+e+'"], .map-province[data-id="'+e+'"]').classed("is-highlighted",!0)},mouseleave:function(){_i(".chart, .map-province").classed("is-faded",!1).classed("is-highlighted",!1)}};return u.width=function(){return arguments.length?(o=(arguments.length<=0?void 0:arguments[0])-e.left-e.right,u):o},u.height=function(){return arguments.length?(a=(arguments.length<=0?void 0:arguments[0])-e.top-e.bottom,u):a},u.scaleColor=function(){return arguments.length?(t=arguments.length<=0?void 0:arguments[0],u):t},u}();function Ef(){return(Ef=xf(regeneratorRuntime.mark((function t(e){var n;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,Yc(e,(function(t){return t})).then((function(t){return t}));case 2:return n=t.sent,t.abrupt("return",n);case 4:case"end":return t.stop()}}),t)})))).apply(this,arguments)}var Af={init:function(t){(_f=xi(t.container)).datum(t.data),Mf.scaleColor(t.scaleColor),_f.call(Mf)},loadMapData:function(t){return Ef.apply(this,arguments)}};n(133);function Sf(t){var e=t.getBoundingClientRect();return{width:e.width,height:e.height,top:e.top,right:e.right,bottom:e.bottom,left:e.left,x:e.left,y:e.top}}function Of(t){if("[object Window]"!==t.toString()){var e=t.ownerDocument;return e?e.defaultView:window}return t}function Tf(t){var e=Of(t);return{scrollLeft:e.pageXOffset,scrollTop:e.pageYOffset}}function jf(t){return t instanceof Of(t).Element||t instanceof Element}function kf(t){return t instanceof Of(t).HTMLElement||t instanceof HTMLElement}function Cf(t){return t?(t.nodeName||"").toLowerCase():null}function Df(t){return(jf(t)?t.ownerDocument:t.document).documentElement}function Pf(t){return Sf(Df(t)).left+Tf(t).scrollLeft}function Nf(t){return Of(t).getComputedStyle(t)}function Lf(t){var e=Nf(t),n=e.overflow,r=e.overflowX,i=e.overflowY;return/auto|scroll|overlay|hidden/.test(n+i+r)}function Ff(t,e,n){void 0===n&&(n=!1);var r,i,o=Df(e),a=Sf(t),u=kf(e),c={scrollLeft:0,scrollTop:0},s={x:0,y:0};return(u||!u&&!n)&&(("body"!==Cf(e)||Lf(o))&&(c=(r=e)!==Of(r)&&kf(r)?{scrollLeft:(i=r).scrollLeft,scrollTop:i.scrollTop}:Tf(r)),kf(e)?((s=Sf(e)).x+=e.clientLeft,s.y+=e.clientTop):o&&(s.x=Pf(o))),{x:a.left+c.scrollLeft-s.x,y:a.top+c.scrollTop-s.y,width:a.width,height:a.height}}function If(t){return{x:t.offsetLeft,y:t.offsetTop,width:t.offsetWidth,height:t.offsetHeight}}function Uf(t){return"html"===Cf(t)?t:t.assignedSlot||t.parentNode||t.host||Df(t)}function Rf(t,e){void 0===e&&(e=[]);var n=function t(e){return["html","body","#document"].indexOf(Cf(e))>=0?e.ownerDocument.body:kf(e)&&Lf(e)?e:t(Uf(e))}(t),r="body"===Cf(n),i=Of(n),o=r?[i].concat(i.visualViewport||[],Lf(n)?n:[]):n,a=e.concat(o);return r?a:a.concat(Rf(Uf(o)))}function Hf(t){return["table","td","th"].indexOf(Cf(t))>=0}function qf(t){return kf(t)&&"fixed"!==Nf(t).position?t.offsetParent:null}function Vf(t){for(var e=Of(t),n=qf(t);n&&Hf(n)&&"static"===Nf(n).position;)n=qf(n);return n&&"body"===Cf(n)&&"static"===Nf(n).position?e:n||function(t){for(var e=Uf(t);kf(e)&&["html","body"].indexOf(Cf(e))<0;){var n=Nf(e);if("none"!==n.transform||"none"!==n.perspective||"auto"!==n.willChange)return e;e=e.parentNode}return null}(t)||e}var Yf="top",Bf="bottom",zf="right",Wf="left",$f=[Yf,Bf,zf,Wf],Xf=$f.reduce((function(t,e){return t.concat([e+"-start",e+"-end"])}),[]),Gf=[].concat($f,["auto"]).reduce((function(t,e){return t.concat([e,e+"-start",e+"-end"])}),[]),Zf=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function Jf(t){var e=new Map,n=new Set,r=[];return t.forEach((function(t){e.set(t.name,t)})),t.forEach((function(t){n.has(t.name)||function t(i){n.add(i.name),[].concat(i.requires||[],i.requiresIfExists||[]).forEach((function(r){if(!n.has(r)){var i=e.get(r);i&&t(i)}})),r.push(i)}(t)})),r}var Qf={placement:"bottom",modifiers:[],strategy:"absolute"};function Kf(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return!e.some((function(t){return!(t&&"function"==typeof t.getBoundingClientRect)}))}function tl(t){void 0===t&&(t={});var e=t,n=e.defaultModifiers,r=void 0===n?[]:n,i=e.defaultOptions,o=void 0===i?Qf:i;return function(t,e,n){void 0===n&&(n=o);var i,a,u={placement:"bottom",orderedModifiers:[],options:Object.assign(Object.assign({},Qf),o),modifiersData:{},elements:{reference:t,popper:e},attributes:{},styles:{}},c=[],s=!1,f={state:u,setOptions:function(n){l(),u.options=Object.assign(Object.assign(Object.assign({},o),u.options),n),u.scrollParents={reference:jf(t)?Rf(t):t.contextElement?Rf(t.contextElement):[],popper:Rf(e)};var i=function(t){var e=Jf(t);return Zf.reduce((function(t,n){return t.concat(e.filter((function(t){return t.phase===n})))}),[])}(function(t){var e=t.reduce((function(t,e){var n=t[e.name];return t[e.name]=n?Object.assign(Object.assign(Object.assign({},n),e),{},{options:Object.assign(Object.assign({},n.options),e.options),data:Object.assign(Object.assign({},n.data),e.data)}):e,t}),{});return Object.keys(e).map((function(t){return e[t]}))}([].concat(r,u.options.modifiers)));return u.orderedModifiers=i.filter((function(t){return t.enabled})),u.orderedModifiers.forEach((function(t){var e=t.name,n=t.options,r=void 0===n?{}:n,i=t.effect;if("function"==typeof i){var o=i({state:u,name:e,instance:f,options:r});c.push(o||function(){})}})),f.update()},forceUpdate:function(){if(!s){var t=u.elements,e=t.reference,n=t.popper;if(Kf(e,n)){u.rects={reference:Ff(e,Vf(n),"fixed"===u.options.strategy),popper:If(n)},u.reset=!1,u.placement=u.options.placement,u.orderedModifiers.forEach((function(t){return u.modifiersData[t.name]=Object.assign({},t.data)}));for(var r=0;r<u.orderedModifiers.length;r++)if(!0!==u.reset){var i=u.orderedModifiers[r],o=i.fn,a=i.options,c=void 0===a?{}:a,l=i.name;"function"==typeof o&&(u=o({state:u,options:c,name:l,instance:f})||u)}else u.reset=!1,r=-1}}},update:(i=function(){return new Promise((function(t){f.forceUpdate(),t(u)}))},function(){return a||(a=new Promise((function(t){Promise.resolve().then((function(){a=void 0,t(i())}))}))),a}),destroy:function(){l(),s=!0}};if(!Kf(t,e))return f;function l(){c.forEach((function(t){return t()})),c=[]}return f.setOptions(n).then((function(t){!s&&n.onFirstUpdate&&n.onFirstUpdate(t)})),f}}var el={passive:!0};function nl(t){return t.split("-")[0]}function rl(t){return t.split("-")[1]}function il(t){return["top","bottom"].indexOf(t)>=0?"x":"y"}function ol(t){var e,n=t.reference,r=t.element,i=t.placement,o=i?nl(i):null,a=i?rl(i):null,u=n.x+n.width/2-r.width/2,c=n.y+n.height/2-r.height/2;switch(o){case Yf:e={x:u,y:n.y-r.height};break;case Bf:e={x:u,y:n.y+n.height};break;case zf:e={x:n.x+n.width,y:c};break;case Wf:e={x:n.x-r.width,y:c};break;default:e={x:n.x,y:n.y}}var s=o?il(o):null;if(null!=s){var f="y"===s?"height":"width";switch(a){case"start":e[s]=Math.floor(e[s])-Math.floor(n[f]/2-r[f]/2);break;case"end":e[s]=Math.floor(e[s])+Math.ceil(n[f]/2-r[f]/2)}}return e}var al={top:"auto",right:"auto",bottom:"auto",left:"auto"};function ul(t){var e,n=t.popper,r=t.popperRect,i=t.placement,o=t.offsets,a=t.position,u=t.gpuAcceleration,c=t.adaptive,s=function(t){var e=t.x,n=t.y,r=window.devicePixelRatio||1;return{x:Math.round(e*r)/r||0,y:Math.round(n*r)/r||0}}(o),f=s.x,l=s.y,h=o.hasOwnProperty("x"),p=o.hasOwnProperty("y"),d=Wf,v=Yf,g=window;if(c){var y=Vf(n);y===Of(n)&&(y=Df(n)),i===Yf&&(v=Bf,l-=y.clientHeight-r.height,l*=u?1:-1),i===Wf&&(d=zf,f-=y.clientWidth-r.width,f*=u?1:-1)}var m,b=Object.assign({position:a},c&&al);return u?Object.assign(Object.assign({},b),{},((m={})[v]=p?"0":"",m[d]=h?"0":"",m.transform=(g.devicePixelRatio||1)<2?"translate("+f+"px, "+l+"px)":"translate3d("+f+"px, "+l+"px, 0)",m)):Object.assign(Object.assign({},b),{},((e={})[v]=p?l+"px":"",e[d]=h?f+"px":"",e.transform="",e))}var cl={left:"right",right:"left",bottom:"top",top:"bottom"};function sl(t){return t.replace(/left|right|bottom|top/g,(function(t){return cl[t]}))}var fl={start:"end",end:"start"};function ll(t){return t.replace(/start|end/g,(function(t){return fl[t]}))}function hl(t,e){var n=Boolean(e.getRootNode&&e.getRootNode().host);if(t.contains(e))return!0;if(n){var r=e;do{if(r&&t.isSameNode(r))return!0;r=r.parentNode||r.host}while(r)}return!1}function pl(t){return Object.assign(Object.assign({},t),{},{left:t.x,top:t.y,right:t.x+t.width,bottom:t.y+t.height})}function dl(t,e){return"viewport"===e?pl(function(t){var e=Of(t),n=Df(t),r=e.visualViewport,i=n.clientWidth,o=n.clientHeight,a=0,u=0;return r&&(i=r.width,o=r.height,/^((?!chrome|android).)*safari/i.test(navigator.userAgent)||(a=r.offsetLeft,u=r.offsetTop)),{width:i,height:o,x:a+Pf(t),y:u}}(t)):kf(e)?function(t){var e=Sf(t);return e.top=e.top+t.clientTop,e.left=e.left+t.clientLeft,e.bottom=e.top+t.clientHeight,e.right=e.left+t.clientWidth,e.width=t.clientWidth,e.height=t.clientHeight,e.x=e.left,e.y=e.top,e}(e):pl(function(t){var e=Df(t),n=Tf(t),r=t.ownerDocument.body,i=Math.max(e.scrollWidth,e.clientWidth,r?r.scrollWidth:0,r?r.clientWidth:0),o=Math.max(e.scrollHeight,e.clientHeight,r?r.scrollHeight:0,r?r.clientHeight:0),a=-n.scrollLeft+Pf(t),u=-n.scrollTop;return"rtl"===Nf(r||e).direction&&(a+=Math.max(e.clientWidth,r?r.clientWidth:0)-i),{width:i,height:o,x:a,y:u}}(Df(t)))}function vl(t,e,n){var r="clippingParents"===e?function(t){var e=Rf(t),n=["absolute","fixed"].indexOf(Nf(t).position)>=0&&kf(t)?Vf(t):t;return jf(n)?e.filter((function(t){return jf(t)&&hl(t,n)})):[]}(t):[].concat(e),i=[].concat(r,[n]),o=i[0],a=i.reduce((function(e,n){var r=dl(t,n);return e.top=Math.max(r.top,e.top),e.right=Math.min(r.right,e.right),e.bottom=Math.min(r.bottom,e.bottom),e.left=Math.max(r.left,e.left),e}),dl(t,o));return a.width=a.right-a.left,a.height=a.bottom-a.top,a.x=a.left,a.y=a.top,a}function gl(t){return Object.assign(Object.assign({},{top:0,right:0,bottom:0,left:0}),t)}function yl(t,e){return e.reduce((function(e,n){return e[n]=t,e}),{})}function ml(t,e){void 0===e&&(e={});var n=e,r=n.placement,i=void 0===r?t.placement:r,o=n.boundary,a=void 0===o?"clippingParents":o,u=n.rootBoundary,c=void 0===u?"viewport":u,s=n.elementContext,f=void 0===s?"popper":s,l=n.altBoundary,h=void 0!==l&&l,p=n.padding,d=void 0===p?0:p,v=gl("number"!=typeof d?d:yl(d,$f)),g="popper"===f?"reference":"popper",y=t.elements.reference,m=t.rects.popper,b=t.elements[h?g:f],w=vl(jf(b)?b:b.contextElement||Df(t.elements.popper),a,c),x=Sf(y),_=ol({reference:x,element:m,strategy:"absolute",placement:i}),M=pl(Object.assign(Object.assign({},m),_)),E="popper"===f?M:x,A={top:w.top-E.top+v.top,bottom:E.bottom-w.bottom+v.bottom,left:w.left-E.left+v.left,right:E.right-w.right+v.right},S=t.modifiersData.offset;if("popper"===f&&S){var O=S[i];Object.keys(A).forEach((function(t){var e=[zf,Bf].indexOf(t)>=0?1:-1,n=[Yf,Bf].indexOf(t)>=0?"y":"x";A[t]+=O[n]*e}))}return A}function bl(t,e,n){return Math.max(t,Math.min(e,n))}function wl(t,e,n){return void 0===n&&(n={x:0,y:0}),{top:t.top-e.height-n.y,right:t.right-e.width+n.x,bottom:t.bottom-e.height+n.y,left:t.left-e.width-n.x}}function xl(t){return[Yf,zf,Bf,Wf].some((function(e){return t[e]>=0}))}var _l=tl({defaultModifiers:[{name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(t){var e=t.state,n=t.instance,r=t.options,i=r.scroll,o=void 0===i||i,a=r.resize,u=void 0===a||a,c=Of(e.elements.popper),s=[].concat(e.scrollParents.reference,e.scrollParents.popper);return o&&s.forEach((function(t){t.addEventListener("scroll",n.update,el)})),u&&c.addEventListener("resize",n.update,el),function(){o&&s.forEach((function(t){t.removeEventListener("scroll",n.update,el)})),u&&c.removeEventListener("resize",n.update,el)}},data:{}},{name:"popperOffsets",enabled:!0,phase:"read",fn:function(t){var e=t.state,n=t.name;e.modifiersData[n]=ol({reference:e.rects.reference,element:e.rects.popper,strategy:"absolute",placement:e.placement})},data:{}},{name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(t){var e=t.state,n=t.options,r=n.gpuAcceleration,i=void 0===r||r,o=n.adaptive,a=void 0===o||o,u={placement:nl(e.placement),popper:e.elements.popper,popperRect:e.rects.popper,gpuAcceleration:i};null!=e.modifiersData.popperOffsets&&(e.styles.popper=Object.assign(Object.assign({},e.styles.popper),ul(Object.assign(Object.assign({},u),{},{offsets:e.modifiersData.popperOffsets,position:e.options.strategy,adaptive:a})))),null!=e.modifiersData.arrow&&(e.styles.arrow=Object.assign(Object.assign({},e.styles.arrow),ul(Object.assign(Object.assign({},u),{},{offsets:e.modifiersData.arrow,position:"absolute",adaptive:!1})))),e.attributes.popper=Object.assign(Object.assign({},e.attributes.popper),{},{"data-popper-placement":e.placement})},data:{}},{name:"applyStyles",enabled:!0,phase:"write",fn:function(t){var e=t.state;Object.keys(e.elements).forEach((function(t){var n=e.styles[t]||{},r=e.attributes[t]||{},i=e.elements[t];kf(i)&&Cf(i)&&(Object.assign(i.style,n),Object.keys(r).forEach((function(t){var e=r[t];!1===e?i.removeAttribute(t):i.setAttribute(t,!0===e?"":e)})))}))},effect:function(t){var e=t.state,n={popper:{position:e.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(e.elements.popper.style,n.popper),e.elements.arrow&&Object.assign(e.elements.arrow.style,n.arrow),function(){Object.keys(e.elements).forEach((function(t){var r=e.elements[t],i=e.attributes[t]||{},o=Object.keys(e.styles.hasOwnProperty(t)?e.styles[t]:n[t]).reduce((function(t,e){return t[e]="",t}),{});kf(r)&&Cf(r)&&(Object.assign(r.style,o),Object.keys(i).forEach((function(t){r.removeAttribute(t)})))}))}},requires:["computeStyles"]},{name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(t){var e=t.state,n=t.options,r=t.name,i=n.offset,o=void 0===i?[0,0]:i,a=Gf.reduce((function(t,n){return t[n]=function(t,e,n){var r=nl(t),i=[Wf,Yf].indexOf(r)>=0?-1:1,o="function"==typeof n?n(Object.assign(Object.assign({},e),{},{placement:t})):n,a=o[0],u=o[1];return a=a||0,u=(u||0)*i,[Wf,zf].indexOf(r)>=0?{x:u,y:a}:{x:a,y:u}}(n,e.rects,o),t}),{}),u=a[e.placement],c=u.x,s=u.y;null!=e.modifiersData.popperOffsets&&(e.modifiersData.popperOffsets.x+=c,e.modifiersData.popperOffsets.y+=s),e.modifiersData[r]=a}},{name:"flip",enabled:!0,phase:"main",fn:function(t){var e=t.state,n=t.options,r=t.name;if(!e.modifiersData[r]._skip){for(var i=n.mainAxis,o=void 0===i||i,a=n.altAxis,u=void 0===a||a,c=n.fallbackPlacements,s=n.padding,f=n.boundary,l=n.rootBoundary,h=n.altBoundary,p=n.flipVariations,d=void 0===p||p,v=n.allowedAutoPlacements,g=e.options.placement,y=nl(g),m=c||(y===g||!d?[sl(g)]:function(t){if("auto"===nl(t))return[];var e=sl(t);return[ll(t),e,ll(e)]}(g)),b=[g].concat(m).reduce((function(t,n){return t.concat("auto"===nl(n)?function(t,e){void 0===e&&(e={});var n=e,r=n.placement,i=n.boundary,o=n.rootBoundary,a=n.padding,u=n.flipVariations,c=n.allowedAutoPlacements,s=void 0===c?Gf:c,f=rl(r),l=(f?u?Xf:Xf.filter((function(t){return rl(t)===f})):$f).filter((function(t){return s.indexOf(t)>=0})).reduce((function(e,n){return e[n]=ml(t,{placement:n,boundary:i,rootBoundary:o,padding:a})[nl(n)],e}),{});return Object.keys(l).sort((function(t,e){return l[t]-l[e]}))}(e,{placement:n,boundary:f,rootBoundary:l,padding:s,flipVariations:d,allowedAutoPlacements:v}):n)}),[]),w=e.rects.reference,x=e.rects.popper,_=new Map,M=!0,E=b[0],A=0;A<b.length;A++){var S=b[A],O=nl(S),T="start"===rl(S),j=[Yf,Bf].indexOf(O)>=0,k=j?"width":"height",C=ml(e,{placement:S,boundary:f,rootBoundary:l,altBoundary:h,padding:s}),D=j?T?zf:Wf:T?Bf:Yf;w[k]>x[k]&&(D=sl(D));var P=sl(D),N=[];if(o&&N.push(C[O]<=0),u&&N.push(C[D]<=0,C[P]<=0),N.every((function(t){return t}))){E=S,M=!1;break}_.set(S,N)}if(M)for(var L=function(t){var e=b.find((function(e){var n=_.get(e);if(n)return n.slice(0,t).every((function(t){return t}))}));if(e)return E=e,"break"},F=d?3:1;F>0;F--){if("break"===L(F))break}e.placement!==E&&(e.modifiersData[r]._skip=!0,e.placement=E,e.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}},{name:"preventOverflow",enabled:!0,phase:"main",fn:function(t){var e=t.state,n=t.options,r=t.name,i=n.mainAxis,o=void 0===i||i,a=n.altAxis,u=void 0!==a&&a,c=n.boundary,s=n.rootBoundary,f=n.altBoundary,l=n.padding,h=n.tether,p=void 0===h||h,d=n.tetherOffset,v=void 0===d?0:d,g=ml(e,{boundary:c,rootBoundary:s,padding:l,altBoundary:f}),y=nl(e.placement),m=rl(e.placement),b=!m,w=il(y),x="x"===w?"y":"x",_=e.modifiersData.popperOffsets,M=e.rects.reference,E=e.rects.popper,A="function"==typeof v?v(Object.assign(Object.assign({},e.rects),{},{placement:e.placement})):v,S={x:0,y:0};if(_){if(o){var O="y"===w?Yf:Wf,T="y"===w?Bf:zf,j="y"===w?"height":"width",k=_[w],C=_[w]+g[O],D=_[w]-g[T],P=p?-E[j]/2:0,N="start"===m?M[j]:E[j],L="start"===m?-E[j]:-M[j],F=e.elements.arrow,I=p&&F?If(F):{width:0,height:0},U=e.modifiersData["arrow#persistent"]?e.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},R=U[O],H=U[T],q=bl(0,M[j],I[j]),V=b?M[j]/2-P-q-R-A:N-q-R-A,Y=b?-M[j]/2+P+q+H+A:L+q+H+A,B=e.elements.arrow&&Vf(e.elements.arrow),z=B?"y"===w?B.clientTop||0:B.clientLeft||0:0,W=e.modifiersData.offset?e.modifiersData.offset[e.placement][w]:0,$=_[w]+V-W-z,X=_[w]+Y-W,G=bl(p?Math.min(C,$):C,k,p?Math.max(D,X):D);_[w]=G,S[w]=G-k}if(u){var Z="x"===w?Yf:Wf,J="x"===w?Bf:zf,Q=_[x],K=bl(Q+g[Z],Q,Q-g[J]);_[x]=K,S[x]=K-Q}e.modifiersData[r]=S}},requiresIfExists:["offset"]},{name:"arrow",enabled:!0,phase:"main",fn:function(t){var e,n=t.state,r=t.name,i=n.elements.arrow,o=n.modifiersData.popperOffsets,a=nl(n.placement),u=il(a),c=[Wf,zf].indexOf(a)>=0?"height":"width";if(i&&o){var s=n.modifiersData[r+"#persistent"].padding,f=If(i),l="y"===u?Yf:Wf,h="y"===u?Bf:zf,p=n.rects.reference[c]+n.rects.reference[u]-o[u]-n.rects.popper[c],d=o[u]-n.rects.reference[u],v=Vf(i),g=v?"y"===u?v.clientHeight||0:v.clientWidth||0:0,y=p/2-d/2,m=s[l],b=g-f[c]-s[h],w=g/2-f[c]/2+y,x=bl(m,w,b),_=u;n.modifiersData[r]=((e={})[_]=x,e.centerOffset=x-w,e)}},effect:function(t){var e=t.state,n=t.options,r=t.name,i=n.element,o=void 0===i?"[data-popper-arrow]":i,a=n.padding,u=void 0===a?0:a;null!=o&&("string"!=typeof o||(o=e.elements.popper.querySelector(o)))&&hl(e.elements.popper,o)&&(e.elements.arrow=o,e.modifiersData[r+"#persistent"]={padding:gl("number"!=typeof u?u:yl(u,$f))})},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]},{name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(t){var e=t.state,n=t.name,r=e.rects.reference,i=e.rects.popper,o=e.modifiersData.preventOverflow,a=ml(e,{elementContext:"reference"}),u=ml(e,{altBoundary:!0}),c=wl(a,r),s=wl(u,i,o),f=xl(c),l=xl(s);e.modifiersData[n]={referenceClippingOffsets:c,popperEscapeOffsets:s,isReferenceHidden:f,hasPopperEscaped:l},e.attributes.popper=Object.assign(Object.assign({},e.attributes.popper),{},{"data-popper-reference-hidden":f,"data-popper-escaped":l})}}]}),Ml={passive:!0,capture:!0};function El(t,e,n){if(Array.isArray(t)){var r=t[e];return null==r?Array.isArray(n)?n[e]:n:r}return t}function Al(t,e){var n={}.toString.call(t);return 0===n.indexOf("[object")&&n.indexOf(e+"]")>-1}function Sl(t,e){return"function"==typeof t?t.apply(void 0,e):t}function Ol(t,e){return 0===e?t:function(r){clearTimeout(n),n=setTimeout((function(){t(r)}),e)};var n}function Tl(t){return[].concat(t)}function jl(t,e){-1===t.indexOf(e)&&t.push(e)}function kl(t){return t.split("-")[0]}function Cl(t){return[].slice.call(t)}function Dl(){return document.createElement("div")}function Pl(t){return["Element","Fragment"].some((function(e){return Al(t,e)}))}function Nl(t){return Al(t,"MouseEvent")}function Ll(t){return!(!t||!t._tippy||t._tippy.reference!==t)}function Fl(t){return Pl(t)?[t]:function(t){return Al(t,"NodeList")}(t)?Cl(t):Array.isArray(t)?t:Cl(document.querySelectorAll(t))}function Il(t,e){t.forEach((function(t){t&&(t.style.transitionDuration=e+"ms")}))}function Ul(t,e){t.forEach((function(t){t&&t.setAttribute("data-state",e)}))}function Rl(t){var e=Tl(t)[0];return e&&e.ownerDocument||document}function Hl(t,e,n){var r=e+"EventListener";["transitionend","webkitTransitionEnd"].forEach((function(e){t[r](e,n)}))}var ql={isTouch:!1},Vl=0;function Yl(){ql.isTouch||(ql.isTouch=!0,window.performance&&document.addEventListener("mousemove",Bl))}function Bl(){var t=performance.now();t-Vl<20&&(ql.isTouch=!1,document.removeEventListener("mousemove",Bl)),Vl=t}function zl(){var t=document.activeElement;if(Ll(t)){var e=t._tippy;t.blur&&!e.state.isVisible&&t.blur()}}var Wl="undefined"!=typeof window&&"undefined"!=typeof document?navigator.userAgent:"",$l=/MSIE |Trident\//.test(Wl);var Xl={animateFill:!1,followCursor:!1,inlinePositioning:!1,sticky:!1},Gl=Object.assign({appendTo:function(){return document.body},aria:{content:"auto",expanded:"auto"},delay:0,duration:[300,250],getReferenceClientRect:null,hideOnClick:!0,ignoreAttributes:!1,interactive:!1,interactiveBorder:2,interactiveDebounce:0,moveTransition:"",offset:[0,10],onAfterUpdate:function(){},onBeforeUpdate:function(){},onCreate:function(){},onDestroy:function(){},onHidden:function(){},onHide:function(){},onMount:function(){},onShow:function(){},onShown:function(){},onTrigger:function(){},onUntrigger:function(){},onClickOutside:function(){},placement:"top",plugins:[],popperOptions:{},render:null,showOnCreate:!1,touch:!0,trigger:"mouseenter focus",triggerTarget:null},Xl,{},{allowHTML:!1,animation:"fade",arrow:!0,content:"",inertia:!1,maxWidth:350,role:"tooltip",theme:"",zIndex:9999}),Zl=Object.keys(Gl);function Jl(t){var e=(t.plugins||[]).reduce((function(e,n){var r=n.name,i=n.defaultValue;return r&&(e[r]=void 0!==t[r]?t[r]:i),e}),{});return Object.assign({},t,{},e)}function Ql(t,e){var n=Object.assign({},e,{content:Sl(e.content,[t])},e.ignoreAttributes?{}:function(t,e){return(e?Object.keys(Jl(Object.assign({},Gl,{plugins:e}))):Zl).reduce((function(e,n){var r=(t.getAttribute("data-tippy-"+n)||"").trim();if(!r)return e;if("content"===n)e[n]=r;else try{e[n]=JSON.parse(r)}catch(t){e[n]=r}return e}),{})}(t,e.plugins));return n.aria=Object.assign({},Gl.aria,{},n.aria),n.aria={expanded:"auto"===n.aria.expanded?e.interactive:n.aria.expanded,content:"auto"===n.aria.content?e.interactive?null:"describedby":n.aria.content},n}function Kl(t,e){t.innerHTML=e}function th(t){var e=Dl();return!0===t?e.className="tippy-arrow":(e.className="tippy-svg-arrow",Pl(t)?e.appendChild(t):Kl(e,t)),e}function eh(t,e){Pl(e.content)?(Kl(t,""),t.appendChild(e.content)):"function"!=typeof e.content&&(e.allowHTML?Kl(t,e.content):t.textContent=e.content)}function nh(t){var e=t.firstElementChild,n=Cl(e.children);return{box:e,content:n.find((function(t){return t.classList.contains("tippy-content")})),arrow:n.find((function(t){return t.classList.contains("tippy-arrow")||t.classList.contains("tippy-svg-arrow")})),backdrop:n.find((function(t){return t.classList.contains("tippy-backdrop")}))}}function rh(t){var e=Dl(),n=Dl();n.className="tippy-box",n.setAttribute("data-state","hidden"),n.setAttribute("tabindex","-1");var r=Dl();function i(n,r){var i=nh(e),o=i.box,a=i.content,u=i.arrow;r.theme?o.setAttribute("data-theme",r.theme):o.removeAttribute("data-theme"),"string"==typeof r.animation?o.setAttribute("data-animation",r.animation):o.removeAttribute("data-animation"),r.inertia?o.setAttribute("data-inertia",""):o.removeAttribute("data-inertia"),o.style.maxWidth="number"==typeof r.maxWidth?r.maxWidth+"px":r.maxWidth,r.role?o.setAttribute("role",r.role):o.removeAttribute("role"),n.content===r.content&&n.allowHTML===r.allowHTML||eh(a,t.props),r.arrow?u?n.arrow!==r.arrow&&(o.removeChild(u),o.appendChild(th(r.arrow))):o.appendChild(th(r.arrow)):u&&o.removeChild(u)}return r.className="tippy-content",r.setAttribute("data-state","hidden"),eh(r,t.props),e.appendChild(n),n.appendChild(r),i(t.props,t.props),{popper:e,onUpdate:i}}rh.$$tippy=!0;var ih=1,oh=[],ah=[];function uh(t,e){var n,r,i,o,a,u,c,s,f=Ql(t,Object.assign({},Gl,{},Jl(e))),l=!1,h=!1,p=!1,d=!1,v=[],g=Ol($,f.interactiveDebounce),y=Rl(f.triggerTarget||t),m=ih++,b=(s=f.plugins).filter((function(t,e){return s.indexOf(t)===e})),w={id:m,reference:t,popper:Dl(),popperInstance:null,props:f,state:{isEnabled:!0,isVisible:!1,isDestroyed:!1,isMounted:!1,isShown:!1},plugins:b,clearDelayTimeouts:function(){clearTimeout(n),clearTimeout(r),cancelAnimationFrame(i)},setProps:function(e){0;if(w.state.isDestroyed)return;P("onBeforeUpdate",[w,e]),z();var n=w.props,r=Ql(t,Object.assign({},w.props,{},e,{ignoreAttributes:!0}));w.props=r,B(),n.interactiveDebounce!==r.interactiveDebounce&&(F(),g=Ol($,r.interactiveDebounce));n.triggerTarget&&!r.triggerTarget?Tl(n.triggerTarget).forEach((function(t){t.removeAttribute("aria-expanded")})):r.triggerTarget&&t.removeAttribute("aria-expanded");L(),D(),M&&M(n,r);w.popperInstance&&(J(),K().forEach((function(t){requestAnimationFrame(t._tippy.popperInstance.forceUpdate)})));P("onAfterUpdate",[w,e])},setContent:function(t){w.setProps({content:t})},show:function(){0;var t=w.state.isVisible,e=w.state.isDestroyed,n=!w.state.isEnabled,r=ql.isTouch&&!w.props.touch,i=El(w.props.duration,0,Gl.duration);if(t||e||n||r)return;if(j().hasAttribute("disabled"))return;if(P("onShow",[w],!1),!1===w.props.onShow(w))return;w.state.isVisible=!0,T()&&(_.style.visibility="visible");D(),H(),w.state.isMounted||(_.style.transition="none");if(T()){var o=k(),a=o.box,c=o.content;Il([a,c],0)}u=function(){if(w.state.isVisible&&!d){if(d=!0,_.offsetHeight,_.style.transition=w.props.moveTransition,T()&&w.props.animation){var t=k(),e=t.box,n=t.content;Il([e,n],i),Ul([e,n],"visible")}N(),L(),jl(ah,w),w.state.isMounted=!0,P("onMount",[w]),w.props.animation&&T()&&function(t,e){V(t,e)}(i,(function(){w.state.isShown=!0,P("onShown",[w])}))}},function(){var t,e=w.props.appendTo,n=j();t=w.props.interactive&&e===Gl.appendTo||"parent"===e?n.parentNode:Sl(e,[n]);t.contains(_)||t.appendChild(_);J(),!1}()},hide:function(){0;var t=!w.state.isVisible,e=w.state.isDestroyed,n=!w.state.isEnabled,r=El(w.props.duration,1,Gl.duration);if(t||e||n)return;if(P("onHide",[w],!1),!1===w.props.onHide(w))return;w.state.isVisible=!1,w.state.isShown=!1,d=!1,T()&&(_.style.visibility="hidden");if(F(),q(),D(),T()){var i=k(),o=i.box,a=i.content;w.props.animation&&(Il([o,a],r),Ul([o,a],"hidden"))}N(),L(),w.props.animation?T()&&function(t,e){V(t,(function(){!w.state.isVisible&&_.parentNode&&_.parentNode.contains(_)&&e()}))}(r,w.unmount):w.unmount()},hideWithInteractivity:function(t){0;y.body.addEventListener("mouseleave",et),y.addEventListener("mousemove",g),jl(oh,g),g(t)},enable:function(){w.state.isEnabled=!0},disable:function(){w.hide(),w.state.isEnabled=!1},unmount:function(){0;w.state.isVisible&&w.hide();if(!w.state.isMounted)return;Q(),K().forEach((function(t){t._tippy.unmount()})),_.parentNode&&_.parentNode.removeChild(_);ah=ah.filter((function(t){return t!==w})),w.state.isMounted=!1,P("onHidden",[w])},destroy:function(){0;if(w.state.isDestroyed)return;w.clearDelayTimeouts(),w.unmount(),z(),delete t._tippy,w.state.isDestroyed=!0,P("onDestroy",[w])}};if(!f.render)return w;var x=f.render(w),_=x.popper,M=x.onUpdate;_.setAttribute("data-tippy-root",""),_.id="tippy-"+w.id,w.popper=_,t._tippy=w,_._tippy=w;var E=b.map((function(t){return t.fn(w)})),A=t.hasAttribute("aria-expanded");return B(),L(),D(),P("onCreate",[w]),f.showOnCreate&&tt(),_.addEventListener("mouseenter",(function(){w.props.interactive&&w.state.isVisible&&w.clearDelayTimeouts()})),_.addEventListener("mouseleave",(function(t){w.props.interactive&&w.props.trigger.indexOf("mouseenter")>=0&&(y.addEventListener("mousemove",g),g(t))})),w;function S(){var t=w.props.touch;return Array.isArray(t)?t:[t,0]}function O(){return"hold"===S()[0]}function T(){var t;return!!(null==(t=w.props.render)?void 0:t.$$tippy)}function j(){return c||t}function k(){return nh(_)}function C(t){return w.state.isMounted&&!w.state.isVisible||ql.isTouch||o&&"focus"===o.type?0:El(w.props.delay,t?0:1,Gl.delay)}function D(){_.style.pointerEvents=w.props.interactive&&w.state.isVisible?"":"none",_.style.zIndex=""+w.props.zIndex}function P(t,e,n){var r;(void 0===n&&(n=!0),E.forEach((function(n){n[t]&&n[t].apply(void 0,e)})),n)&&(r=w.props)[t].apply(r,e)}function N(){var e=w.props.aria;if(e.content){var n="aria-"+e.content,r=_.id;Tl(w.props.triggerTarget||t).forEach((function(t){var e=t.getAttribute(n);if(w.state.isVisible)t.setAttribute(n,e?e+" "+r:r);else{var i=e&&e.replace(r,"").trim();i?t.setAttribute(n,i):t.removeAttribute(n)}}))}}function L(){!A&&w.props.aria.expanded&&Tl(w.props.triggerTarget||t).forEach((function(t){w.props.interactive?t.setAttribute("aria-expanded",w.state.isVisible&&t===j()?"true":"false"):t.removeAttribute("aria-expanded")}))}function F(){y.body.removeEventListener("mouseleave",et),y.removeEventListener("mousemove",g),oh=oh.filter((function(t){return t!==g}))}function I(t){if(!(ql.isTouch&&(p||"mousedown"===t.type)||w.props.interactive&&_.contains(t.target))){if(j().contains(t.target)){if(ql.isTouch)return;if(w.state.isVisible&&w.props.trigger.indexOf("click")>=0)return}else P("onClickOutside",[w,t]);!0===w.props.hideOnClick&&(l=!1,w.clearDelayTimeouts(),w.hide(),h=!0,setTimeout((function(){h=!1})),w.state.isMounted||q())}}function U(){p=!0}function R(){p=!1}function H(){y.addEventListener("mousedown",I,!0),y.addEventListener("touchend",I,Ml),y.addEventListener("touchstart",R,Ml),y.addEventListener("touchmove",U,Ml)}function q(){y.removeEventListener("mousedown",I,!0),y.removeEventListener("touchend",I,Ml),y.removeEventListener("touchstart",R,Ml),y.removeEventListener("touchmove",U,Ml)}function V(t,e){var n=k().box;function r(t){t.target===n&&(Hl(n,"remove",r),e())}if(0===t)return e();Hl(n,"remove",a),Hl(n,"add",r),a=r}function Y(e,n,r){void 0===r&&(r=!1),Tl(w.props.triggerTarget||t).forEach((function(t){t.addEventListener(e,n,r),v.push({node:t,eventType:e,handler:n,options:r})}))}function B(){var t;O()&&(Y("touchstart",W,{passive:!0}),Y("touchend",X,{passive:!0})),(t=w.props.trigger,t.split(/\s+/).filter(Boolean)).forEach((function(t){if("manual"!==t)switch(Y(t,W),t){case"mouseenter":Y("mouseleave",X);break;case"focus":Y($l?"focusout":"blur",G);break;case"focusin":Y("focusout",G)}}))}function z(){v.forEach((function(t){var e=t.node,n=t.eventType,r=t.handler,i=t.options;e.removeEventListener(n,r,i)})),v=[]}function W(t){var e,n=!1;if(w.state.isEnabled&&!Z(t)&&!h){var r="focus"===(null==(e=o)?void 0:e.type);o=t,c=t.currentTarget,L(),!w.state.isVisible&&Nl(t)&&oh.forEach((function(e){return e(t)})),"click"===t.type&&(w.props.trigger.indexOf("mouseenter")<0||l)&&!1!==w.props.hideOnClick&&w.state.isVisible?n=!0:tt(t),"click"===t.type&&(l=!n),n&&!r&&et(t)}}function $(e){var n=e.target,r=t.contains(n)||_.contains(n);"mousemove"===e.type&&r||function(t,e){var n=e.clientX,r=e.clientY;return t.every((function(t){var e=t.popperRect,i=t.popperState,o=t.props.interactiveBorder,a=kl(i.placement),u=i.modifiersData.offset;if(!u)return!0;var c="bottom"===a?u.top.y:0,s="top"===a?u.bottom.y:0,f="right"===a?u.left.x:0,l="left"===a?u.right.x:0,h=e.top-r+c>o,p=r-e.bottom-s>o,d=e.left-n+f>o,v=n-e.right-l>o;return h||p||d||v}))}(K().concat(_).map((function(t){var e,n=null==(e=t._tippy.popperInstance)?void 0:e.state;return n?{popperRect:t.getBoundingClientRect(),popperState:n,props:f}:null})).filter(Boolean),e)&&(F(),et(e))}function X(t){Z(t)||w.props.trigger.indexOf("click")>=0&&l||(w.props.interactive?w.hideWithInteractivity(t):et(t))}function G(t){w.props.trigger.indexOf("focusin")<0&&t.target!==j()||w.props.interactive&&t.relatedTarget&&_.contains(t.relatedTarget)||et(t)}function Z(t){return!!ql.isTouch&&O()!==t.type.indexOf("touch")>=0}function J(){Q();var e=w.props,n=e.popperOptions,r=e.placement,i=e.offset,o=e.getReferenceClientRect,a=e.moveTransition,c=T()?nh(_).arrow:null,s=o?{getBoundingClientRect:o,contextElement:o.contextElement||j()}:t,f=[{name:"offset",options:{offset:i}},{name:"preventOverflow",options:{padding:{top:2,bottom:2,left:5,right:5}}},{name:"flip",options:{padding:5}},{name:"computeStyles",options:{adaptive:!a}},{name:"$$tippy",enabled:!0,phase:"beforeWrite",requires:["computeStyles"],fn:function(t){var e=t.state;if(T()){var n=k().box;["placement","reference-hidden","escaped"].forEach((function(t){"placement"===t?n.setAttribute("data-placement",e.placement):e.attributes.popper["data-popper-"+t]?n.setAttribute("data-"+t,""):n.removeAttribute("data-"+t)})),e.attributes.popper={}}}}];T()&&c&&f.push({name:"arrow",options:{element:c,padding:3}}),f.push.apply(f,(null==n?void 0:n.modifiers)||[]),w.popperInstance=_l(s,_,Object.assign({},n,{placement:r,onFirstUpdate:u,modifiers:f}))}function Q(){w.popperInstance&&(w.popperInstance.destroy(),w.popperInstance=null)}function K(){return Cl(_.querySelectorAll("[data-tippy-root]"))}function tt(t){w.clearDelayTimeouts(),t&&P("onTrigger",[w,t]),H();var e=C(!0),r=S(),i=r[0],o=r[1];ql.isTouch&&"hold"===i&&o&&(e=o),e?n=setTimeout((function(){w.show()}),e):w.show()}function et(t){if(w.clearDelayTimeouts(),P("onUntrigger",[w,t]),w.state.isVisible){if(!(w.props.trigger.indexOf("mouseenter")>=0&&w.props.trigger.indexOf("click")>=0&&["mouseleave","mousemove"].indexOf(t.type)>=0&&l)){var e=C(!1);e?r=setTimeout((function(){w.state.isVisible&&w.hide()}),e):i=requestAnimationFrame((function(){w.hide()}))}}else q()}}function ch(t,e){void 0===e&&(e={});var n=Gl.plugins.concat(e.plugins||[]);document.addEventListener("touchstart",Yl,Ml),window.addEventListener("blur",zl);var r=Object.assign({},e,{plugins:n}),i=Fl(t).reduce((function(t,e){var n=e&&uh(e,r);return n&&t.push(n),t}),[]);return Pl(t)?i[0]:i}ch.defaultProps=Gl,ch.setDefaultProps=function(t){Object.keys(t).forEach((function(e){Gl[e]=t[e]}))},ch.currentInput=ql;ch.setDefaultProps({render:rh});var sh=ch;function fh(t,e,n,r,i,o,a){try{var u=t[o](a),c=u.value}catch(t){return void n(t)}u.done?e(c):Promise.resolve(c).then(r,i)}function lh(t){return function(){var e=this,n=arguments;return new Promise((function(r,i){var o=t.apply(e,n);function a(t){fh(o,r,i,a,u,"next",t)}function u(t){fh(o,r,i,a,u,"throw",t)}a(void 0)}))}}var hh,ph,dh=r.calculate();function vh(){return(vh=lh(regeneratorRuntime.mark((function t(e,n){return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,xa(e);case 2:return hh=t.sent,t.next=5,Af.loadMapData(n);case 5:ph=t.sent,gh(),sh("#interactive__tooltip",{content:"Idlib has seen the greatest increase of IDPs since 2016 as Assad’s government regains control of surrounding areas."}),yh();case 9:case"end":return t.stop()}}),t)})))).apply(this,arguments)}function gh(){var t,e,n=(t=hh.years.idp_total.slice(-1)[0],(e=hh.values.slice(1).reduce((function(e,n){var r=n.values.filter((function(e){return e.year===t})).map((function(t){return t}));return e[n.id]=r,e.all.push(r),e}),{all:[]})).all.sort((function(t,e){return t-e})),e.range=function(){for(var t=[],e=i.idp_total.groupSize,n=15e4;n<=9e5;n+=e)t.push(n);return t}(e.all),e);qc.colorDomain=n.range,qc.setup(),Ko.init({data:hh.values,container:"#interactive__charts",years:hh.years.idp_total,currentCategory:"idp_total",scaleColor:qc.returnColorScale()}),function(t){ph.features.forEach((function(t){return t.properties.value=t.properties.idp_2019})),Af.init({data:ph,container:"#interactive__map",colorDomain:t.range,scaleColor:qc.returnColorScale()})}(n)}function yh(){document.querySelectorAll(".loading-container").forEach((function(t){t.style.display="none",document.querySelectorAll(".hide-on-load").forEach((function(t){return t.classList.remove("hide-on-load")}))}))}window.addEventListener("DOMContentLoaded",(function(){!function(t,e){vh.apply(this,arguments)}("./data/2020_data.csv","./data/syria.geojson")})),window.addEventListener("resize",(function(){var t=r.calculate();dh!=t&&(dh=t,gh())}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,